<?xml version="1.0" encoding="UTF-8"?>
<model>
  <name>stdver</name>
  <xml_version>1.0</xml_version>
  <state_space>yes</state_space>
  <variable>
    <name>dmptmax</name>
    <equation_type>Behavioral</equation_type>
    <sector>Financial Sector</sector>
    <definition>Monetary policy indicator for both thresholds</definition>
    <description>DMPTMAX equals one when either the unemployment threshold or
the inflation threshold is breached.

</description>
    <standard_equation>
      <eviews_equation>dmptmax - dmptmax_aerr = (@recode((dmptlur)&gt;(dmptpi),dmptlur,dmptpi)) </eviews_equation>
      <python_equation>dmptmax - dmptmax_aerr = (max((dmptlur),(dmptpi))) </python_equation>
      <rhs_eq_var>dmptlur</rhs_eq_var>
      <rhs_eq_var>dmptpi</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>adjlegrt</name>
    <equation_type>Exogenous</equation_type>
    <definition>Potential government employment ratio (relative to business)</definition>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>d79a</name>
    <equation_type>Exogenous</equation_type>
    <definition>Dummy, post-1979 indicator</definition>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>d8095</name>
    <equation_type>Exogenous</equation_type>
    <definition>Dummy, 1980-1995 indicator</definition>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>d83</name>
    <equation_type>Exogenous</equation_type>
    <definition>Dummy, post-1983 indicator</definition>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>d87</name>
    <equation_type>Exogenous</equation_type>
    <definition>Dummy, post-1986 indicator</definition>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>ddockm</name>
    <equation_type>Exogenous</equation_type>
    <definition>Dock strike dummy, import equation</definition>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>ddockx</name>
    <equation_type>Exogenous</equation_type>
    <definition>Dock strike dummy, export equation</definition>
    <exogenous_projection>7</exogenous_projection>
  </variable>
  <variable>
    <name>delrff</name>
    <equation_type>Identity</equation_type>
    <sector>Financial Sector</sector>
    <definition>Federal funds rate, first diff</definition>
    <standard_equation>
      <eviews_equation>delrff - delrff_aerr = rff - rff(-1) </eviews_equation>
      <python_equation>delrff - delrff_aerr = rff - rff(-1) </python_equation>
      <rhs_eq_var>rff</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>deuc</name>
    <equation_type>Exogenous</equation_type>
    <definition>EUC switch:  1 for including EUC, 0 for not including</definition>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>dfmprr</name>
    <equation_type>Exogenous</equation_type>
    <definition>Dummy, Foreign monetary policy switch:  Exogenous real interest rate</definition>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>dfpdbt</name>
    <equation_type>Exogenous</equation_type>
    <definition>Fiscal policy switch:  1 for debt ratio stabilization</definition>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>dfpex</name>
    <equation_type>Exogenous</equation_type>
    <definition>Fiscal policy switch:  1 for exogenous personal income trend tax rates</definition>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>dfpsrp</name>
    <equation_type>Exogenous</equation_type>
    <definition>Fiscal policy switch:  1 for surplus ratio stabilization</definition>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>dglprd</name>
    <equation_type>Exogenous</equation_type>
    <definition>Switch to control for long-run productivity growth in the government sector</definition>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>dmpalt</name>
    <equation_type>Exogenous</equation_type>
    <definition>Monetary policy switch: MA rule</definition>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>dmpex</name>
    <equation_type>Exogenous</equation_type>
    <definition>Monetary policy switch:  exogenous federal funds rate</definition>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>dmpgen</name>
    <equation_type>Exogenous</equation_type>
    <definition>Monetary policy switch:  Generalized reaction function</definition>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>dmpintay</name>
    <equation_type>Exogenous</equation_type>
    <definition>Monetary policy switch:  inertial taylor rule</definition>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>dmprr</name>
    <equation_type>Exogenous</equation_type>
    <definition>Monetary policy switch:  exogenous real federal funds rate</definition>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>dmptay</name>
    <equation_type>Exogenous</equation_type>
    <definition>Monetary policy switch:  Taylor's reaction function</definition>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>dmptlr</name>
    <equation_type>Exogenous</equation_type>
    <definition>Monetary policy switch:  Taylor's reaction function with unemployment gap</definition>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>dmptlur</name>
    <equation_type>Behavioral</equation_type>
    <sector>Financial Sector</sector>
    <definition>Monetary policy indicator for unemployment threshold</definition>
    <description>DMPTLUR equals zero when the unemployment rate is above its
threshold (LURTRSH) one when it is below.  A logistic function
smoothes the transition, improving solution convergence properties.
</description>
    <standard_equation>
      <eviews_equation>dmptlur - dmptlur_aerr = 1/(1+exp(y_dmptlur(1)*(lur-lurtrsh))) </eviews_equation>
      <python_equation>dmptlur - dmptlur_aerr = 1/(1+exp(y_dmptlur_1*(lur-lurtrsh))) </python_equation>
      <coeff>
        <cf_name>y_dmptlur(1)</cf_name>
        <cf_value>25</cf_value>
      </coeff>
      <rhs_eq_var>lur</rhs_eq_var>
      <rhs_eq_var>lurtrsh</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>dmptpi</name>
    <equation_type>Behavioral</equation_type>
    <sector>Financial Sector</sector>
    <definition>Monetary policy indicator for inflation threshold</definition>
    <description>

DMPTPI equals zero when expected inflation is below its threshold
and one when it is above.  A logistic function smoothes the
transition, improving solution convergence properties.

</description>
    <standard_equation>
      <eviews_equation>dmptpi - dmptpi_aerr = 1/(1+exp(y_dmptpi(1)*(zpic58-pitrsh))) </eviews_equation>
      <python_equation>dmptpi - dmptpi_aerr = 1/(1+exp(y_dmptpi_1*(zpic58-pitrsh))) </python_equation>
      <coeff>
        <cf_name>y_dmptpi(1)</cf_name>
        <cf_value>-25</cf_value>
      </coeff>
      <rhs_eq_var>pitrsh</rhs_eq_var>
      <rhs_eq_var>zpic58</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>dmptr</name>
    <equation_type>Behavioral</equation_type>
    <sector>Financial Sector</sector>
    <definition>Monetary policy indicator for policy rule thresholds</definition>
    <description>DMPTR is initially zero.  It remains at that value until
either the unemployment threshold or the inflation threshold
is breached, after which it equals one.
</description>
    <standard_equation>
      <eviews_equation>dmptr - dmptr_aerr = (@recode((dmptmax)&gt;(dmptr(-1)),dmptmax,dmptr(-1))) </eviews_equation>
      <python_equation>dmptr - dmptr_aerr = (max(dmptmax,(dmptr(-1)))) </python_equation>
      <rhs_eq_var>dmptmax</rhs_eq_var>
      <rhs_eq_var>dmptr</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>dmptrsh</name>
    <equation_type>Exogenous</equation_type>
    <definition>Monetary policy threshold switch:  0 for no threshold,  1 for threshold</definition>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>dpadj</name>
    <equation_type>Behavioral</equation_type>
    <sector>Wages and Prices</sector>
    <definition>Price inflation aggregation adjustment</definition>
    <description>The adjustment factor for non-consumption prices equals the
value in the prior quarter plus the price aggregation discrepancy
in the prior quarter.  Thus, component prices are adjusted to
offset any aggregation discrepancy with only a one-quarter lag.
</description>
    <standard_equation>
      <eviews_equation>dpadj - dpadj_aerr - dpadj(-1) = y_dpadj(1) * dpgap(-1) </eviews_equation>
      <python_equation>dpadj - dpadj_aerr - dpadj(-1) = y_dpadj_1 * dpgap(-1) </python_equation>
      <coeff>
        <cf_name>y_dpadj(1)</cf_name>
        <cf_value>1.0000</cf_value>
      </coeff>
      <rhs_eq_var>dpgap</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>dpgap</name>
    <equation_type>Identity</equation_type>
    <sector>Wages and Prices</sector>
    <definition>Price inflation aggregation discrepancy</definition>
    <description>The price inflation aggregation discrepancy (DPGAP) equals the rate
of increase of the price for adjusted final sales excluding
consumption less the weighted sum of rates of price increase for the
non-consumption components of adjusted final sales.
</description>
    <standard_equation>
      <eviews_equation>dpgap - dpgap_aerr =  pipxnc/400 - (
        y_dpgap(1) * d( log( phr * pxp), 0, 1)
      + y_dpgap(2) * d( log( pbfir * pxp), 0, 1)
      + (y_dpgap(3)+y_dpgap(4)) * d( log( pegfr * pxp), 0, 1)
      + (y_dpgap(5)+y_dpgap(6)) * d( log( pegsr * pxp), 0, 1)
      + y_dpgap(7) * d( log( pxr * pxp), 0, 1))
</eviews_equation>
      <python_equation>dpgap - dpgap_aerr =  pipxnc/400 - (
        y_dpgap_1 * ( log( phr * pxp) - ( log( phr(-1) * pxp(-1))))
      + y_dpgap_2 * ( log( pbfir * pxp) - ( log( pbfir(-1) * pxp(-1))))
      + (y_dpgap_3+y_dpgap_4) * ( log( pegfr * pxp) - ( log( pegfr(-1) * pxp(-1))))
      + (y_dpgap_5+y_dpgap_6) * ( log( pegsr * pxp) - ( log( pegsr(-1) * pxp(-1))))
      + y_dpgap_7 * ( log( pxr * pxp) - ( log( pxr(-1) * pxp(-1)))))
</python_equation>
      <coeff>
        <cf_name>y_dpgap(1)</cf_name>
        <cf_value>0.1036498839384806</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_dpgap(2)</cf_name>
        <cf_value>0.3410415470273469</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_dpgap(3)</cf_name>
        <cf_value>0.08204590812944115</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_dpgap(4)</cf_name>
        <cf_value>0.03932014681002743</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_dpgap(5)</cf_name>
        <cf_value>0.05247494124140634</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_dpgap(6)</cf_name>
        <cf_value>0.05248394123132865</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_dpgap(7)</cf_name>
        <cf_value>0.328983631621969</cf_value>
      </coeff>
      <rhs_eq_var>pbfir</rhs_eq_var>
      <rhs_eq_var>pegfr</rhs_eq_var>
      <rhs_eq_var>pegsr</rhs_eq_var>
      <rhs_eq_var>phr</rhs_eq_var>
      <rhs_eq_var>pipxnc</rhs_eq_var>
      <rhs_eq_var>pxp</rhs_eq_var>
      <rhs_eq_var>pxr</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>drstar</name>
    <equation_type>Exogenous</equation_type>
    <definition>RSTAR updating switch: 1 is on, 0 is off</definition>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>ebfi</name>
    <equation_type>Behavioral</equation_type>
    <sector>Business Expenditures</sector>
    <definition>Business Fixed Investment, cw 2012$</definition>
    <description>Business Fixed Investment is a weighted average of the investment spending
of optimizing firms and an ad hoc term in lagged output growth adjusted for the trend growth
rate of the relative price of investment.
</description>
    <standard_equation>
      <eviews_equation>dlog(ebfi)  - ebfi_aerr =
          (y_ebfi(1)*(log(qebfi(-1)/ebfi(-1)))
          + y_ebfi(2)*dlog(ebfi(-1))
          + y_ebfi(3)*dlog(ebfi(-2))
          + y_ebfi(4)*zebfi)*(1
          -y_ebfi(5))
          + y_ebfi(5)*(dlog(xb(-1)) - hgpbfir(-1)/400)</eviews_equation>
      <python_equation>(log(ebfi) - log(ebfi(-1)))  - ebfi_aerr =
          (y_ebfi_1*(log(qebfi(-1)/ebfi(-1)))
          + y_ebfi_2*(log(ebfi(-1)) - log(ebfi(-2)))
          + y_ebfi_3*(log(ebfi(-2)) - log(ebfi(-3)))
          + y_ebfi_4*zebfi)*(1
          -y_ebfi_5)
          + y_ebfi_5*((log(xb(-1)) - log(xb(-2))) - hgpbfir(-1)/400)</python_equation>
      <coeff>
        <cf_name>y_ebfi(1)</cf_name>
        <cf_value>0.07358150979200171</cf_value>
        <t_stat>2.592163375459443</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_ebfi(2)</cf_name>
        <cf_value>0.5222641043182303</cf_value>
        <t_stat>4.287699440392147</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_ebfi(3)</cf_name>
        <cf_value>0.3022170849291267</cf_value>
        <t_stat>2.174719454590632</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_ebfi(4)</cf_name>
        <cf_value>1</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_ebfi(5)</cf_name>
        <cf_value>0.3835146156808873</cf_value>
        <t_stat>2.411491893124986</t_stat>
      </coeff>
      <rhs_eq_var>ebfi</rhs_eq_var>
      <rhs_eq_var>hgpbfir</rhs_eq_var>
      <rhs_eq_var>qebfi</rhs_eq_var>
      <rhs_eq_var>xb</rhs_eq_var>
      <rhs_eq_var>zebfi</rhs_eq_var>
      <estimation_statistics>
        <adjusted_r_squared>0.4270846843719483</adjusted_r_squared>
        <date>08/30/18   Time: 10:03 </date>
        <durbin_watson>2.032083749771118</durbin_watson>
        <method>Least Squares</method>
        <r_squared>0.4360833466053009</r_squared>
        <sample_end>2017Q4</sample_end>
        <sample_start>1970Q1</sample_start>
        <se_of_regression>0.01577474921941757</se_of_regression>
      </estimation_statistics>
    </standard_equation>
    <kfcalc>1</kfcalc>
    <stochastic_type>IS</stochastic_type>
  </variable>
  <variable>
    <name>ebfin</name>
    <equation_type>Identity</equation_type>
    <sector>Business Expenditures</sector>
    <definition>Investment in equipment, current $</definition>
    <standard_equation>
      <eviews_equation>ebfin - ebfin_aerr = 0.01*ebfi*pbfir*pxp </eviews_equation>
      <python_equation>ebfin - ebfin_aerr = 0.01*ebfi*pbfir*pxp </python_equation>
      <rhs_eq_var>ebfi</rhs_eq_var>
      <rhs_eq_var>pbfir</rhs_eq_var>
      <rhs_eq_var>pxp</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>ec</name>
    <equation_type>Behavioral</equation_type>
    <sector>Household Expenditures</sector>
    <definition>Consumption, cw 2012$ (FRB/US definition)</definition>
    <description>

The FRB/US concept of total consumer spending is approximated by
a fixed-weighted aggregation of its components.

</description>
    <standard_equation>
      <eviews_equation>log(ec) - ec_aerr = log(ec(-1)) + y_ec(1)*log(eco/eco(-1)) + y_ec(2)*log(ech/ech(-1))
                         +y_ec(3)*log((yhpcd+jkcd)/(yhpcd(-1)+jkcd(-1)))
     </eviews_equation>
      <python_equation>log(ec) - ec_aerr = log(ec(-1)) + y_ec_1*log(eco/eco(-1)) + y_ec_2*log(ech/ech(-1))
                         +y_ec_3*log((yhpcd+jkcd)/(yhpcd(-1)+jkcd(-1)))
     </python_equation>
      <coeff>
        <cf_name>y_ec(1)</cf_name>
        <cf_value>0.7310605131</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_ec(2)</cf_name>
        <cf_value>0.157421136</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_ec(3)</cf_name>
        <cf_value>0.1115183509</cf_value>
      </coeff>
      <rhs_eq_var>ec</rhs_eq_var>
      <rhs_eq_var>ech</rhs_eq_var>
      <rhs_eq_var>eco</rhs_eq_var>
      <rhs_eq_var>jkcd</rhs_eq_var>
      <rhs_eq_var>yhpcd</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>ecd</name>
    <equation_type>Behavioral</equation_type>
    <sector>Household Expenditures</sector>
    <definition>Consumer expenditures on durable goods, cw 2012$</definition>
    <description>Household investment in consumer durables is modeled using the
polynomial adjustment cost (PAC) framework, whose general structure is
shown below in the PAC Overview section.  To translate the general PAC
specification into the form in which it appears in the ECD equation,
associate log(ECD) with y, log(QECD) with y&lt;sup&gt;1*&lt;/sup&gt;, ZECO with
the expected weighted sum of future &amp;Delta;y&lt;sup&gt;1*&lt;/sup&gt;, and
8.02*ZGAPC2/400 with the expected weighed sum of future
y&lt;sup&gt;0*&lt;/sup&gt;.  The order of adjustment costs (m) is 2.

PAC Overview: Let y denote the decision variable, and y&lt;sup&gt;1*&lt;/sup&gt;
and y&lt;sup&gt;0*&lt;/sup&gt; be the nonstationary and stationary components of its
desired level in the absence of adjustment frictions.  The decision
rule derived from the PAC Euler equation has the following form.

(1) &amp;Delta;y&lt;sub&gt;t&lt;/sub&gt; =
      a&lt;sub&gt;0&lt;/sub&gt;(y&lt;sup&gt;1*&lt;/sup&gt;&lt;sub&gt;t-1&lt;/sub&gt; - y&lt;sub&gt;t-1&lt;/sub&gt;) +
      &amp;sum;&lt;sub&gt;i=1,m-1&lt;/sub&gt; a&lt;sub&gt;i&lt;/sub&gt;&amp;Delta;y&lt;sub&gt;t-i&lt;/sub&gt; +
      E&lt;sub&gt;t-1&lt;/sub&gt;&amp;sum;&lt;sub&gt;i=0,&amp;infin;&lt;/sub&gt;d&lt;sub&gt;i&lt;/sub&gt;&amp;Delta;y&lt;sup&gt;1*&lt;/sup&gt;&lt;sub&gt;t+i&lt;/sub&gt; +
      E&lt;sub&gt;t-1&lt;/sub&gt;&amp;sum;&lt;sub&gt;i=0,&amp;infin;&lt;/sub&gt;h&lt;sub&gt;i&lt;/sub&gt;y&lt;sup&gt;0*&lt;/sup&gt;&lt;sub&gt;t+i&lt;/sub&gt;

 The order of adjustment costs is given by parameter m.  The
forward weights, d&lt;sub&gt;i&lt;/sub&gt; and h&lt;sub&gt;i&lt;/sub&gt;, {i=0,&amp;infin;}, are
functions of the estimated values of a&lt;sub&gt;i&lt;/sub&gt; {i=0,m-1} and a
fixed discount factor (0.98).  Estimation imposes the growth
neutrality restriction &amp;sum;&lt;sub&gt;i=1,m-1&lt;/sub&gt;a&lt;sub&gt;i&lt;/sub&gt; +
&amp;sum;&lt;sub&gt;i=0,&amp;infin;&lt;/sub&gt;d&lt;sub&gt;i&lt;/sub&gt; = 1.  For more information,
see &lt;a href="pac_basics.pdf"&gt;Pac Basics&lt;/a&gt;.

</description>
    <standard_equation>
      <eviews_equation>dlog(ecd)  - ecd_aerr =
            y_ecd(1) * log(qecd(-1)/ecd(-1))
          + y_ecd(2) * dlog(ecd(-1))
          + y_ecd(3) * zecd
          + y_ecd(4) * zgapc2 / 400</eviews_equation>
      <python_equation>(log(ecd) - log(ecd(-1)))  - ecd_aerr =
            y_ecd_1 * log(qecd(-1)/ecd(-1))
          + y_ecd_2 * (log(ecd(-1)) - log(ecd(-2)))
          + y_ecd_3 * zecd
          + y_ecd_4 * zgapc2 / 400</python_equation>
      <coeff>
        <cf_name>y_ecd(1)</cf_name>
        <cf_value>0.1561499403562654</cf_value>
        <t_stat>3.822149702375726</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_ecd(2)</cf_name>
        <cf_value>-0.05999277989382532</cf_value>
        <t_stat>-0.8810639821989592</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_ecd(3)</cf_name>
        <cf_value>1</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_ecd(4)</cf_name>
        <cf_value>11.87185840275941</cf_value>
        <t_stat>3.108553110276274</t_stat>
      </coeff>
      <rhs_eq_var>ecd</rhs_eq_var>
      <rhs_eq_var>qecd</rhs_eq_var>
      <rhs_eq_var>zecd</rhs_eq_var>
      <rhs_eq_var>zgapc2</rhs_eq_var>
      <estimation_statistics>
        <adjusted_r_squared>0.1428955644369125</adjusted_r_squared>
        <date>08/30/18   Time: 10:02 </date>
        <durbin_watson>2.026607751846313</durbin_watson>
        <method>Least Squares</method>
        <r_squared>0.1517316997051239</r_squared>
        <sample_end>2017Q4</sample_end>
        <sample_start>1969Q2</sample_start>
        <se_of_regression>0.02697205170989037</se_of_regression>
      </estimation_statistics>
    </standard_equation>
    <kfcalc>1</kfcalc>
    <stochastic_type>IS</stochastic_type>
  </variable>
  <variable>
    <name>ech</name>
    <equation_type>Behavioral</equation_type>
    <sector>Household Expenditures</sector>
    <definition>Consumer expenditures on housing services, cw 2012$</definition>
    <description>
</description>
    <standard_equation>
      <eviews_equation>d(ech/kh(-1))  - ech_aerr =
           y_ech(1)
          + y_ech(2)*ech(-1)/kh(-2)
          + y_ech(3)*d(ech(-1)/kh(-2))</eviews_equation>
      <python_equation>(ech/kh(-1) - (ech(-1)/kh(-2)))  - ech_aerr =
           y_ech_1
          + y_ech_2*ech(-1)/kh(-2)
          + y_ech_3*(ech(-1)/kh(-2) - (ech(-2)/kh(-3)))</python_equation>
      <coeff>
        <cf_name>y_ech(1)</cf_name>
        <cf_value>0.0005280507960180215</cf_value>
        <t_stat>1.98089239418462</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_ech(2)</cf_name>
        <cf_value>-0.005044873655834186</cf_value>
        <t_stat>-1.871635939368791</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_ech(3)</cf_name>
        <cf_value>0.7183359768373699</cf_value>
        <t_stat>14.421159738464</t_stat>
      </coeff>
      <rhs_eq_var>ech</rhs_eq_var>
      <rhs_eq_var>kh</rhs_eq_var>
      <estimation_statistics>
        <F_statistic>108.2744659817186</F_statistic>
        <adjusted_r_squared>0.5303411157758981</adjusted_r_squared>
        <date>08/30/18   Time: 10:03 </date>
        <durbin_watson>1.714500863198455</durbin_watson>
        <method>Least Squares</method>
        <prob_F_statistic>5.194673906820202e-32</prob_F_statistic>
        <r_squared>0.5352848935045729</r_squared>
        <sample_end>2017Q4</sample_end>
        <sample_start>1970Q2</sample_start>
        <se_of_regression>0.0001922129610830469</se_of_regression>
      </estimation_statistics>
    </standard_equation>
    <stochastic_type>IS</stochastic_type>
  </variable>
  <variable>
    <name>ecnia</name>
    <equation_type>Behavioral</equation_type>
    <sector>Household Expenditures</sector>
    <definition>Personal consumption expenditures, cw 2012$ (NIPA definition)</definition>
    <description>

NIPA total consumer spending is approximated by a fixed-weighted aggregation of its components.

</description>
    <standard_equation>
      <eviews_equation>log(ecnia)  - ecnia_aerr = log(ecnia(-1))
          + y_ecnia(1)*log(eco/eco(-1))
          + y_ecnia(2)*log(ecd/ecd(-1))
          + y_ecnia(3)*log(ech/ech(-1))</eviews_equation>
      <python_equation>log(ecnia)  - ecnia_aerr = log(ecnia(-1))
          + y_ecnia_1*log(eco/eco(-1))
          + y_ecnia_2*log(ecd/ecd(-1))
          + y_ecnia_3*log(ech/ech(-1))</python_equation>
      <coeff>
        <cf_name>y_ecnia(1)</cf_name>
        <cf_value>0.735</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_ecnia(2)</cf_name>
        <cf_value>0.1055</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_ecnia(3)</cf_name>
        <cf_value>0.1595</cf_value>
      </coeff>
      <rhs_eq_var>ecd</rhs_eq_var>
      <rhs_eq_var>ech</rhs_eq_var>
      <rhs_eq_var>ecnia</rhs_eq_var>
      <rhs_eq_var>eco</rhs_eq_var>
      <estimation_statistics>
        <adjusted_r_squared>0.9999984153897256</adjusted_r_squared>
        <date>08/30/18   Time: 09:58 </date>
        <durbin_watson>1.63471562254246</durbin_watson>
        <method>Least Squares (Gauss-Newton / Marquardt steps)</method>
        <r_squared>0.9999992076948629</r_squared>
        <sample_end>2017Q4</sample_end>
        <sample_start>2016Q4</sample_start>
        <se_of_regression>1.320212168321809e-05</se_of_regression>
      </estimation_statistics>
    </standard_equation>
  </variable>
  <variable>
    <name>ecnian</name>
    <equation_type>Identity</equation_type>
    <sector>Household Expenditures</sector>
    <definition>Personal consumption expenditures, current $ (NIPA definition)</definition>
    <standard_equation>
      <eviews_equation>ecnian - ecnian_aerr = .01*pcnia*ecnia </eviews_equation>
      <python_equation>ecnian - ecnian_aerr = .01*pcnia*ecnia </python_equation>
      <rhs_eq_var>ecnia</rhs_eq_var>
      <rhs_eq_var>pcnia</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>eco</name>
    <equation_type>Behavioral</equation_type>
    <sector>Household Expenditures</sector>
    <definition>Consumer expenditures on non-durable goods and non-housing services, cw 2012$</definition>
    <description>Consumer spending on nondurables goods and non-housing services is
a weighted average of the spending of optimizing households and
rule-of-thumb (ROT) households.  The consumption decisions of the
former are modeled using the polynomial adjustment cost (PAC)
framework.  ROT consumption moves in proportion with the sum of labor
and transfer income (YHL+YHT).  The estimated fraction of ROT
consumption is 0.18.  The structure of the PAC component of the
equation is based on equation (1) shown below in the PAC Overview
section.  To translate the general PAC specification into the form in
which it appears in the ECO equation, associate log(ECO) with y,
log(QECO) with y*, and ZECO with the expected weighted sum of future
&amp;Delta;y*.  The order of adjustment costs (m) is 2.

PAC Overview: Let y denote the decision variable and y* its desired
level in the absence of adjustment frictions.  The decision rule
derived from the PAC Euler equation has the following form.

(1) &amp;Delta;y&lt;sub&gt;t&lt;/sub&gt;&lt;sup&gt;pac&lt;/sup&gt; = a&lt;sub&gt;0&lt;/sub&gt;(y*&lt;sub&gt;t-1&lt;/sub&gt; -
      y&lt;sub&gt;t-1&lt;/sub&gt;) + &amp;sum;&lt;sub&gt;i=1,m-1&lt;/sub&gt;
      a&lt;sub&gt;i&lt;/sub&gt;&amp;Delta;y&lt;sub&gt;t-i&lt;/sub&gt; +
      E&lt;sub&gt;t-1&lt;/sub&gt;&amp;sum;&lt;sub&gt;i=0,&amp;infin;&lt;/sub&gt;d&lt;sub&gt;i&lt;/sub&gt;&amp;Delta;y*&lt;sub&gt;t+i&lt;/sub&gt;

 The order of adjustment costs is given by parameter m.  The
forward weights, d&lt;sub&gt;i&lt;/sub&gt; {i=0,&amp;infin;}, are functions of the
estimated values of a&lt;sub&gt;i&lt;/sub&gt; {i=0,m-1} and a fixed discount
factor (0.98).  Estimation imposes the growth neutrality restriction
&amp;sum;&lt;sub&gt;i=1,m-1&lt;/sub&gt;a&lt;sub&gt;i&lt;/sub&gt; +
&amp;sum;&lt;sub&gt;i=0,&amp;infin;&lt;/sub&gt;d&lt;sub&gt;i&lt;/sub&gt; = 1.  For more information,
see &lt;a href="pac_basics.pdf"&gt;PAC Basics&lt;/a&gt;.

</description>
    <standard_equation>
      <eviews_equation>dlog(eco)  - eco_aerr =
          ( y_eco(1) * log(qeco(-1)/eco(-1))
          + y_eco(2) * dlog(eco(-1))
          + y_eco(3) * zeco) * (1
          -y_eco(4))
          + y_eco(4) * dlog(yhl+yht)</eviews_equation>
      <python_equation>(log(eco) - log(eco(-1)))  - eco_aerr =
          ( y_eco_1 * log(qeco(-1)/eco(-1))
          + y_eco_2 * (log(eco(-1)) - log(eco(-2)))
          + y_eco_3 * zeco) * (1
          -y_eco_4)
          + y_eco_4 * (log(yhl+yht) - log(yhl(-1)+yht(-1)))</python_equation>
      <coeff>
        <cf_name>y_eco(1)</cf_name>
        <cf_value>0.1584215605793791</cf_value>
        <t_stat>4.069430324069695</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_eco(2)</cf_name>
        <cf_value>0.4118129978512995</cf_value>
        <t_stat>4.334631712151889</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_eco(3)</cf_name>
        <cf_value>1</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_eco(4)</cf_name>
        <cf_value>0.3075237404993435</cf_value>
        <t_stat>2.861084995194625</t_stat>
      </coeff>
      <rhs_eq_var>eco</rhs_eq_var>
      <rhs_eq_var>qeco</rhs_eq_var>
      <rhs_eq_var>yhl</rhs_eq_var>
      <rhs_eq_var>yht</rhs_eq_var>
      <rhs_eq_var>zeco</rhs_eq_var>
      <estimation_statistics>
        <adjusted_r_squared>0.3596963882446289</adjusted_r_squared>
        <date>08/30/18   Time: 10:02 </date>
        <durbin_watson>2.00827169418335</durbin_watson>
        <method>Iterative Least Squares</method>
        <r_squared>0.3661969304084778</r_squared>
        <sample_end>2017Q4</sample_end>
        <sample_start>1968Q3</sample_start>
        <se_of_regression>0.004007072653621435</se_of_regression>
      </estimation_statistics>
    </standard_equation>
    <kfcalc>1</kfcalc>
    <stochastic_type>IS</stochastic_type>
  </variable>
  <variable>
    <name>egfe</name>
    <equation_type>Behavioral</equation_type>
    <sector>Government</sector>
    <definition>Federal Government expenditures, CW 2012$</definition>
    <description/>
    <standard_equation>
      <eviews_equation>d( log(egfe), 0, 1 )  - egfe_aerr =
           y_egfe(1)
          + y_egfe(2) * log(egfe(-1)/egfet(-1))
          + y_egfe(3) *  d( log(egfe(-1)), 0, 1 )
          + y_egfe(4) *  d( log(egfe(-2)), 0, 1 )
          + y_egfe(5) * d( log(egfet), 0, 1 )
          + y_egfe(6) *  xgap2
          + y_egfe(7) *  xgap2(-1)</eviews_equation>
      <python_equation>( log(egfe) - ( log(egfe(-1))))  - egfe_aerr =
           y_egfe_1
          + y_egfe_2 * log(egfe(-1)/egfet(-1))
          + y_egfe_3 *  ( log(egfe(-1)) - ( log(egfe(-2))))
          + y_egfe_4 *  ( log(egfe(-2)) - ( log(egfe(-3))))
          + y_egfe_5 * ( log(egfet) - ( log(egfet(-1))))
          + y_egfe_6 *  xgap2
          + y_egfe_7 *  xgap2(-1)</python_equation>
      <coeff>
        <cf_name>y_egfe(1)</cf_name>
        <cf_value>-0.0008045327442607825</cf_value>
        <t_stat>-0.4943819857950891</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_egfe(2)</cf_name>
        <cf_value>-0.1204156945139518</cf_value>
        <t_stat>-3.000598283182305</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_egfe(3)</cf_name>
        <cf_value>-0.153308131863314</cf_value>
        <t_stat>-2.126972083749647</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_egfe(4)</cf_name>
        <cf_value>-0.1035937599294917</cf_value>
        <t_stat>-1.486591329749078</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_egfe(5)</cf_name>
        <cf_value>1.50381543495264</cf_value>
        <t_stat>6.261724581077439</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_egfe(6)</cf_name>
        <cf_value>-0.0009835524480447814</cf_value>
        <t_stat>-0.4481415573034953</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_egfe(7)</cf_name>
        <cf_value>0.0007256812123007961</cf_value>
        <t_stat>0.3302663605113349</t_stat>
      </coeff>
      <rhs_eq_var>egfe</rhs_eq_var>
      <rhs_eq_var>egfet</rhs_eq_var>
      <rhs_eq_var>xgap2</rhs_eq_var>
      <estimation_statistics>
        <F_statistic>11.12218670733286</F_statistic>
        <adjusted_r_squared>0.2235028258221269</adjusted_r_squared>
        <date>08/30/18   Time: 10:01 </date>
        <durbin_watson>1.991593778588748</durbin_watson>
        <method>Least Squares (Gauss-Newton / Marquardt steps)</method>
        <prob_F_statistic>9.870517608437912e-11</prob_F_statistic>
        <r_squared>0.2455833141873744</r_squared>
        <sample_end>2017Q4</sample_end>
        <sample_start>1965Q1</sample_start>
        <se_of_regression>0.02004202666080826</se_of_regression>
      </estimation_statistics>
    </standard_equation>
    <stochastic_type>GV</stochastic_type>
  </variable>
  <variable>
    <name>egfen</name>
    <equation_type>Identity</equation_type>
    <sector>Government</sector>
    <definition>Federal Government expenditures, current $</definition>
    <description/>
    <standard_equation>
      <eviews_equation>egfen - egfen_aerr = pegfr*pxp*egfe*.01
	 </eviews_equation>
      <python_equation>egfen - egfen_aerr = pegfr*pxp*egfe*.01
	 </python_equation>
      <rhs_eq_var>egfe</rhs_eq_var>
      <rhs_eq_var>pegfr</rhs_eq_var>
      <rhs_eq_var>pxp</rhs_eq_var>
    </standard_equation>
    <stochastic_type>NO</stochastic_type>
  </variable>
  <variable>
    <name>egfet</name>
    <equation_type>Behavioral</equation_type>
    <sector>Government</sector>
    <definition>Federal Government expenditures, CW 2012$, Trend</definition>
    <description/>
    <standard_equation>
      <eviews_equation>d( log(egfet), 0, 1 ) - egfet_aerr  = y_egfet(1)
                    + y_egfet(2) * log(.01*pegfr(-1)*pxp(-1)*egfet(-1)/xgdptn(-1))
                    + y_egfet(3) * (hggdpt+hggdpt(-1)+hggdpt(-2)+hggdpt(-3)) / 1600
	 </eviews_equation>
      <python_equation>( log(egfet) - ( log(egfet(-1)))) - egfet_aerr  = y_egfet_1
                    + y_egfet_2 * log(.01*pegfr(-1)*pxp(-1)*egfet(-1)/xgdptn(-1))
                    + y_egfet_3 * (hggdpt+hggdpt(-1)+hggdpt(-2)+hggdpt(-3)) / 1600
	 </python_equation>
      <coeff>
        <cf_name>y_egfet(1)</cf_name>
        <cf_value>-0.3101</cf_value>
        <t_stat>0</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_egfet(2)</cf_name>
        <cf_value>-0.1</cf_value>
        <t_stat>0</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_egfet(3)</cf_name>
        <cf_value>1</cf_value>
        <t_stat>0</t_stat>
      </coeff>
      <rhs_eq_var>egfet</rhs_eq_var>
      <rhs_eq_var>hggdpt</rhs_eq_var>
      <rhs_eq_var>pegfr</rhs_eq_var>
      <rhs_eq_var>pxp</rhs_eq_var>
      <rhs_eq_var>xgdptn</rhs_eq_var>
    </standard_equation>
    <stochastic_type>NO</stochastic_type>
  </variable>
  <variable>
    <name>egfl</name>
    <equation_type>Behavioral</equation_type>
    <sector>Government</sector>
    <definition>Federal government employee compensation, cw 2012$</definition>
    <standard_equation>
      <eviews_equation>d( log(egfl), 0, 1 )   - egfl_aerr =
           y_egfl(1)
          + y_egfl(2) * log(egfl(-1)/egflt(-1))
          + y_egfl(3) *  d( log(egfl(-1)), 0, 1 )
          + y_egfl(4) *  d( log(egfl(-2)), 0, 1 )
          + y_egfl(5) * d( log(egflt), 0, 1 )
          + y_egfl(6) *  xgap2
          + y_egfl(7) *  xgap2(-1)</eviews_equation>
      <python_equation>( log(egfl) - ( log(egfl(-1))))   - egfl_aerr =
           y_egfl_1
          + y_egfl_2 * log(egfl(-1)/egflt(-1))
          + y_egfl_3 *  ( log(egfl(-1)) - ( log(egfl(-2))))
          + y_egfl_4 *  ( log(egfl(-2)) - ( log(egfl(-3))))
          + y_egfl_5 * ( log(egflt) - ( log(egflt(-1))))
          + y_egfl_6 *  xgap2
          + y_egfl_7 *  xgap2(-1)</python_equation>
      <coeff>
        <cf_name>y_egfl(1)</cf_name>
        <cf_value>0.0002417378554669395</cf_value>
        <t_stat>0.409467413904429</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_egfl(2)</cf_name>
        <cf_value>-0.0795584254267964</cf_value>
        <t_stat>-3.315961228955266</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_egfl(3)</cf_name>
        <cf_value>0.2415347480637823</cf_value>
        <t_stat>3.578173376936391</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_egfl(4)</cf_name>
        <cf_value>-0.06133379374138964</cf_value>
        <t_stat>-0.8876135076407102</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_egfl(5)</cf_name>
        <cf_value>1.206872311101357</cf_value>
        <t_stat>6.146547668815872</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_egfl(6)</cf_name>
        <cf_value>-0.002507254010777311</cf_value>
        <t_stat>-2.654081880679804</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_egfl(7)</cf_name>
        <cf_value>0.002350674896424264</cf_value>
        <t_stat>2.482710744609933</t_stat>
      </coeff>
      <rhs_eq_var>egfl</rhs_eq_var>
      <rhs_eq_var>egflt</rhs_eq_var>
      <rhs_eq_var>xgap2</rhs_eq_var>
      <estimation_statistics>
        <F_statistic>20.48035499006137</F_statistic>
        <adjusted_r_squared>0.3608786009956402</adjusted_r_squared>
        <date>11/20/17   Time: 17:06 </date>
        <durbin_watson>2.002279366858446</durbin_watson>
        <method>Least Squares (Gauss-Newton / Marquardt steps)</method>
        <prob_F_statistic>1.163236924672889e-18</prob_F_statistic>
        <r_squared>0.3794038589377955</r_squared>
        <sample_end>2016Q4</sample_end>
        <sample_start>1965Q1</sample_start>
        <se_of_regression>0.008461686294687648</se_of_regression>
      </estimation_statistics>
    </standard_equation>
    <kfcalc>1</kfcalc>
    <stochastic_type>GV</stochastic_type>
  </variable>
  <variable>
    <name>egfln</name>
    <equation_type>Identity</equation_type>
    <sector>Government</sector>
    <definition>Federal government employee compensation, current $</definition>
    <standard_equation>
      <eviews_equation>egfln - egfln_aerr = .01 * pgfl * egfl </eviews_equation>
      <python_equation>egfln - egfln_aerr = .01 * pgfl * egfl </python_equation>
      <rhs_eq_var>egfl</rhs_eq_var>
      <rhs_eq_var>pgfl</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>egflt</name>
    <equation_type>Behavioral</equation_type>
    <sector>Government</sector>
    <definition>Federal government employee compensation, cw 2012$, trend</definition>
    <standard_equation>
      <eviews_equation>d( log(egflt), 0, 1 ) - egflt_aerr
                    = y_egflt(1)
                    + y_egflt(2) * log(.01*pgfl(-1)*egflt(-1)/xgdptn(-1))
                    + y_egflt(3) * (hggdpt+hggdpt(-1)+hggdpt(-2)+hggdpt(-3)) / 1600
</eviews_equation>
      <python_equation>( log(egflt) - ( log(egflt(-1)))) - egflt_aerr
                    = y_egflt_1
                    + y_egflt_2 * log(.01*pgfl(-1)*egflt(-1)/xgdptn(-1))
                    + y_egflt_3 * (hggdpt+hggdpt(-1)+hggdpt(-2)+hggdpt(-3)) / 1600
</python_equation>
      <coeff>
        <cf_name>y_egflt(1)</cf_name>
        <cf_value>-.375978</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_egflt(2)</cf_name>
        <cf_value>-.1</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_egflt(3)</cf_name>
        <cf_value>1.0</cf_value>
      </coeff>
      <rhs_eq_var>egflt</rhs_eq_var>
      <rhs_eq_var>hggdpt</rhs_eq_var>
      <rhs_eq_var>pgfl</rhs_eq_var>
      <rhs_eq_var>xgdptn</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>egse</name>
    <equation_type>Behavioral</equation_type>
    <sector>Government</sector>
    <definition>S&amp;L Government expenditures, CW 2012$</definition>
    <description/>
    <standard_equation>
      <eviews_equation>d( log(egse), 0, 1 )   - egse_aerr =
           y_egse(1)
          + y_egse(2) * log(egse(-1)/egset(-1))
          + y_egse(3) *  d( log(egse(-1)), 0, 1 )
          + y_egse(4) *  d( log(egse(-2)), 0, 1 )
          + y_egse(5) * d( log(egset), 0, 1 )
          + y_egse(6) *  xgap2
          + y_egse(7) *  xgap2(-1)</eviews_equation>
      <python_equation>( log(egse) - ( log(egse(-1))))   - egse_aerr =
           y_egse_1
          + y_egse_2 * log(egse(-1)/egset(-1))
          + y_egse_3 *  ( log(egse(-1)) - ( log(egse(-2))))
          + y_egse_4 *  ( log(egse(-2)) - ( log(egse(-3))))
          + y_egse_5 * ( log(egset) - ( log(egset(-1))))
          + y_egse_6 *  xgap2
          + y_egse_7 *  xgap2(-1)</python_equation>
      <coeff>
        <cf_name>y_egse(1)</cf_name>
        <cf_value>-0.0003205558585065158</cf_value>
        <t_stat>-0.1847579368823805</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_egse(2)</cf_name>
        <cf_value>-0.1310861864392932</cf_value>
        <t_stat>-3.758279614354262</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_egse(3)</cf_name>
        <cf_value>0.1315799717205844</cf_value>
        <t_stat>1.91004234973597</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_egse(4)</cf_name>
        <cf_value>0.002629649907733779</cf_value>
        <t_stat>0.03764592773526881</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_egse(5)</cf_name>
        <cf_value>0.9287008343314474</cf_value>
        <t_stat>4.020615258371604</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_egse(6)</cf_name>
        <cf_value>0.001580665878764003</cf_value>
        <t_stat>0.9137023166458276</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_egse(7)</cf_name>
        <cf_value>-0.0008537660921935765</cf_value>
        <t_stat>-0.4929943706873416</t_stat>
      </coeff>
      <rhs_eq_var>egse</rhs_eq_var>
      <rhs_eq_var>egset</rhs_eq_var>
      <rhs_eq_var>xgap2</rhs_eq_var>
      <estimation_statistics>
        <F_statistic>10.30187508030517</F_statistic>
        <adjusted_r_squared>0.2091787748119398</adjusted_r_squared>
        <date>08/30/18   Time: 10:01 </date>
        <durbin_watson>1.9980010028473</durbin_watson>
        <method>Least Squares (Gauss-Newton / Marquardt steps)</method>
        <prob_F_statistic>5.746545674068954e-10</prob_F_statistic>
        <r_squared>0.2316665821632591</r_squared>
        <sample_end>2017Q4</sample_end>
        <sample_start>1965Q1</sample_start>
        <se_of_regression>0.01565192082089247</se_of_regression>
      </estimation_statistics>
    </standard_equation>
    <stochastic_type>GV</stochastic_type>
  </variable>
  <variable>
    <name>egsen</name>
    <equation_type>Identity</equation_type>
    <sector>Government</sector>
    <definition>S&amp;L Government expenditures, current $</definition>
    <description/>
    <standard_equation>
      <eviews_equation>egsen - egsen_aerr = pegsr*pxp*egse*.01
	 </eviews_equation>
      <python_equation>egsen - egsen_aerr = pegsr*pxp*egse*.01
	 </python_equation>
      <rhs_eq_var>egse</rhs_eq_var>
      <rhs_eq_var>pegsr</rhs_eq_var>
      <rhs_eq_var>pxp</rhs_eq_var>
    </standard_equation>
    <stochastic_type>NO</stochastic_type>
  </variable>
  <variable>
    <name>egset</name>
    <equation_type>Behavioral</equation_type>
    <sector>Government</sector>
    <definition>S&amp;L Government expenditures, CW 2012$, Trend</definition>
    <description/>
    <standard_equation>
      <eviews_equation>d( log(egset), 0, 1 ) - egset_aerr  = y_egset(1)
                    + y_egset(2) * log(.01*pegsr(-1)*pxp(-1)*egset(-1)/xgdptn(-1))
                    + y_egset(3) * (hggdpt+hggdpt(-1)+hggdpt(-2)+hggdpt(-3)) / 1600
	 </eviews_equation>
      <python_equation>( log(egset) - ( log(egset(-1)))) - egset_aerr  = y_egset_1
                    + y_egset_2 * log(.01*pegsr(-1)*pxp(-1)*egset(-1)/xgdptn(-1))
                    + y_egset_3 * (hggdpt+hggdpt(-1)+hggdpt(-2)+hggdpt(-3)) / 1600
	 </python_equation>
      <coeff>
        <cf_name>y_egset(1)</cf_name>
        <cf_value>-0.32</cf_value>
        <t_stat>0</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_egset(2)</cf_name>
        <cf_value>-0.1</cf_value>
        <t_stat>0</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_egset(3)</cf_name>
        <cf_value>1</cf_value>
        <t_stat>0</t_stat>
      </coeff>
      <rhs_eq_var>egset</rhs_eq_var>
      <rhs_eq_var>hggdpt</rhs_eq_var>
      <rhs_eq_var>pegsr</rhs_eq_var>
      <rhs_eq_var>pxp</rhs_eq_var>
      <rhs_eq_var>xgdptn</rhs_eq_var>
    </standard_equation>
    <stochastic_type>NO</stochastic_type>
  </variable>
  <variable>
    <name>egsl</name>
    <equation_type>Behavioral</equation_type>
    <sector>Government</sector>
    <definition>S&amp;L government employee compensation, cw 2012$</definition>
    <standard_equation>
      <eviews_equation>d( log(egsl), 0, 1 )   - egsl_aerr =
           y_egsl(1)
          + y_egsl(2) * log(egsl(-1)/egslt(-1))
          + y_egsl(3) *  d( log(egsl(-1)), 0, 1 )
          + y_egsl(4) *  d( log(egsl(-2)), 0, 1 )
          + y_egsl(5) * d( log(egslt), 0, 1 )
          + y_egsl(6) *  xgap2
          + y_egsl(7) *  xgap2(-1)</eviews_equation>
      <python_equation>( log(egsl) - ( log(egsl(-1))))   - egsl_aerr =
           y_egsl_1
          + y_egsl_2 * log(egsl(-1)/egslt(-1))
          + y_egsl_3 *  ( log(egsl(-1)) - ( log(egsl(-2))))
          + y_egsl_4 *  ( log(egsl(-2)) - ( log(egsl(-3))))
          + y_egsl_5 * ( log(egslt) - ( log(egslt(-1))))
          + y_egsl_6 *  xgap2
          + y_egsl_7 *  xgap2(-1)</python_equation>
      <coeff>
        <cf_name>y_egsl(1)</cf_name>
        <cf_value>0.0003682770277494773</cf_value>
        <t_stat>1.08194946630109</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_egsl(2)</cf_name>
        <cf_value>-0.1114151303946257</cf_value>
        <t_stat>-4.177603739023518</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_egsl(3)</cf_name>
        <cf_value>0.1562467669415557</cf_value>
        <t_stat>2.36234805920394</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_egsl(4)</cf_name>
        <cf_value>0.02155815410956755</cf_value>
        <t_stat>0.3233094126515908</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_egsl(5)</cf_name>
        <cf_value>0.7449614274122569</cf_value>
        <t_stat>7.035416145308151</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_egsl(6)</cf_name>
        <cf_value>-0.001432565493088224</cf_value>
        <t_stat>-4.064970298959088</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_egsl(7)</cf_name>
        <cf_value>0.001765173794440745</cf_value>
        <t_stat>5.015780127968173</t_stat>
      </coeff>
      <rhs_eq_var>egsl</rhs_eq_var>
      <rhs_eq_var>egslt</rhs_eq_var>
      <rhs_eq_var>xgap2</rhs_eq_var>
      <estimation_statistics>
        <F_statistic>69.9384552423935</F_statistic>
        <adjusted_r_squared>0.6622004179834101</adjusted_r_squared>
        <date>08/30/18   Time: 10:01 </date>
        <durbin_watson>2.017204232337447</durbin_watson>
        <method>Least Squares (Gauss-Newton / Marquardt steps)</method>
        <prob_F_statistic>6.23722918965985e-47</prob_F_statistic>
        <r_squared>0.6718060933014174</r_squared>
        <sample_end>2017Q4</sample_end>
        <sample_start>1965Q1</sample_start>
        <se_of_regression>0.002988434914740815</se_of_regression>
      </estimation_statistics>
    </standard_equation>
    <kfcalc>1</kfcalc>
    <stochastic_type>GV</stochastic_type>
  </variable>
  <variable>
    <name>egsln</name>
    <equation_type>Identity</equation_type>
    <sector>Government</sector>
    <definition>S&amp;L government employee compensation, current $</definition>
    <standard_equation>
      <eviews_equation>egsln - egsln_aerr = .01 * pgsl * egsl </eviews_equation>
      <python_equation>egsln - egsln_aerr = .01 * pgsl * egsl </python_equation>
      <rhs_eq_var>egsl</rhs_eq_var>
      <rhs_eq_var>pgsl</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>egslt</name>
    <equation_type>Behavioral</equation_type>
    <sector>Government</sector>
    <definition>S&amp;L government employee compensation, cw 2012$, trend</definition>
    <standard_equation>
      <eviews_equation>d( log(egslt), 0, 1 ) - egslt_aerr
                    = y_egslt(1)
                    + y_egslt(2) * log(.01*pgsl(-1)*egslt(-1)/xgdptn(-1))
                    + y_egslt(3) * (hggdpt+hggdpt(-1)+hggdpt(-2)+hggdpt(-3)) / 1600
</eviews_equation>
      <python_equation>( log(egslt) - ( log(egslt(-1)))) - egslt_aerr
                    = y_egslt_1
                    + y_egslt_2 * log(.01*pgsl(-1)*egslt(-1)/xgdptn(-1))
                    + y_egslt_3 * (hggdpt+hggdpt(-1)+hggdpt(-2)+hggdpt(-3)) / 1600
</python_equation>
      <coeff>
        <cf_name>y_egslt(1)</cf_name>
        <cf_value>-.259779</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_egslt(2)</cf_name>
        <cf_value>-.1</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_egslt(3)</cf_name>
        <cf_value>1.0</cf_value>
      </coeff>
      <rhs_eq_var>egslt</rhs_eq_var>
      <rhs_eq_var>hggdpt</rhs_eq_var>
      <rhs_eq_var>pgsl</rhs_eq_var>
      <rhs_eq_var>xgdptn</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>eh</name>
    <equation_type>Behavioral</equation_type>
    <sector>Household Expenditures</sector>
    <definition>Residential investment expenditures, cw 2012$</definition>
    <description>Household investment in residential structures is modeled using the
polynomial adjustment cost (PAC) framework, whose general structure is
shown below in the PAC Overview section.  To translate the general PAC
specification into the form in which it appears in the EH equation,
associate log(EH) with y, log(QEH) with y*, and ZEH with the expected
weighted sum of future &amp;Delta;y*.  The order of adjustment costs (m)
is 3.

Besides the standard PAC terms, the equation also includes the
first lag of the change in the nominal mortgage rate.  This term is
included to capture (approximately) the temporary effects of
downpayment requirements and other borrowing constraints on housing
investment when nominal interest rates change.  A shift in the
coefficient on this term is allowed between 1982:Q4 and 1983:Q1,
because the final repeal of Reg. Q in the early 1980s changed the
sensitivity of residential construction to interest rates.

PAC Overview: Let y denote the decision variable and y* its desired
level in the absence of adjustment frictions.  The decision rule
derived from the PAC Euler equation has the following form.

(1) &amp;Delta;y&lt;sub&gt;t&lt;/sub&gt;&lt;sup&gt;pac&lt;/sup&gt; = a&lt;sub&gt;0&lt;/sub&gt;(y*&lt;sub&gt;t-1&lt;/sub&gt; -
      y&lt;sub&gt;t-1&lt;/sub&gt;) + &amp;sum;&lt;sub&gt;i=1,m-1&lt;/sub&gt;
      a&lt;sub&gt;i&lt;/sub&gt;&amp;Delta;y&lt;sub&gt;t-i&lt;/sub&gt; +
      E&lt;sub&gt;t-1&lt;/sub&gt;&amp;sum;&lt;sub&gt;i=0,&amp;infin;&lt;/sub&gt;d&lt;sub&gt;i&lt;/sub&gt;&amp;Delta;y*&lt;sub&gt;t+i&lt;/sub&gt;

The order of adjustment costs is given by parameter m.  The
forward weights, d&lt;sub&gt;i&lt;/sub&gt; {i=0,&amp;infin;}, are functions of the
estimated values of a&lt;sub&gt;i&lt;/sub&gt; {i=0,m-1} and a fixed discount
factor (0.98).  Estimation imposes the growth neutrality restriction
&amp;sum;&lt;sub&gt;i=1,m-1&lt;/sub&gt;a&lt;sub&gt;i&lt;/sub&gt; +
&amp;sum;&lt;sub&gt;i=0,&amp;infin;&lt;/sub&gt;d&lt;sub&gt;i&lt;/sub&gt; = 1.  For more information,
see &lt;a href="pac_basics.pdf"&gt;Pac Basics&lt;/a&gt;.

</description>
    <standard_equation>
      <eviews_equation>dlog(eh)  - eh_aerr =
           y_eh(1) * log(qeh(-1)/eh(-1))
          + y_eh(2) * dlog(eh(-1))
          + y_eh(3) * dlog(eh(-2))
          + y_eh(4) * zeh
          + y_eh(5) * d(rme(-1))
          + y_eh(6) * d83 * d(rme(-1))</eviews_equation>
      <python_equation>(log(eh) - log(eh(-1)))  - eh_aerr =
           y_eh_1 * log(qeh(-1)/eh(-1))
          + y_eh_2 * (log(eh(-1)) - log(eh(-2)))
          + y_eh_3 * (log(eh(-2)) - log(eh(-3)))
          + y_eh_4 * zeh
          + y_eh_5 * (rme(-1) - (rme(-2)))
          + y_eh_6 * d83 * (rme(-1) - (rme(-2)))</python_equation>
      <coeff>
        <cf_name>y_eh(1)</cf_name>
        <cf_value>0.01309931436163227</cf_value>
        <t_stat>1.021925590223822</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_eh(2)</cf_name>
        <cf_value>0.370727139760127</cf_value>
        <t_stat>5.613456654699126</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_eh(3)</cf_name>
        <cf_value>0.206060944066708</cf_value>
        <t_stat>3.188713674802293</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_eh(4)</cf_name>
        <cf_value>1</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_eh(5)</cf_name>
        <cf_value>-0.05620618046332654</cf_value>
        <t_stat>-6.560182290174185</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_eh(6)</cf_name>
        <cf_value>0.02793327971442171</cf_value>
        <t_stat>2.64825780259417</t_stat>
      </coeff>
      <rhs_eq_var>d83</rhs_eq_var>
      <rhs_eq_var>eh</rhs_eq_var>
      <rhs_eq_var>qeh</rhs_eq_var>
      <rhs_eq_var>rme</rhs_eq_var>
      <rhs_eq_var>zeh</rhs_eq_var>
      <estimation_statistics>
        <adjusted_r_squared>0.4860523343086243</adjusted_r_squared>
        <date>08/30/18   Time: 10:03 </date>
        <durbin_watson>2.134915590286255</durbin_watson>
        <method>Least Squares</method>
        <r_squared>0.4968722760677338</r_squared>
        <sample_end>2017Q4</sample_end>
        <sample_start>1970Q2</sample_start>
        <se_of_regression>0.03285151347517968</se_of_regression>
      </estimation_statistics>
    </standard_equation>
    <kfcalc>1</kfcalc>
    <stochastic_type>IS</stochastic_type>
  </variable>
  <variable>
    <name>ehn</name>
    <equation_type>Identity</equation_type>
    <sector>Household Expenditures</sector>
    <definition>Residential investment expenditures</definition>
    <standard_equation>
      <eviews_equation>ehn - ehn_aerr = .01 * phr * pxp * eh </eviews_equation>
      <python_equation>ehn - ehn_aerr = .01 * phr * pxp * eh </python_equation>
      <rhs_eq_var>eh</rhs_eq_var>
      <rhs_eq_var>phr</rhs_eq_var>
      <rhs_eq_var>pxp</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>ei</name>
    <equation_type>Identity</equation_type>
    <sector>Business Expenditures</sector>
    <definition>Change in private inventories, cw 2012$</definition>
    <standard_equation>
      <eviews_equation>ei - ei_aerr = 4*d( ki, 0, 1 ) </eviews_equation>
      <python_equation>ei - ei_aerr = 4*( ki - ( ki(-1))) </python_equation>
      <rhs_eq_var>ki</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>ein</name>
    <equation_type>Behavioral</equation_type>
    <sector>Business Expenditures</sector>
    <definition>Change in business inventories, current $</definition>
    <standard_equation>
      <eviews_equation>ein - ein_aerr = .01*pxp*pkir*ei </eviews_equation>
      <python_equation>ein - ein_aerr = .01*pxp*pkir*ei </python_equation>
      <rhs_eq_var>ei</rhs_eq_var>
      <rhs_eq_var>pkir</rhs_eq_var>
      <rhs_eq_var>pxp</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>em</name>
    <equation_type>Identity</equation_type>
    <sector>Foreign Trade</sector>
    <definition>Imports of goods and services, cw 2012$</definition>
    <description> The volume of total imports is approximated by the Divisia aggregate of
oil and non-oil imports.

</description>
    <standard_equation>
      <eviews_equation>log(em) - em_aerr = log(em(-1))
                  + .5 * (emon/emn + emon(-1)/emn(-1)) * d(log(emo), 0, 1)
                  + .5 * (empn/emn + empn(-1)/emn(-1)) * d(log(emp), 0, 1)
</eviews_equation>
      <python_equation>log(em) - em_aerr = log(em(-1))
                  + .5 * (emon/emn + emon(-1)/emn(-1)) * (log(emo) - (log(emo(-1))))
                  + .5 * (empn/emn + empn(-1)/emn(-1)) * (log(emp) - (log(emp(-1))))
</python_equation>
      <rhs_eq_var>em</rhs_eq_var>
      <rhs_eq_var>emn</rhs_eq_var>
      <rhs_eq_var>emo</rhs_eq_var>
      <rhs_eq_var>emon</rhs_eq_var>
      <rhs_eq_var>emp</rhs_eq_var>
      <rhs_eq_var>empn</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>emn</name>
    <equation_type>Identity</equation_type>
    <sector>Foreign Trade</sector>
    <definition>Imports of goods and services, current $</definition>
    <standard_equation>
      <eviews_equation>emn - emn_aerr = emon + empn </eviews_equation>
      <python_equation>emn - emn_aerr = emon + empn </python_equation>
      <rhs_eq_var>emon</rhs_eq_var>
      <rhs_eq_var>empn</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>emo</name>
    <equation_type>Behavioral</equation_type>
    <sector>Foreign Trade</sector>
    <definition>Imports of goods and services ex. petroleum, cw 2012$</definition>
    <description>The equation for non-petroleum imports has an error-correction
format.  In the long run, the volume of imports depends on the level
of real domestic absorption with an elasticity of one, the relative
price of non-oil imports with an elasticity of minus one, and an
exogenous trend.  Historical values of the trend (UEMOT) are measured
by applying the HP filter to the ratio of nominal imports to nominal
absorption.  In the short-run, imports respond strongly to the first
difference of the output gap.  The effect of large dock strikes in the
1960s and 1970s is removed by including a dummy constructed by Peter
Isard (IFDP No. 60, 1975).
</description>
    <standard_equation>
      <eviews_equation>dlog(emo)  - emo_aerr =
           y_emo(1)
          + y_emo(2) * log(emo(-1)*(pmo(-1)/100)/(uemot(-1)*xgdpn(-1)))
          + y_emo(3) * (xgap2-xgap2(-1))/100
          + y_emo(4) * (xgap2(-1)-xgap2(-2))/100
          + y_emo(5)* log(ddockm)
          + y_emo(6) * dlog(ddockm)</eviews_equation>
      <python_equation>(log(emo) - log(emo(-1)))  - emo_aerr =
           y_emo_1
          + y_emo_2 * log(emo(-1)*(pmo(-1)/100)/(uemot(-1)*xgdpn(-1)))
          + y_emo_3 * (xgap2-xgap2(-1))/100
          + y_emo_4 * (xgap2(-1)-xgap2(-2))/100
          + y_emo_5* log(ddockm)
          + y_emo_6 * (log(ddockm) - log(ddockm(-1)))</python_equation>
      <coeff>
        <cf_name>y_emo(1)</cf_name>
        <cf_value>0.01620546980581163</cf_value>
        <t_stat>12.00577790916384</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_emo(2)</cf_name>
        <cf_value>-0.1807104996815989</cf_value>
        <t_stat>-6.263913586210242</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_emo(3)</cf_name>
        <cf_value>1.358186927724613</cf_value>
        <t_stat>5.04013727029909</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_emo(4)</cf_name>
        <cf_value>1.637077186962015</cf_value>
        <t_stat>6.297372607318618</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_emo(5)</cf_name>
        <cf_value>0.3188307105827468</cf_value>
        <t_stat>2.587561167107604</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_emo(6)</cf_name>
        <cf_value>0.4046942138546456</cf_value>
        <t_stat>5.221652020980673</t_stat>
      </coeff>
      <rhs_eq_var>ddockm</rhs_eq_var>
      <rhs_eq_var>emo</rhs_eq_var>
      <rhs_eq_var>pmo</rhs_eq_var>
      <rhs_eq_var>uemot</rhs_eq_var>
      <rhs_eq_var>xgap2</rhs_eq_var>
      <rhs_eq_var>xgdpn</rhs_eq_var>
      <estimation_statistics>
        <F_statistic>86.92032917224401</F_statistic>
        <adjusted_r_squared>0.6706221387921456</adjusted_r_squared>
        <date>08/30/18   Time: 10:00 </date>
        <durbin_watson>1.758803164770481</durbin_watson>
        <method>Least Squares (Gauss-Newton / Marquardt steps)</method>
        <prob_F_statistic>8.006632123968194e-49</prob_F_statistic>
        <r_squared>0.6784273013800095</r_squared>
        <sample_end>2017Q4</sample_end>
        <sample_start>1965Q1</sample_start>
        <se_of_regression>0.01950879624852766</se_of_regression>
      </estimation_statistics>
    </standard_equation>
    <kfcalc>1</kfcalc>
    <stochastic_type>IS</stochastic_type>
  </variable>
  <variable>
    <name>emon</name>
    <equation_type>Identity</equation_type>
    <sector>Foreign Trade</sector>
    <definition>Imports of goods and services ex. petroleum</definition>
    <standard_equation>
      <eviews_equation>emon - emon_aerr = .01 * pmo * emo </eviews_equation>
      <python_equation>emon - emon_aerr = .01 * pmo * emo </python_equation>
      <rhs_eq_var>emo</rhs_eq_var>
      <rhs_eq_var>pmo</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>emp</name>
    <equation_type>Behavioral</equation_type>
    <sector>Foreign Trade</sector>
    <definition>Petroleum imports, cw 2012$</definition>
    <description>The deviation of the ratio of EMP to GDP from a long-run component
(EMPTRT) is a linear function of its price relative to the business output deflator and
real activity (as captured by XGAP2).
    </description>
    <standard_equation>
      <eviews_equation>log(emp/xgdp) - emp_aerr = log(emptrt)
                           + y_emp(1)*d(log(pmp/pxb))
                           + y_emp(2)*xgap2(-1)
</eviews_equation>
      <python_equation>log(emp/xgdp) - emp_aerr = log(emptrt)
                           + y_emp_1*(log(pmp/pxb) - (log(pmp(-1)/pxb(-1))))
                           + y_emp_2*xgap2(-1)
</python_equation>
      <coeff>
        <cf_name>y_emp(1)</cf_name>
        <cf_value>0.048026</cf_value>
        <t_stat>0.670182</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_emp(2)</cf_name>
        <cf_value>0.022115</cf_value>
        <t_stat>6.392530</t_stat>
      </coeff>
      <rhs_eq_var>emptrt</rhs_eq_var>
      <rhs_eq_var>pmp</rhs_eq_var>
      <rhs_eq_var>pxb</rhs_eq_var>
      <rhs_eq_var>xgap2</rhs_eq_var>
    </standard_equation>
    <stochastic_type>OT</stochastic_type>
  </variable>
  <variable>
    <name>empn</name>
    <equation_type>Identity</equation_type>
    <sector>Foreign Trade</sector>
    <definition>Petroleum imports, current $</definition>
    <standard_equation>
      <eviews_equation>empn - empn_aerr = .01*pmp*emp </eviews_equation>
      <python_equation>empn - empn_aerr = .01*pmp*emp </python_equation>
      <rhs_eq_var>emp</rhs_eq_var>
      <rhs_eq_var>pmp</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>emptrt</name>
    <equation_type>Exogenous</equation_type>
    <definition>Oil imports to GDP ratio (Trend)</definition>
    <description>This variable is assumed to be exogenous.</description>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>ex</name>
    <equation_type>Behavioral</equation_type>
    <sector>Foreign Trade</sector>
    <definition>Exports of goods and services, cw 2012$</definition>
    <description>Exports is modeled in an error-correction format.  In the long run,
the volume of exports depends on foreign real GDP (FGDP) with an
elasticity of one and the price of exports relative to foreign prices
(PXR*PXP*FPX/FPC) with an elasticity of minus one.  A high short-run
income elasticity is captured by the positive estimated coefficients
on the first difference of the foreign output gap (FXGAP).  The effect
of large dock strikes in the 1960s and 1970s is removed by dummying
out affected quarters.
</description>
    <standard_equation>
      <eviews_equation>dlog(ex)  - ex_aerr =
           y_ex(1)
          + y_ex(2) * log(ex(-1)*(pxr(-1)*pxp(-1)*fpx(-1))/(fgdp(-1)*fpc(-1)))
          + y_ex(3) * (fxgap - fxgap(-1))/100
          + y_ex(4) * (fxgap(-1) - fxgap(-2))/100
          + y_ex(5) * ddockx</eviews_equation>
      <python_equation>(log(ex) - log(ex(-1)))  - ex_aerr =
           y_ex_1
          + y_ex_2 * log(ex(-1)*(pxr(-1)*pxp(-1)*fpx(-1))/(fgdp(-1)*fpc(-1)))
          + y_ex_3 * (fxgap - fxgap(-1))/100
          + y_ex_4 * (fxgap(-1) - fxgap(-2))/100
          + y_ex_5 * ddockx</python_equation>
      <coeff>
        <cf_name>y_ex(1)</cf_name>
        <cf_value>0.8398526775741691</cf_value>
        <t_stat>5.756781111929966</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_ex(2)</cf_name>
        <cf_value>-0.1077278728634364</cf_value>
        <t_stat>-5.667761332461509</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_ex(3)</cf_name>
        <cf_value>1.481642245331822</cf_value>
        <t_stat>5.45635384730917</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_ex(4)</cf_name>
        <cf_value>1.027448537481708</cf_value>
        <t_stat>3.879387000765371</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_ex(5)</cf_name>
        <cf_value>1.015857050459678</cf_value>
        <t_stat>5.391491115569122</t_stat>
      </coeff>
      <rhs_eq_var>ddockx</rhs_eq_var>
      <rhs_eq_var>ex</rhs_eq_var>
      <rhs_eq_var>fgdp</rhs_eq_var>
      <rhs_eq_var>fpc</rhs_eq_var>
      <rhs_eq_var>fpx</rhs_eq_var>
      <rhs_eq_var>fxgap</rhs_eq_var>
      <rhs_eq_var>pxp</rhs_eq_var>
      <rhs_eq_var>pxr</rhs_eq_var>
      <estimation_statistics>
        <F_statistic>48.11935837837932</F_statistic>
        <adjusted_r_squared>0.5128952592039486</adjusted_r_squared>
        <date>08/30/18   Time: 10:00 </date>
        <durbin_watson>2.170896629285285</durbin_watson>
        <method>Least Squares (Gauss-Newton / Marquardt steps)</method>
        <prob_F_statistic>3.010763042352271e-27</prob_F_statistic>
        <r_squared>0.5237802813446426</r_squared>
        <sample_end>2017Q4</sample_end>
        <sample_start>1973Q1</sample_start>
        <se_of_regression>0.01646626290013223</se_of_regression>
      </estimation_statistics>
    </standard_equation>
    <kfcalc>1</kfcalc>
    <stochastic_type>IS</stochastic_type>
  </variable>
  <variable>
    <name>exn</name>
    <equation_type>Identity</equation_type>
    <sector>Foreign Trade</sector>
    <definition>Exports of goods and services, current $</definition>
    <standard_equation>
      <eviews_equation>exn - exn_aerr = .01*pxp*pxr*ex </eviews_equation>
      <python_equation>exn - exn_aerr = .01*pxp*pxr*ex </python_equation>
      <rhs_eq_var>ex</rhs_eq_var>
      <rhs_eq_var>pxp</rhs_eq_var>
      <rhs_eq_var>pxr</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>fcbn</name>
    <equation_type>Identity</equation_type>
    <sector>Foreign Trade</sector>
    <definition>US current account balance, current $</definition>
    <description>The current account balance is equal to net exports (EXN - EMN) plus
net foreign investment income (FYNIN) and a discrepancy term (FCBRN).

</description>
    <standard_equation>
      <eviews_equation>fcbn - fcbn_aerr = exn - emn + fynin + fcbrn </eviews_equation>
      <python_equation>fcbn - fcbn_aerr = exn - emn + fynin + fcbrn </python_equation>
      <rhs_eq_var>emn</rhs_eq_var>
      <rhs_eq_var>exn</rhs_eq_var>
      <rhs_eq_var>fcbrn</rhs_eq_var>
      <rhs_eq_var>fynin</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>fcbrn</name>
    <equation_type>Identity</equation_type>
    <sector>Foreign Trade</sector>
    <definition>US current account balance residual, current $</definition>
    <description>The discrepancy in the current account balance is assumed to
be proportional to nominal potential output.

</description>
    <standard_equation>
      <eviews_equation>fcbrn - fcbrn_aerr = ufcbr*pxb*xbt/100 </eviews_equation>
      <python_equation>fcbrn - fcbrn_aerr = ufcbr*pxb*xbt/100 </python_equation>
      <rhs_eq_var>pxb</rhs_eq_var>
      <rhs_eq_var>ufcbr</rhs_eq_var>
      <rhs_eq_var>xbt</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>fgdp</name>
    <equation_type>Identity</equation_type>
    <sector>Foreign Activity</sector>
    <definition>Foreign aggregate GDP (world, bilateral export weights)</definition>
    <description>The level of foreign GDP is determined via the identity that
links it to the level of potential foreign output (FGDPT) and
the foreign output gap (FXGAP).
</description>
    <standard_equation>
      <eviews_equation>fgdp - fgdp_aerr = fgdpt*exp(fxgap/100) </eviews_equation>
      <python_equation>fgdp - fgdp_aerr = fgdpt*exp(fxgap/100) </python_equation>
      <rhs_eq_var>fgdpt</rhs_eq_var>
      <rhs_eq_var>fxgap</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>fgdpt</name>
    <equation_type>Behavioral</equation_type>
    <sector>Foreign Activity</sector>
    <definition>Foreign aggregate GDP (world, bilateral export weights), trend</definition>
    <description>In simulations, the level of trend foreign GDP moves in proportion with
level of U.S potential GDP in the long run.  In the short run, the
rate of growth of the foreign trend varies one-for-one with the rate of growth
of U.S. potential output.
</description>
    <standard_equation>
      <eviews_equation>d( log(fgdpt), 0, 1 ) - fgdpt_aerr
                    = y_fgdpt(1)
                    + y_fgdpt(2) * log(fgdpt(-1)/xgdpt(-1))
                    + y_fgdpt(3) * (hggdpt+hggdpt(-1)+hggdpt(-2)+hggdpt(-3)) / 1600
</eviews_equation>
      <python_equation>( log(fgdpt) - ( log(fgdpt(-1)))) - fgdpt_aerr
                    = y_fgdpt_1
                    + y_fgdpt_2 * log(fgdpt(-1)/xgdpt(-1))
                    + y_fgdpt_3 * (hggdpt+hggdpt(-1)+hggdpt(-2)+hggdpt(-3)) / 1600
</python_equation>
      <coeff>
        <cf_name>y_fgdpt(1)</cf_name>
        <cf_value>-.458264</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_fgdpt(2)</cf_name>
        <cf_value>-.1</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_fgdpt(3)</cf_name>
        <cf_value>1.0</cf_value>
      </coeff>
      <rhs_eq_var>fgdpt</rhs_eq_var>
      <rhs_eq_var>hggdpt</rhs_eq_var>
      <rhs_eq_var>xgdpt</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>fnicn</name>
    <equation_type>Identity</equation_type>
    <sector>Foreign Trade</sector>
    <definition>Gross stock of claims of US residents on the rest of the world, current $</definition>
    <standard_equation>
      <eviews_equation>d(fnicn, 0, 1)/xgdptn - fnicn_aerr = .54 * d( log(fpc), 0, 1)*fnicn(-1)/xgdptn
                                 - .67 * d( log(fpx), 0, 1)*fnicn(-1)/xgdptn
                                 + rfnict
</eviews_equation>
      <python_equation>(fnicn - (fnicn(-1)))/xgdptn - fnicn_aerr = .54 * ( log(fpc) - ( log(fpc(-1))))*fnicn(-1)/xgdptn
                                 - .67 * ( log(fpx) - ( log(fpx(-1))))*fnicn(-1)/xgdptn
                                 + rfnict
</python_equation>
      <rhs_eq_var>fnicn</rhs_eq_var>
      <rhs_eq_var>fpc</rhs_eq_var>
      <rhs_eq_var>fpx</rhs_eq_var>
      <rhs_eq_var>rfnict</rhs_eq_var>
      <rhs_eq_var>xgdptn</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>fniln</name>
    <equation_type>Identity</equation_type>
    <sector>Foreign Trade</sector>
    <definition>Gross stock of liabilities of US residents to the rest of the world, current $</definition>
    <standard_equation>
      <eviews_equation>fniln - fniln_aerr = fnicn - fnin </eviews_equation>
      <python_equation>fniln - fniln_aerr = fnicn - fnin </python_equation>
      <rhs_eq_var>fnicn</rhs_eq_var>
      <rhs_eq_var>fnin</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>fnin</name>
    <equation_type>Identity</equation_type>
    <sector>Foreign Trade</sector>
    <definition>Net stock of claims of US residents on the rest of the world, current $</definition>
    <description>The change in the net foreign investment position is equal to the
the sum of the current account balance expressed at a quarterly rate,
estimates of capital gains and losses on the gross investment
positions due to price and exchange rate changes, and a residual term.
</description>
    <standard_equation>
      <eviews_equation>d( fnin, 0, 1 ) - fnin_aerr = .25*fcbn
                         + .54 * (d( log(fpc), 0, 1) * fnicn(-1))
                         - .32 * (d( log(pgdp), 0, 1) * fniln(-1))
                         - .67 * (d( log(fpx), 0, 1) * fnicn(-1))
                         + .06 * (d( log(fpx), 0, 1) * fniln(-1))
                         + fnirn
</eviews_equation>
      <python_equation>( fnin - ( fnin(-1))) - fnin_aerr = .25*fcbn
                         + .54 * (( log(fpc) - ( log(fpc(-1)))) * fnicn(-1))
                         - .32 * (( log(pgdp) - ( log(pgdp(-1)))) * fniln(-1))
                         - .67 * (( log(fpx) - ( log(fpx(-1)))) * fnicn(-1))
                         + .06 * (( log(fpx) - ( log(fpx(-1)))) * fniln(-1))
                         + fnirn
</python_equation>
      <rhs_eq_var>fcbn</rhs_eq_var>
      <rhs_eq_var>fnicn</rhs_eq_var>
      <rhs_eq_var>fniln</rhs_eq_var>
      <rhs_eq_var>fnirn</rhs_eq_var>
      <rhs_eq_var>fpc</rhs_eq_var>
      <rhs_eq_var>fpx</rhs_eq_var>
      <rhs_eq_var>pgdp</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>fnirn</name>
    <equation_type>Identity</equation_type>
    <sector>Foreign Trade</sector>
    <definition>Net stock of claims of US residents on the rest of the world, residual</definition>
    <standard_equation>
      <eviews_equation>fnirn - fnirn_aerr = ufnir * xgdpn </eviews_equation>
      <python_equation>fnirn - fnirn_aerr = ufnir * xgdpn </python_equation>
      <rhs_eq_var>ufnir</rhs_eq_var>
      <rhs_eq_var>xgdpn</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>fpc</name>
    <equation_type>Identity</equation_type>
    <sector>Foreign Activity</sector>
    <definition>Foreign aggregate consumer price (G39, import/export trade weights)</definition>
    <standard_equation>
      <eviews_equation>fpc - fpc_aerr = fpc(-1)*exp(fpic/400) </eviews_equation>
      <python_equation>fpc - fpc_aerr = fpc(-1)*exp(fpic/400) </python_equation>
      <rhs_eq_var>fpc</rhs_eq_var>
      <rhs_eq_var>fpic</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>fpi10</name>
    <equation_type>Behavioral</equation_type>
    <sector>Foreign Activity</sector>
    <definition>Foreign consumer price inflation (G10)</definition>
    <description> Foreign CPI inflation is a function of a weighted average of past
and trend foreign inflation, the foreign output gap, and current and
lagged changes in the relative price of oil.  Historical values of
trend inflation (FPITRG) are measured as a step function whose value
since 1991 is 2.1 percent.
</description>
    <standard_equation>
      <eviews_equation>fpi10  - fpi10_aerr =
           y_fpi10(1) * ( ( fpi10(-1) +  fpi10(-2) +  fpi10(-3) +  fpi10(-4))  / 4 )
          + y_fpi10(2) * fpitrg
          + y_fpi10(3) * fxgap(-1)</eviews_equation>
      <python_equation>fpi10  - fpi10_aerr =
           y_fpi10_1 * ( ( fpi10(-1) +  fpi10(-2) +  fpi10(-3) +  fpi10(-4))  / 4 )
          + y_fpi10_2 * fpitrg
          + y_fpi10_3 * fxgap(-1)</python_equation>
      <coeff>
        <cf_name>y_fpi10(1)</cf_name>
        <cf_value>0.6279749057317539</cf_value>
        <t_stat>10.47566394155453</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_fpi10(2)</cf_name>
        <cf_value>0.3720250942682461</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_fpi10(3)</cf_name>
        <cf_value>0.3221458278398038</cf_value>
        <t_stat>4.279968134267354</t_stat>
      </coeff>
      <rhs_eq_var>fpi10</rhs_eq_var>
      <rhs_eq_var>fpitrg</rhs_eq_var>
      <rhs_eq_var>fxgap</rhs_eq_var>
      <estimation_statistics>
        <adjusted_r_squared>0.8488272427000629</adjusted_r_squared>
        <date>08/30/18   Time: 10:01 </date>
        <durbin_watson>1.236559159898099</durbin_watson>
        <method>Least Squares (Gauss-Newton / Marquardt steps)</method>
        <r_squared>0.8495719360857768</r_squared>
        <sample_end>2017Q4</sample_end>
        <sample_start>1967Q1</sample_start>
        <se_of_regression>1.30442200872555</se_of_regression>
      </estimation_statistics>
    </standard_equation>
  </variable>
  <variable>
    <name>fpi10t</name>
    <equation_type>Behavioral</equation_type>
    <sector>Foreign Activity</sector>
    <definition>Foreign consumer price inflation, trend (G10)</definition>
    <description>The trend component of foreign inflation adjusts at 5 percent
per quarter to movements in actual foreign inflation.
</description>
    <standard_equation>
      <eviews_equation>fpi10t-fpi10t_aerr = y_fpi10t(1) * fpi10t(-1)
                   + y_fpi10t(2) * fpi10
</eviews_equation>
      <python_equation>fpi10t-fpi10t_aerr = y_fpi10t_1 * fpi10t(-1)
                   + y_fpi10t_2 * fpi10
</python_equation>
      <coeff>
        <cf_name>y_fpi10t(1)</cf_name>
        <cf_value>9.500000000000000000e-01</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_fpi10t(2)</cf_name>
        <cf_value>5.000000000000000000e-02</cf_value>
      </coeff>
      <rhs_eq_var>fpi10</rhs_eq_var>
      <rhs_eq_var>fpi10t</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>fpic</name>
    <equation_type>Behavioral</equation_type>
    <sector>Foreign Activity</sector>
    <definition>Foreign consumer price inflation (G39, bilateral export trade weights)</definition>
    <description>In the long run, foreign consumer price inflation as measured
on a G39 basis moves one for one with foreign inflation as
measured on a G10 basis.
</description>
    <standard_equation>
      <eviews_equation>fpic  - fpic_aerr =
           y_fpic(1)
          + y_fpic(2) * fpi10
          + y_fpic(3) * fpic(-1)</eviews_equation>
      <python_equation>fpic  - fpic_aerr =
           y_fpic_1
          + y_fpic_2 * fpi10
          + y_fpic_3 * fpic(-1)</python_equation>
      <coeff>
        <cf_name>y_fpic(1)</cf_name>
        <cf_value>2.027196898567632</cf_value>
        <t_stat>5.889710300303862</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_fpic(2)</cf_name>
        <cf_value>0.6788298801616212</cf_value>
        <t_stat>10.63176207479252</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_fpic(3)</cf_name>
        <cf_value>0.3211701198383788</cf_value>
      </coeff>
      <rhs_eq_var>fpi10</rhs_eq_var>
      <rhs_eq_var>fpic</rhs_eq_var>
      <estimation_statistics>
        <F_statistic>170.7908887475116</F_statistic>
        <adjusted_r_squared>0.4458901033740165</adjusted_r_squared>
        <date>08/30/18   Time: 10:01 </date>
        <durbin_watson>2.125180754345748</durbin_watson>
        <method>Least Squares (Gauss-Newton / Marquardt steps)</method>
        <prob_F_statistic>5.927601166027004e-29</prob_F_statistic>
        <r_squared>0.4485162166281681</r_squared>
        <sample_end>2017Q4</sample_end>
        <sample_start>1965Q1</sample_start>
        <se_of_regression>4.173824408173405</se_of_regression>
      </estimation_statistics>
    </standard_equation>
  </variable>
  <variable>
    <name>fpitrg</name>
    <equation_type>Exogenous</equation_type>
    <definition>Foreign target consumer price inflation (G10)</definition>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>fpx</name>
    <equation_type>Identity</equation_type>
    <sector>Foreign Activity</sector>
    <definition>Nominal exchange rate (G39, import/export trade weights)</definition>
    <standard_equation>
      <eviews_equation>fpx - fpx_aerr = fpxr*fpc/pcpi </eviews_equation>
      <python_equation>fpx - fpx_aerr = fpxr*fpc/pcpi </python_equation>
      <rhs_eq_var>fpc</rhs_eq_var>
      <rhs_eq_var>fpxr</rhs_eq_var>
      <rhs_eq_var>pcpi</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>fpxr</name>
    <equation_type>Behavioral</equation_type>
    <sector>Foreign Activity</sector>
    <definition>Real exchange rate (G39, import/export trade weights)</definition>
    <description>The real exchange rate is determined via an open interest parity
condition based on real bond rates, augmented with a term in the ratio
of the net stock of U.S. claims on the rest of the world to U.S. GDP
that captures country risk.  The equation is written as an identity
through the inclusion of a multiplicative residual, FPXRR.
</description>
    <standard_equation>
      <eviews_equation>log(fpxr) - fpxr_aerr - log(fpxrr) =
                         y_fpxr(1)*(rg10-zpi10f-frl10+fpi10t)
                       + y_fpxr(2)*(fnin/xgdpn)
</eviews_equation>
      <python_equation>log(fpxr) - fpxr_aerr - log(fpxrr) =
                         y_fpxr_1*(rg10-zpi10f-frl10+fpi10t)
                       + y_fpxr_2*(fnin/xgdpn)
</python_equation>
      <coeff>
        <cf_name>y_fpxr(1)</cf_name>
        <cf_value>0.048</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_fpxr(2)</cf_name>
        <cf_value>0.5</cf_value>
      </coeff>
      <rhs_eq_var>fnin</rhs_eq_var>
      <rhs_eq_var>fpi10t</rhs_eq_var>
      <rhs_eq_var>frl10</rhs_eq_var>
      <rhs_eq_var>rg10</rhs_eq_var>
      <rhs_eq_var>xgdpn</rhs_eq_var>
      <rhs_eq_var>zpi10f</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>fpxrr</name>
    <equation_type>Behavioral</equation_type>
    <sector>Foreign Activity</sector>
    <definition>Real exchange rate residual</definition>
    <description>The unexplained component of the exchange rate error-corrects
to its long-run exogenous trend (FPXRRT).
</description>
    <standard_equation>
      <eviews_equation>d( log(fpxrr), 0, 1 )   - fpxrr_aerr =
           y_fpxrr(1) * log(fpxrrt(-1)/fpxrr(-1))
          + y_fpxrr(2) * d( log(fpxrr(-1)), 0, 1 ) + (1
          -y_fpxrr(2)) * d( log(fpxrrt), 0, 1 )</eviews_equation>
      <python_equation>( log(fpxrr) - ( log(fpxrr(-1))))   - fpxrr_aerr =
           y_fpxrr_1 * log(fpxrrt(-1)/fpxrr(-1))
          + y_fpxrr_2 * ( log(fpxrr(-1)) - ( log(fpxrr(-2)))) + (1
          -y_fpxrr_2) * ( log(fpxrrt) - ( log(fpxrrt(-1))))</python_equation>
      <coeff>
        <cf_name>y_fpxrr(1)</cf_name>
        <cf_value>0.02744058231523356</cf_value>
        <t_stat>2.115111736109819</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_fpxrr(2)</cf_name>
        <cf_value>0.2110896761767876</cf_value>
        <t_stat>3.14854653066831</t_stat>
      </coeff>
      <rhs_eq_var>fpxrr</rhs_eq_var>
      <rhs_eq_var>fpxrrt</rhs_eq_var>
      <estimation_statistics>
        <adjusted_r_squared>0.05575684888656729</adjusted_r_squared>
        <date>08/30/18   Time: 10:01 </date>
        <durbin_watson>1.996306086764864</durbin_watson>
        <method>Least Squares (Gauss-Newton / Marquardt steps)</method>
        <r_squared>0.06023193491080159</r_squared>
        <sample_end>2017Q4</sample_end>
        <sample_start>1965Q1</sample_start>
        <se_of_regression>0.02843071520746695</se_of_regression>
      </estimation_statistics>
    </standard_equation>
    <kfcalc>1</kfcalc>
    <stochastic_type>RW</stochastic_type>
  </variable>
  <variable>
    <name>fpxrrt</name>
    <equation_type>Exogenous</equation_type>
    <definition>Real exchange rate residual, trend</definition>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>frl10</name>
    <equation_type>Behavioral</equation_type>
    <sector>Foreign Activity</sector>
    <definition>Foreign long-term interest rate (G10)</definition>
    <description> The foreign long-term interest rate (FRL10) is modeled using
a reduced-form error-correction specification in which the long rate
converges to the foreign short-term interest rate plus a constant
premium.
</description>
    <standard_equation>
      <eviews_equation>frl10 - frl10(-1)  - frl10_aerr =
           y_frl10(1)
          + y_frl10(2) * (frl10(-1) - frs10(-1))
          + y_frl10(3) * (frl10(-1) - frl10(-2))
          + y_frl10(4) * (frs10 - frs10(-1))
          + y_frl10(5) * (fxgap - fxgap(-1))</eviews_equation>
      <python_equation>frl10 - frl10(-1)  - frl10_aerr =
           y_frl10_1
          + y_frl10_2 * (frl10(-1) - frs10(-1))
          + y_frl10_3 * (frl10(-1) - frl10(-2))
          + y_frl10_4 * (frs10 - frs10(-1))
          + y_frl10_5 * (fxgap - fxgap(-1))</python_equation>
      <coeff>
        <cf_name>y_frl10(1)</cf_name>
        <cf_value>0.03753227212139513</cf_value>
        <t_stat>1.198193651482558</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_frl10(2)</cf_name>
        <cf_value>-0.07704648128878299</cf_value>
        <t_stat>-3.317417577767598</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_frl10(3)</cf_name>
        <cf_value>0.06550476702266198</cf_value>
        <t_stat>0.9542000140233379</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_frl10(4)</cf_name>
        <cf_value>0.369056454239088</cf_value>
        <t_stat>7.04367628207961</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_frl10(5)</cf_name>
        <cf_value>0.1245511812496244</cf_value>
        <t_stat>2.260499826314461</t_stat>
      </coeff>
      <rhs_eq_var>frl10</rhs_eq_var>
      <rhs_eq_var>frs10</rhs_eq_var>
      <rhs_eq_var>fxgap</rhs_eq_var>
      <estimation_statistics>
        <F_statistic>23.10908881710404</F_statistic>
        <adjusted_r_squared>0.3693522446467081</adjusted_r_squared>
        <date>08/30/18   Time: 10:01 </date>
        <durbin_watson>1.725859508488353</durbin_watson>
        <method>Least Squares (Gauss-Newton / Marquardt steps)</method>
        <prob_F_statistic>7.858401075972499e-15</prob_F_statistic>
        <r_squared>0.3860581454507688</r_squared>
        <sample_end>2017Q4</sample_end>
        <sample_start>1980Q1</sample_start>
        <se_of_regression>0.2955556050574863</se_of_regression>
      </estimation_statistics>
    </standard_equation>
  </variable>
  <variable>
    <name>frs10</name>
    <equation_type>Behavioral</equation_type>
    <sector>Foreign Activity</sector>
    <definition>Foreign short-term interest rate (G10)</definition>
    <description> The foreign short-term interest rate (FRS10) is set either
according to a version of the Taylor rule (DFMPRR = 0), or as the sum
of an exogenous real interest rate (RFRS10) and a four-quarter moving
average of foreign CPI inflation (DFMPRR = 1).

</description>
    <standard_equation>
      <eviews_equation>frs10 - frs10_aerr = dfmprr * (y_frs10(1)
                   + y_frs10(2) * frstar(-1)
                   + y_frs10(3) * ( ( fpi10 +  fpi10(-1) +  fpi10(-2) +  fpi10(-3))  / 4)
                   + y_frs10(4) * ( ( fpi10 +  fpi10(-1) +  fpi10(-2) +  fpi10(-3))  / 4 - fpitrg)
                   + y_frs10(5) * fxgap)
                   + (1-dfmprr) * (rfrs10 +  ( fpi10 +  fpi10(-1) +  fpi10(-2) +  fpi10(-3))  / 4)
</eviews_equation>
      <python_equation>frs10 - frs10_aerr = dfmprr * (y_frs10_1
                   + y_frs10_2 * frstar(-1)
                   + y_frs10_3 * ( ( fpi10 +  fpi10(-1) +  fpi10(-2) +  fpi10(-3))  / 4)
                   + y_frs10_4 * ( ( fpi10 +  fpi10(-1) +  fpi10(-2) +  fpi10(-3))  / 4 - fpitrg)
                   + y_frs10_5 * fxgap)
                   + (1-dfmprr) * (rfrs10 +  ( fpi10 +  fpi10(-1) +  fpi10(-2) +  fpi10(-3))  / 4)
</python_equation>
      <coeff>
        <cf_name>y_frs10(1)</cf_name>
        <cf_value>0.0</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_frs10(2)</cf_name>
        <cf_value>1.0</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_frs10(3)</cf_name>
        <cf_value>1.0</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_frs10(4)</cf_name>
        <cf_value>0.5</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_frs10(5)</cf_name>
        <cf_value>1.0</cf_value>
      </coeff>
      <rhs_eq_var>dfmprr</rhs_eq_var>
      <rhs_eq_var>fpi10</rhs_eq_var>
      <rhs_eq_var>fpitrg</rhs_eq_var>
      <rhs_eq_var>frstar</rhs_eq_var>
      <rhs_eq_var>fxgap</rhs_eq_var>
      <rhs_eq_var>rfrs10</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>frstar</name>
    <equation_type>Behavioral</equation_type>
    <sector>Foreign Activity</sector>
    <definition>Equilibrium real short-term interest rate used in foreign Taylor rule</definition>
    <description>The estimate of the foreign equilibrium real short-term interest
rate used in the foreign Taylor rule is updated each period by
5 percent of the gap between the ex post real short rate and the
prior estimate.
</description>
    <standard_equation>
      <eviews_equation>frstar - frstar_aerr = y_frstar(1) * frstar(-1)
                     + y_frstar(2) * (frs10 -  ( fpi10 +  fpi10(-1) +  fpi10(-2) +  fpi10(-3))  / 4)
</eviews_equation>
      <python_equation>frstar - frstar_aerr = y_frstar_1 * frstar(-1)
                     + y_frstar_2 * (frs10 -  ( fpi10 +  fpi10(-1) +  fpi10(-2) +  fpi10(-3))  / 4)
</python_equation>
      <coeff>
        <cf_name>y_frstar(1)</cf_name>
        <cf_value>.95</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_frstar(2)</cf_name>
        <cf_value>.05</cf_value>
      </coeff>
      <rhs_eq_var>fpi10</rhs_eq_var>
      <rhs_eq_var>frs10</rhs_eq_var>
      <rhs_eq_var>frstar</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>ftcin</name>
    <equation_type>Identity</equation_type>
    <sector>Foreign Trade</sector>
    <definition>Corporate taxes paid to rest of world, current $</definition>
    <standard_equation>
      <eviews_equation>ftcin - ftcin_aerr = uftcin * ynicpn </eviews_equation>
      <python_equation>ftcin - ftcin_aerr = uftcin * ynicpn </python_equation>
      <rhs_eq_var>uftcin</rhs_eq_var>
      <rhs_eq_var>ynicpn</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>fxgap</name>
    <equation_type>Behavioral</equation_type>
    <sector>Foreign Activity</sector>
    <definition>Foreign output gap (world, bilateral export weights)</definition>
    <description> The equation for the foreign output gap is a reduced-form IS
curve.  The gap depends on lags of the foreign output gap, the real
short-term foreign interest rate (FRS10 less a moving average of
FPI10), and the U.S. output gap (XGAP2).  The coefficient on the
real short-term interest rate is set equal to the estimate from a
similar equation estimated on U.S. data.
</description>
    <standard_equation>
      <eviews_equation>fxgap   - fxgap_aerr =
          + y_fxgap(1) *  fxgap(-1)
          + y_fxgap(2) *  fxgap(-2)
          + y_fxgap(3) * ((frs10(-1)-(fpi10(-1)+fpi10(-2)+fpi10(-3)+fpi10(-4))/4
          + frs10(-2)-(fpi10(-2)+fpi10(-3)+fpi10(-4)+fpi10(-5))/4
          + frs10(-3)-(fpi10(-3)+fpi10(-4)+fpi10(-5)+fpi10(-6))/4)/3 - frstar)
          + y_fxgap(4) * xgap2(-1)</eviews_equation>
      <python_equation>fxgap   - fxgap_aerr =
          + y_fxgap_1 *  fxgap(-1)
          + y_fxgap_2 *  fxgap(-2)
          + y_fxgap_3 * ((frs10(-1)-(fpi10(-1)+fpi10(-2)+fpi10(-3)+fpi10(-4))/4
          + frs10(-2)-(fpi10(-2)+fpi10(-3)+fpi10(-4)+fpi10(-5))/4
          + frs10(-3)-(fpi10(-3)+fpi10(-4)+fpi10(-5)+fpi10(-6))/4)/3 - frstar)
          + y_fxgap_4 * xgap2(-1)</python_equation>
      <coeff>
        <cf_name>y_fxgap(1)</cf_name>
        <cf_value>1.290723676327916</cf_value>
        <t_stat>20.36464485848048</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_fxgap(2)</cf_name>
        <cf_value>-0.4680091148746248</cf_value>
        <t_stat>-7.759169476155495</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_fxgap(3)</cf_name>
        <cf_value>-0.05</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_fxgap(4)</cf_name>
        <cf_value>0.03734559019022718</cf_value>
        <t_stat>2.646397225669924</t_stat>
      </coeff>
      <rhs_eq_var>fpi10</rhs_eq_var>
      <rhs_eq_var>frs10</rhs_eq_var>
      <rhs_eq_var>frstar</rhs_eq_var>
      <rhs_eq_var>fxgap</rhs_eq_var>
      <rhs_eq_var>xgap2</rhs_eq_var>
      <estimation_statistics>
        <adjusted_r_squared>0.8534372788148259</adjusted_r_squared>
        <date>08/30/18   Time: 10:01 </date>
        <durbin_watson>1.884952507051783</durbin_watson>
        <method>Least Squares (Gauss-Newton / Marquardt steps)</method>
        <r_squared>0.8548264989208465</r_squared>
        <sample_end>2017Q4</sample_end>
        <sample_start>1965Q1</sample_start>
        <se_of_regression>0.4603926918414598</se_of_regression>
      </estimation_statistics>
    </standard_equation>
    <kfcalc>1</kfcalc>
    <stochastic_type>RW</stochastic_type>
  </variable>
  <variable>
    <name>fynicn</name>
    <equation_type>Identity</equation_type>
    <sector>Foreign Trade</sector>
    <definition>Gross investment income received from the rest of the world, current $</definition>
    <standard_equation>
      <eviews_equation>fynicn - fynicn_aerr = .01*rfynic*fnicn(-1)        </eviews_equation>
      <python_equation>fynicn - fynicn_aerr = .01*rfynic*fnicn(-1)        </python_equation>
      <rhs_eq_var>fnicn</rhs_eq_var>
      <rhs_eq_var>rfynic</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>fyniln</name>
    <equation_type>Identity</equation_type>
    <sector>Foreign Trade</sector>
    <definition>Gross investment income paid to the rest of the world, current $</definition>
    <standard_equation>
      <eviews_equation>fyniln - fyniln_aerr = .01*rfynil*fniln(-1)        </eviews_equation>
      <python_equation>fyniln - fyniln_aerr = .01*rfynil*fniln(-1)        </python_equation>
      <rhs_eq_var>fniln</rhs_eq_var>
      <rhs_eq_var>rfynil</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>fynin</name>
    <equation_type>Identity</equation_type>
    <sector>Foreign Trade</sector>
    <definition>Net investment income received from the rest of the world, current $</definition>
    <standard_equation>
      <eviews_equation>fynin - fynin_aerr = fynicn - fyniln </eviews_equation>
      <python_equation>fynin - fynin_aerr = fynicn - fyniln </python_equation>
      <rhs_eq_var>fynicn</rhs_eq_var>
      <rhs_eq_var>fyniln</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>gfdbtnp</name>
    <equation_type>Identity</equation_type>
    <sector>Government</sector>
    <definition>Federal government debt stock held by the public, current $</definition>
    <standard_equation>
      <eviews_equation>gfdbtnp - gfdbtnp_aerr = ugfdbtp*(gfdbtnp(-1) - .25*gfsrpn)
      </eviews_equation>
      <python_equation>gfdbtnp - gfdbtnp_aerr = ugfdbtp*(gfdbtnp(-1) - .25*gfsrpn)
      </python_equation>
      <rhs_eq_var>gfdbtnp</rhs_eq_var>
      <rhs_eq_var>ugfdbtp</rhs_eq_var>
      <rhs_eq_var>gfsrpn</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>gfdbtn</name>
    <equation_type>Identity</equation_type>
    <sector>Government</sector>
    <definition>Federal government debt stock, current $</definition>
    <standard_equation>
      <eviews_equation>gfdbtn - gfdbtn_aerr = ugfdbt*gfdbtnp
	 </eviews_equation>
      <python_equation>gfdbtn - gfdbtn_aerr = ugfdbt*gfdbtnp
	 </python_equation>
      <rhs_eq_var>gfdbtnp</rhs_eq_var>
      <rhs_eq_var>ugfdbt</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>ugfdbtp</name>
    <equation_type>Exogenous</equation_type>
    <definition>Federal government debt ratio</definition>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>ugfsrp</name>
    <equation_type>Behavioral</equation_type>
    <sector>Government</sector>
    <definition>Federal Government budget surplus, residual</definition>
    <description/>
    <standard_equation>
      <eviews_equation>ugfsrp - ugfsrp_aerr = y_ugfsrp(1)*(1-y_ugfsrp(2)) + y_ugfsrp(2)*ugfsrp(-1)
	 </eviews_equation>
      <python_equation>ugfsrp - ugfsrp_aerr = y_ugfsrp_1*(1-y_ugfsrp_2) + y_ugfsrp_2*ugfsrp(-1)
	 </python_equation>
      <coeff>
        <cf_name>y_ugfsrp(1)</cf_name>
        <cf_value>0.065666</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_ugfsrp(2)</cf_name>
        <cf_value>0.947688</cf_value>
      </coeff>
      <rhs_eq_var>ugfsrp</rhs_eq_var>
    </standard_equation>
    <stochastic_type>NO</stochastic_type>
  </variable>
  <variable>
    <name>uleg</name>
    <equation_type>Behavioral</equation_type>
    <sector>Government</sector>
    <definition>Multiplicative factor for government civilian employment</definition>
    <standard_equation>
      <eviews_equation>log(uleg) - uleg_aerr = log(uleg(-1)) - .1*(leg(-1)/lep(-1)-adjlegrt)
</eviews_equation>
      <python_equation>log(uleg) - uleg_aerr = log(uleg(-1)) - .1*(leg(-1)/lep(-1)-adjlegrt)
</python_equation>
      <rhs_eq_var>adjlegrt</rhs_eq_var>
      <rhs_eq_var>uleg</rhs_eq_var>
      <rhs_eq_var>leg</rhs_eq_var>
      <rhs_eq_var>lep</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>gfdrt</name>
    <equation_type>Exogenous</equation_type>
    <definition>Federal government target debt-to-GDP ratio</definition>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>gfexpn</name>
    <equation_type>Identity</equation_type>
    <sector>Government</sector>
    <definition>Government payments</definition>
    <standard_equation>
      <eviews_equation>gfexpn - gfexpn_aerr = egfln + egfen + gtn + gfintn</eviews_equation>
      <python_equation>gfexpn - gfexpn_aerr = egfln + egfen + gtn + gfintn</python_equation>
      <rhs_eq_var>egfen</rhs_eq_var>
      <rhs_eq_var>egfln</rhs_eq_var>
      <rhs_eq_var>gfintn</rhs_eq_var>
      <rhs_eq_var>gtn</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>gfintn</name>
    <equation_type>Identity</equation_type>
    <sector>Government</sector>
    <definition>Federal government net interest payments, current $</definition>
    <standard_equation>
      <eviews_equation>gfintn - gfintn_aerr = rgfint*gfdbtn(-1) </eviews_equation>
      <python_equation>gfintn - gfintn_aerr = rgfint*gfdbtn(-1) </python_equation>
      <rhs_eq_var>gfdbtn</rhs_eq_var>
      <rhs_eq_var>rgfint</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>gfrecn</name>
    <equation_type>Identity</equation_type>
    <sector>Government</sector>
    <definition>Government receipts and residual</definition>
    <standard_equation>
      <eviews_equation>gfrecn - gfrecn_aerr = tpn + tcin + ugfsrp*xgdpn</eviews_equation>
      <python_equation>gfrecn - gfrecn_aerr = tpn + tcin + ugfsrp*xgdpn</python_equation>
      <rhs_eq_var>ugfsrp</rhs_eq_var>
      <rhs_eq_var>tcin</rhs_eq_var>
      <rhs_eq_var>tpn</rhs_eq_var>
      <rhs_eq_var>xgdpn</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>gfsrpn</name>
    <equation_type>Identity</equation_type>
    <sector>Government</sector>
    <definition>Federal government budget surplus, current $</definition>
    <standard_equation>
      <eviews_equation>gfsrpn - gfsrpn_aerr = tpn + tcin
                   - egfln - egfen - gtn - gfintn
                   + ugfsrp*xgdpn
	 </eviews_equation>
      <python_equation>gfsrpn - gfsrpn_aerr = tpn + tcin
                   - egfln - egfen - gtn - gfintn
                   + ugfsrp*xgdpn
	 </python_equation>
      <rhs_eq_var>egfen</rhs_eq_var>
      <rhs_eq_var>egfln</rhs_eq_var>
      <rhs_eq_var>ugfsrp</rhs_eq_var>
      <rhs_eq_var>gfintn</rhs_eq_var>
      <rhs_eq_var>gtn</rhs_eq_var>
      <rhs_eq_var>tcin</rhs_eq_var>
      <rhs_eq_var>tpn</rhs_eq_var>
      <rhs_eq_var>xgdpn</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>gfsrt</name>
    <equation_type>Exogenous</equation_type>
    <definition>Federal government target surplus-to-GDP ratio</definition>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>gtn</name>
    <equation_type>Behavioral</equation_type>
    <sector>Government</sector>
    <definition>Federal government net transfer payments, current $</definition>
    <description/>
    <standard_equation>
      <eviews_equation>gtn - gtn_aerr = .01*pgdp*gtr
	 </eviews_equation>
      <python_equation>gtn - gtn_aerr = .01*pgdp*gtr
	 </python_equation>
      <rhs_eq_var>gtr</rhs_eq_var>
      <rhs_eq_var>pgdp</rhs_eq_var>
    </standard_equation>
    <stochastic_type>NO</stochastic_type>
  </variable>
  <variable>
    <name>gtr</name>
    <equation_type>Behavioral</equation_type>
    <sector>Government</sector>
    <definition>Government net transfer payments, deflated by PGDP</definition>
    <description/>
    <standard_equation>
      <eviews_equation> gtr - gtr_aerr = (gtrd+gtrt)*xgdpt
	 </eviews_equation>
      <python_equation> gtr - gtr_aerr = (gtrd+gtrt)*xgdpt
	 </python_equation>
      <rhs_eq_var>gtrd</rhs_eq_var>
      <rhs_eq_var>gtrt</rhs_eq_var>
      <rhs_eq_var>xgdpt</rhs_eq_var>
    </standard_equation>
    <stochastic_type>NO</stochastic_type>
  </variable>
  <variable>
    <name>gtrd</name>
    <equation_type>Behavioral</equation_type>
    <sector>Government</sector>
    <definition>Deviation of ratio of government transfers to GDP from trend ratio</definition>
    <description/>
    <standard_equation>
      <eviews_equation>gtrd - gtrd_aerr = y_gtrd(2)*xgap2
           + y_gtrd(3)* (xgap2(-1) +xgap2(-2) +xgap2(-3) +xgap2(-4))/4  + y_gtrd(1)*(gtrd(-1)
           - y_gtrd(2)*xgap2(-1) - y_gtrd(3)* (xgap2(-2) +xgap2(-3) +xgap2(-4) +xgap2(-5))/4 )
      </eviews_equation>
      <python_equation>gtrd - gtrd_aerr = y_gtrd_2*xgap2
           + y_gtrd_3* (xgap2(-1) +xgap2(-2) +xgap2(-3) +xgap2(-4))/4 + y_gtrd_1*(gtrd(-1)
           - y_gtrd_2*xgap2(-1) - y_gtrd_3*(xgap2(-2) +xgap2(-3) +xgap2(-4) +xgap2(-5))/4 )
      </python_equation>
      <coeff>
        <cf_name>y_gtrd(1)</cf_name>
        <cf_value>0.862481931486</cf_value>
        <t_stat>23.94559</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_gtrd(2)</cf_name>
        <cf_value>-0.000176387604876</cf_value>
        <t_stat>-0.506846</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_gtrd(3)</cf_name>
        <cf_value>-0.00143470943</cf_value>
        <t_stat>-3.325702</t_stat>
      </coeff>
      <rhs_eq_var>gtrd</rhs_eq_var>
      <rhs_eq_var>xgap2</rhs_eq_var>
      <estimation_statistics>
        <adjusted_r_squared>0.811344</adjusted_r_squared>
        <date>03/09/21   Time: 11:11</date>
        <durbin_watson>2.415937</durbin_watson>
        <method>Least Squares (Gauss-Newton / Marquardt steps)</method>
        <r_squared>0.813240</r_squared>
        <sample_end>2019Q4</sample_end>
        <sample_start>1970Q1</sample_start>
        <se_of_regression>0.002897</se_of_regression>
      </estimation_statistics>
    </standard_equation>
    <stochastic_type>GV</stochastic_type>
  </variable>
  <variable>
    <name>gtrt</name>
    <equation_type>Exogenous</equation_type>
    <definition>Government, trend ratio of transfer payments to GDP</definition>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>hgemp</name>
    <equation_type>Behavioral</equation_type>
    <sector>Foreign Trade</sector>
    <definition>Petroleum imports, cw 2012$, trend growth rate</definition>
    <standard_equation>
      <eviews_equation>hgemp - hgemp_aerr = y_hgemp(1) * hgemp(-1)
                   + y_hgemp(2) * 400*log(emp/emp(-1))
</eviews_equation>
      <python_equation>hgemp - hgemp_aerr = y_hgemp_1 * hgemp(-1)
                   + y_hgemp_2 * 400*log(emp/emp(-1))
</python_equation>
      <coeff>
        <cf_name>y_hgemp(1)</cf_name>
        <cf_value>.9</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_hgemp(2)</cf_name>
        <cf_value>.1</cf_value>
      </coeff>
      <rhs_eq_var>emp</rhs_eq_var>
      <rhs_eq_var>hgemp</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>hggdp</name>
    <equation_type>Identity</equation_type>
    <sector>Aggregate Output Identities</sector>
    <definition>Growth rate of GDP, cw 2012$ (annual rate)</definition>
    <standard_equation>
      <eviews_equation>hggdp - hggdp_aerr = 400*d( log(xgdp), 0, 1 ) </eviews_equation>
      <python_equation>hggdp - hggdp_aerr = 400*( log(xgdp) - ( log(xgdp(-1)))) </python_equation>
      <rhs_eq_var>xgdp</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>hggdpt</name>
    <equation_type>Identity</equation_type>
    <sector>Aggregate Output Identities</sector>
    <definition>Trend growth rate of XGDP, cw 2012$ (annual rate)</definition>
    <description> The trend growth rate of GDP is the sum of the trend growth rates
of business output and the stochastic trend component of potential GDP.
Because FRB/US permits separate log level and growth rate shocks, the
trend growth rate of GDP (HGGDPT) is different (and smoother) than the
growth rate of potential GDP (400*del(log(XGDPT)).
</description>
    <standard_equation>
      <eviews_equation>hggdpt - hggdpt_aerr = hxbt + huxb </eviews_equation>
      <python_equation>hggdpt - hggdpt_aerr = hxbt + huxb </python_equation>
      <rhs_eq_var>huxb</rhs_eq_var>
      <rhs_eq_var>hxbt</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>hgpbfir</name>
    <equation_type>Identity</equation_type>
    <sector>Aggregate Output Identities</sector>
    <definition>Trend growth rate of price of business investment (relative to PXB)</definition>
    <standard_equation>
      <eviews_equation>hgpbfir - hgpbfir_aerr = .975*hgpbfir(-1)
                       + .025*400*(log(pbfir*pxp/pxb / (pbfir(-1)*pxp(-1)/pxb(-1))))</eviews_equation>
      <python_equation>hgpbfir - hgpbfir_aerr = .975*hgpbfir(-1)
                       + .025*400*(log(pbfir*pxp/pxb / (pbfir(-1)*pxp(-1)/pxb(-1))))</python_equation>
      <rhs_eq_var>hgpbfir</rhs_eq_var>
      <rhs_eq_var>pbfir</rhs_eq_var>
      <rhs_eq_var>pxb</rhs_eq_var>
      <rhs_eq_var>pxp</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>hgpcdr</name>
    <equation_type>Exogenous</equation_type>
    <definition>Trend growth rate of price of consumer durable goods (relative to PCNIA)</definition>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>hgpkir</name>
    <equation_type>Behavioral</equation_type>
    <sector>Wages and Prices</sector>
    <definition>Trend growth rate of PKIR</definition>
    <standard_equation>
      <eviews_equation>hgpkir - hgpkir_aerr = y_hgpkir(1) * hgpkir(-1)
                     + y_hgpkir(2) * 400*log(pkir/pkir(-1))
</eviews_equation>
      <python_equation>hgpkir - hgpkir_aerr = y_hgpkir_1 * hgpkir(-1)
                     + y_hgpkir_2 * 400*log(pkir/pkir(-1))
</python_equation>
      <coeff>
        <cf_name>y_hgpkir(1)</cf_name>
        <cf_value>.9</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_hgpkir(2)</cf_name>
        <cf_value>.1</cf_value>
      </coeff>
      <rhs_eq_var>hgpkir</rhs_eq_var>
      <rhs_eq_var>pkir</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>hgynid</name>
    <equation_type>Identity</equation_type>
    <sector>Expectations</sector>
    <definition>Growth rate of real after-tax corporate profits</definition>
    <standard_equation>
      <eviews_equation>hgynid - hgynid_aerr = 400*d( log((ynicpn-tcin)*.5/pxb), 0, 1 )</eviews_equation>
      <python_equation>hgynid - hgynid_aerr = 400*( log((ynicpn-tcin)*.5/pxb) - ( log((ynicpn(-1)-tcin(-1))*.5/pxb(-1))))</python_equation>
      <rhs_eq_var>pxb</rhs_eq_var>
      <rhs_eq_var>tcin</rhs_eq_var>
      <rhs_eq_var>ynicpn</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>hks</name>
    <equation_type>Behavioral</equation_type>
    <sector>Business Expenditures</sector>
    <definition>Growth rate of KS, cw 2012$ (compound annual rate)</definition>
    <description>The growth rate of capital services is modeled as a weighted
average of the growth rates of three capital stocks.  The weights are
measures of income shares earned by each type of capital.  A residual
component, which makes the equation an identity, accounts for the use
of partially aggregated capital stocks rather than disaggregated
capital stocks, omission of several types of capital (owner-occupied
housing, land), and approximation error in the constructed income
share weights.
</description>
    <standard_equation>
      <eviews_equation>hks - hks_aerr = 400 * (ykbfin * d( log(kbfi), 0, 1 )
                     +  ykin * d( log(ki), 0, 1 )) /
                     (ykbfin + ykin) + hksr
      </eviews_equation>
      <python_equation>hks - hks_aerr = 400 * (ykbfin * ( log(kbfi) - ( log(kbfi(-1))))
                     +  ykin * ( log(ki) - ( log(ki(-1))))) /
                     (ykbfin + ykin) + hksr
      </python_equation>
      <coeff>
        <cf_name>y_hks(1)</cf_name>
        <cf_value>0.4543136031</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_hks(2)</cf_name>
        <cf_value>0.4847950762</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_hks(3)</cf_name>
        <cf_value>0.0608913208</cf_value>
      </coeff>
      <rhs_eq_var>hksr</rhs_eq_var>
      <rhs_eq_var>kbfi</rhs_eq_var>
      <rhs_eq_var>ki</rhs_eq_var>
      <rhs_eq_var>ykbfin</rhs_eq_var>
      <rhs_eq_var>ykin</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>hksr</name>
    <equation_type>Exogenous</equation_type>
    <definition>Residual growth of capital services</definition>
    <exogenous_projection>10</exogenous_projection>
  </variable>
  <variable>
    <name>hlept</name>
    <equation_type>Behavioral</equation_type>
    <sector>Labor Market</sector>
    <definition>Trend growth rate of LEP (annual rate)</definition>
    <description/>
    <standard_equation>
      <eviews_equation>hlept - hlept_aerr = 400*hqlfpr + 400*d( log(n16), 0, 1)</eviews_equation>
      <python_equation>hlept - hlept_aerr = 400*hqlfpr + 400*( log(n16) - ( log(n16(-1))))</python_equation>
      <rhs_eq_var>hqlfpr</rhs_eq_var>
      <rhs_eq_var>n16</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>hlprdt</name>
    <equation_type>Identity</equation_type>
    <sector>Labor Market</sector>
    <definition>Trend growth rate of output per hour</definition>
    <standard_equation>
      <eviews_equation>hlprdt - hlprdt_aerr = hxbt - hlept - hqlww </eviews_equation>
      <python_equation>hlprdt - hlprdt_aerr = hxbt - hlept - hqlww </python_equation>
      <rhs_eq_var>hlept</rhs_eq_var>
      <rhs_eq_var>hqlww</rhs_eq_var>
      <rhs_eq_var>hxbt</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>hmfpt</name>
    <equation_type>Behavioral</equation_type>
    <sector>Aggregate Output Identities</sector>
    <definition>Trend growth rate of multifactor productivity</definition>
    <description>Trend multi-factor productivity follows a random walk with drift.
The drift term, HMFPT, is an AR(1) process.  As with all drift terms
in FRB/US supply-side stochastic trends, HMFPT is assumed to be
mean-reverting at a five percent quarterly rate.
</description>
    <standard_equation>
      <eviews_equation>hmfpt - hmfpt_aerr = y_hmfpt(1) + y_hmfpt(2)*hmfpt(-1) </eviews_equation>
      <python_equation>hmfpt - hmfpt_aerr = y_hmfpt_1 + y_hmfpt_2*hmfpt(-1) </python_equation>
      <coeff>
        <cf_name>y_hmfpt(1)</cf_name>
        <cf_value>0.055</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_hmfpt(2)</cf_name>
        <cf_value>0.95</cf_value>
      </coeff>
      <rhs_eq_var>hmfpt</rhs_eq_var>
    </standard_equation>
    <stochastic_type>ST</stochastic_type>
  </variable>
  <variable>
    <name>hqlfpr</name>
    <equation_type>Behavioral</equation_type>
    <sector>Labor Market</sector>
    <definition>Drift component of change in QLFPR</definition>
    <description>The trend first difference of the workweek follows an AR(1)
process.  HQLFPR is assumed to revert to a mean of zero at a five percent
quarterly rate.
</description>
    <standard_equation>
      <eviews_equation>hqlfpr - hqlfpr_aerr = y_hqlfpr(1) + y_hqlfpr(2)*hqlfpr(-1) </eviews_equation>
      <python_equation>hqlfpr - hqlfpr_aerr = y_hqlfpr_1 + y_hqlfpr_2*hqlfpr(-1) </python_equation>
      <coeff>
        <cf_name>y_hqlfpr(1)</cf_name>
        <cf_value>0.00</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_hqlfpr(2)</cf_name>
        <cf_value>0.95</cf_value>
      </coeff>
      <rhs_eq_var>hqlfpr</rhs_eq_var>
    </standard_equation>
    <stochastic_type>LB</stochastic_type>
  </variable>
  <variable>
    <name>hqlww</name>
    <equation_type>Behavioral</equation_type>
    <sector>Labor Market</sector>
    <definition>Trend growth rate of workweek</definition>
    <description>The trend growth rate of the workweek follows an AR(1) process.  As
with all drift terms in FRB/US supply-side stochastic trends, HQLWW is
assumed to be mean-reverting at a five percent quarterly rate.
</description>
    <standard_equation>
      <eviews_equation>hqlww - hqlww_aerr = y_hqlww(1) * hqlww(-1) + (1-y_hqlww(1)) * y_hqlww(2) </eviews_equation>
      <python_equation>hqlww - hqlww_aerr = y_hqlww_1 * hqlww(-1) + (1-y_hqlww_1) * y_hqlww_2 </python_equation>
      <coeff>
        <cf_name>y_hqlww(1)</cf_name>
        <cf_value>.95</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_hqlww(2)</cf_name>
        <cf_value>-0.3129029344874886</cf_value>
        <t_stat>2.434482758761471</t_stat>
      </coeff>
      <rhs_eq_var>hqlww</rhs_eq_var>
    </standard_equation>
    <stochastic_type>LB</stochastic_type>
  </variable>
  <variable>
    <name>huqpct</name>
    <equation_type>Behavioral</equation_type>
    <sector>Wages and Prices</sector>
    <definition>Drift term in stochastic component of trend ratio of PCNIA to PXP</definition>
    <standard_equation>
      <eviews_equation>huqpct - huqpct_aerr = y_huqpct(1) + y_huqpct(2)*huqpct(-1) </eviews_equation>
      <python_equation>huqpct - huqpct_aerr = y_huqpct_1 + y_huqpct_2*huqpct(-1) </python_equation>
      <coeff>
        <cf_name>y_huqpct(1)</cf_name>
        <cf_value>0.00</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_huqpct(2)</cf_name>
        <cf_value>0.95</cf_value>
      </coeff>
      <rhs_eq_var>huqpct</rhs_eq_var>
      <estimation_statistics>
        <estimation_date>August 2010</estimation_date>
        <sample_end>-</sample_end>
        <sample_start>1962Q1</sample_start>
      </estimation_statistics>
    </standard_equation>
  </variable>
  <variable>
    <name>huxb</name>
    <equation_type>Behavioral</equation_type>
    <sector>Aggregate Output Identities</sector>
    <definition>Drift term in UXBT</definition>
    <description> The stochastic trend component of potential GDP, UXBT, follows a
random walk with drift.  The drift term, HUXB, is an AR(1) process.
As with all drift terms in FRB/US supply-side stochastic trends,
HUXB is assumed to be mean-reverting at a five percent quarterly
rate.  In long-run simulations, the dummy variable DGLPRD can be set
to 1.0 to ensure that potential GDP and potential business sector grow at the same
rate.
</description>
    <standard_equation>
      <eviews_equation>huxb  - huxb_aerr = (1-dglprd)*
          (y_huxb(1)
          + y_huxb(2)*huxb(-1))</eviews_equation>
      <python_equation>huxb  - huxb_aerr = (1-dglprd)*
          (y_huxb_1
          + y_huxb_2*huxb(-1))</python_equation>
      <coeff>
        <cf_name>y_huxb(1)</cf_name>
        <cf_value>-0.01613974358626877</cf_value>
        <t_stat>-440.0882498790051</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_huxb(2)</cf_name>
        <cf_value>0.95</cf_value>
      </coeff>
      <rhs_eq_var>dglprd</rhs_eq_var>
      <rhs_eq_var>huxb</rhs_eq_var>
      <estimation_statistics>
        <adjusted_r_squared>0.9998637240881884</adjusted_r_squared>
        <date>08/30/18   Time: 10:02 </date>
        <durbin_watson>0.06548263033956848</durbin_watson>
        <method>Least Squares (Gauss-Newton / Marquardt steps)</method>
        <r_squared>0.9998637240881884</r_squared>
        <sample_end>2017Q4</sample_end>
        <sample_start>1966Q1</sample_start>
        <se_of_regression>0.0005289182166452496</se_of_regression>
      </estimation_statistics>
    </standard_equation>
  </variable>
  <variable>
    <name>hxbt</name>
    <equation_type>Identity</equation_type>
    <sector>Aggregate Output Identities</sector>
    <definition>Trend rate of growth of XB  , cw 2012$ (annual rate)</definition>
    <description>Some of the components of potential output are modeled as stochastic
trends wth stochastic drift terms. Because both log level shocks and growth rate shocks
occur in this framework, the trend rate of growth of such a component differs from the
growth rate of its trend level. The trend rate of growth of business output is calculated
using the distinct trend rates of growth, rather than on the growth rate of trends, of
multifactor productivity (HMFPT) and those factor inputs that have trend growth rates
(HLEPT, HQLWW). The imposed coefficients are the same as those in the production function
for the level of XBT. The trend growth rate of business sector output (HXBT) is smoother
than the growth rate of the level of potential adjusted business sector output
(400*del(log(XBT))). As for the level equation, there is an explicit residual term (HXBTR)
in the equation for potential growth.

</description>
    <standard_equation>
      <eviews_equation>hxbt - hxbt_aerr =  .725*(hlept + hqlww + 400*d( log(lqualt), 0, 1 ))
                  + .275*hks + hmfpt +hxbtr
     </eviews_equation>
      <python_equation>hxbt - hxbt_aerr =  .725*(hlept + hqlww + 400*( log(lqualt) - ( log(lqualt(-1)))))
                  + .275*hks + hmfpt +hxbtr
     </python_equation>
      <rhs_eq_var>hks</rhs_eq_var>
      <rhs_eq_var>hlept</rhs_eq_var>
      <rhs_eq_var>hmfpt</rhs_eq_var>
      <rhs_eq_var>hqlww</rhs_eq_var>
      <rhs_eq_var>hxbtr</rhs_eq_var>
      <rhs_eq_var>lqualt</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>hxbtr</name>
    <equation_type>Behavioral</equation_type>
    <sector>Aggregate Output Identities</sector>
    <definition>Residual Factor (Trend rate of growth of XB)</definition>
    <standard_equation>
      <eviews_equation>hxbtr - hxbtr_aerr = 0 </eviews_equation>
      <python_equation>hxbtr - hxbtr_aerr = 0 </python_equation>
    </standard_equation>
  </variable>
  <variable>
    <name>jccan</name>
    <equation_type>Behavioral</equation_type>
    <sector>Nominal Income</sector>
    <definition>Consumption of fixed capital, current $</definition>
    <description/>
    <standard_equation>
      <eviews_equation>jccan/xgdpn - jccan_aerr = y_jccan(1)*(1-y_jccan(2))
	 + y_jccan(2)*jccan(-1)/xgdpn(-1)
	 + (1-y_jccan(2))*pkbfir(-1)*kbfi(-1)*jrbfi*pxp(-1)*.01/xgdpn(-1)
	 </eviews_equation>
      <python_equation>jccan/xgdpn - jccan_aerr = y_jccan_1*(1-y_jccan_2)
	 + y_jccan_2*jccan(-1)/xgdpn(-1)
	 + (1-y_jccan_2)*pkbfir(-1)*kbfi(-1)*jrbfi*pxp(-1)*.01/xgdpn(-1)
	 </python_equation>
      <coeff>
        <cf_name>y_jccan(1)</cf_name>
        <cf_value>0.053902</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_jccan(2)</cf_name>
        <cf_value>0.821408</cf_value>
      </coeff>
      <rhs_eq_var>jccan</rhs_eq_var>
      <rhs_eq_var>jrbfi</rhs_eq_var>
      <rhs_eq_var>kbfi</rhs_eq_var>
      <rhs_eq_var>pkbfir</rhs_eq_var>
      <rhs_eq_var>pxp</rhs_eq_var>
      <rhs_eq_var>xgdpn</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>jkcd</name>
    <equation_type>Identity</equation_type>
    <sector>Household Expenditures</sector>
    <definition>Consumption of fixed capital, consumer durables</definition>
    <standard_equation>
      <eviews_equation>jkcd - jkcd_aerr = jrcd * kcd(-1) </eviews_equation>
      <python_equation>jkcd - jkcd_aerr = jrcd * kcd(-1) </python_equation>
      <rhs_eq_var>jrcd</rhs_eq_var>
      <rhs_eq_var>kcd</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>jrbfi</name>
    <equation_type>Exogenous</equation_type>
    <definition>Depreciation rate, business investment</definition>
    <exogenous_projection>3</exogenous_projection>
  </variable>
  <variable>
    <name>jrcd</name>
    <equation_type>Exogenous</equation_type>
    <definition>Depreciation rate, consumer durables</definition>
    <exogenous_projection>3</exogenous_projection>
  </variable>
  <variable>
    <name>jrh</name>
    <equation_type>Exogenous</equation_type>
    <definition>Depreciation rate, housing</definition>
    <exogenous_projection>3</exogenous_projection>
  </variable>
  <variable>
    <name>kbfi</name>
    <equation_type>Identity</equation_type>
    <sector>Business Expenditures</sector>
    <definition>Capital stock - BFI, 2012$</definition>
    <standard_equation>
      <eviews_equation>kbfi - kbfi_aerr = (pbfir/pkbfir)*ebfi/4 + (1-jrbfi/4) * kbfi(-1) </eviews_equation>
      <python_equation>kbfi - kbfi_aerr = (pbfir/pkbfir)*ebfi/4 + (1-jrbfi/4) * kbfi(-1) </python_equation>
      <rhs_eq_var>ebfi</rhs_eq_var>
      <rhs_eq_var>jrbfi</rhs_eq_var>
      <rhs_eq_var>kbfi</rhs_eq_var>
      <rhs_eq_var>pbfir</rhs_eq_var>
      <rhs_eq_var>pkbfir</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>kcd</name>
    <equation_type>Identity</equation_type>
    <sector>Household Expenditures</sector>
    <definition>Stock of consumer durables, cw 2012$</definition>
    <standard_equation>
      <eviews_equation>kcd - kcd_aerr = .25*ecd + (1-jrcd/4)*kcd(-1) </eviews_equation>
      <python_equation>kcd - kcd_aerr = .25*ecd + (1-jrcd/4)*kcd(-1) </python_equation>
      <rhs_eq_var>ecd</rhs_eq_var>
      <rhs_eq_var>jrcd</rhs_eq_var>
      <rhs_eq_var>kcd</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>kh</name>
    <equation_type>Identity</equation_type>
    <sector>Household Expenditures</sector>
    <definition>Stock of residential structures, cw 2012$</definition>
    <standard_equation>
      <eviews_equation>kh - kh_aerr = .25*eh + (1-jrh/4)*kh(-1) </eviews_equation>
      <python_equation>kh - kh_aerr = .25*eh + (1-jrh/4)*kh(-1) </python_equation>
      <rhs_eq_var>eh</rhs_eq_var>
      <rhs_eq_var>jrh</rhs_eq_var>
      <rhs_eq_var>kh</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>ki</name>
    <equation_type>Behavioral</equation_type>
    <sector>Business Expenditures</sector>
    <definition>Stock of private inventories, cw 2012$</definition>
    <description>The KI equation has an error-correction form in which the desired
inventory-sales ratio (QKIR) is a random walk with drift.  The KI
equation and the QKIR process are estimated using the Kalman Filter.
The secular downtrend in the inventory-sales ratio is reflected in an
estimated value of the drift in QKIR that is negative.  In the KI
equation, movements in the growth rate of final sales have temporary
effects on inventories, but permanent effects on the
inventory-sales ratio are precluded by restricting the coefficients on
the lagged growth rates of sales and inventories to sum to unity.

</description>
    <standard_equation>
      <eviews_equation>dlog(ki) - ki_aerr =
           y_ki(5)
          + y_ki(1)*(log(qkir) - log(ki(-1)/xfs(-1)))
          + y_ki(2)*(dlog(ki(-1))
          -y_ki(5))
          + y_ki(3)*dlog(xfs(-1))
          + y_ki(4)*dlog(xfs(-2))</eviews_equation>
      <python_equation>(log(ki) - log(ki(-1))) - ki_aerr =
           y_ki_5
          + y_ki_1*(log(qkir) - log(ki(-1)/xfs(-1)))
          + y_ki_2*((log(ki(-1)) - log(ki(-2)))
          -y_ki_5)
          + y_ki_3*(log(xfs(-1)) - log(xfs(-2)))
          + y_ki_4*(log(xfs(-2)) - log(xfs(-3)))</python_equation>
      <coeff>
        <cf_name>y_ki(1)</cf_name>
        <cf_value>0.01469206254903638</cf_value>
        <t_stat>0.8308490188393236</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_ki(2)</cf_name>
        <cf_value>0.4567399290262596</cf_value>
        <t_stat>10.24095454815411</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_ki(3)</cf_name>
        <cf_value>0.236031927797704</cf_value>
        <t_stat>5.403767691568972</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_ki(4)</cf_name>
        <cf_value>0.3072281431760363</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_ki(5)</cf_name>
        <cf_value>-0.00120624751419073</cf_value>
        <t_stat>-2.709730009253576</t_stat>
      </coeff>
      <rhs_eq_var>ki</rhs_eq_var>
      <rhs_eq_var>qkir</rhs_eq_var>
      <rhs_eq_var>xfs</rhs_eq_var>
      <estimation_statistics>
        <date>08/30/18   Time: 10:02 </date>
        <method>Maximum likelihood  (BFGS / Marquardt steps)</method>
        <sample_end>2017Q4</sample_end>
        <sample_start>1960Q1</sample_start>
      </estimation_statistics>
    </standard_equation>
    <kfcalc>1</kfcalc>
    <stochastic_type>IS</stochastic_type>
  </variable>
  <variable>
    <name>ks</name>
    <equation_type>Identity</equation_type>
    <sector>Business Expenditures</sector>
    <definition>Capital services, 2012$</definition>
    <standard_equation>
      <eviews_equation>log(ks) - ks_aerr = log(ks(-1)) + hks/400 </eviews_equation>
      <python_equation>log(ks) - ks_aerr = log(ks(-1)) + hks/400 </python_equation>
      <rhs_eq_var>hks</rhs_eq_var>
      <rhs_eq_var>ks</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>leg</name>
    <equation_type>Identity</equation_type>
    <sector>Government</sector>
    <definition>Government civilian employment ex. gov. enterprise</definition>
    <description/>
    <standard_equation>
      <eviews_equation>log(leg) - leg_aerr = log(uleg) + log(egfl+egsl) - log(lprdt)
	 </eviews_equation>
      <python_equation>log(leg) - leg_aerr = log(uleg) + log(egfl+egsl) - log(lprdt)
	 </python_equation>
      <rhs_eq_var>egfl</rhs_eq_var>
      <rhs_eq_var>egsl</rhs_eq_var>
      <rhs_eq_var>uleg</rhs_eq_var>
      <rhs_eq_var>lprdt</rhs_eq_var>
    </standard_equation>
    <stochastic_type>NO</stochastic_type>
  </variable>
  <variable>
    <name>leh</name>
    <equation_type>Identity</equation_type>
    <sector>Labor Market</sector>
    <definition>Civilian employment (break adjusted)</definition>
    <description>Civilian employment from the household survey is the sum of
business employment (LEP), state and local government
employment (LES), federal government employment (LEF), and the
employment discrepancy (LEO).
</description>
    <standard_equation>
      <eviews_equation>leh - leh_aerr = lep + leg + leo </eviews_equation>
      <python_equation>leh - leh_aerr = lep + leg + leo </python_equation>
      <rhs_eq_var>leg</rhs_eq_var>
      <rhs_eq_var>leo</rhs_eq_var>
      <rhs_eq_var>lep</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>leo</name>
    <equation_type>Behavioral</equation_type>
    <sector>Labor Market</sector>
    <definition>Difference between household and business sector payroll employment, less government employment</definition>
    <description>LEO error corrects to the discrepancy between its lagged and
desired values and also varies counter-cyclically.  The desired value
of LEO is the product of a desired ratio (QLEOR) and the equilibrium
labor force.  QLEOR is measured historically as the value of LEO that
is consistent with equilibrium values of the labor force, employment
in various sectors, and the unemployment rate.  In simulation, QLEOR
is exogenous.
</description>
    <standard_equation>
      <eviews_equation>log(leo)  - leo_aerr = log(qleor*qlf)
          +  y_leo(1) * log(leo(-1)/(qleor(-1)*qlf(-1)))
          +  y_leo(2) * xgap2(-1)</eviews_equation>
      <python_equation>log(leo)  - leo_aerr = log(qleor*qlf)
          +  y_leo_1 * log(leo(-1)/(qleor(-1)*qlf(-1)))
          +  y_leo_2 * xgap2(-1)</python_equation>
      <coeff>
        <cf_name>y_leo(1)</cf_name>
        <cf_value>0.7566675970336151</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_leo(2)</cf_name>
        <cf_value>-0.01642583348237834</cf_value>
      </coeff>
      <rhs_eq_var>leo</rhs_eq_var>
      <rhs_eq_var>qleor</rhs_eq_var>
      <rhs_eq_var>qlf</rhs_eq_var>
      <rhs_eq_var>xgap2</rhs_eq_var>
    </standard_equation>
    <stochastic_type>LB</stochastic_type>
  </variable>
  <variable>
    <name>lep</name>
    <equation_type>Identity</equation_type>
    <sector>Labor Market</sector>
    <definition>Employment in  business sector (employee and  self-employed)</definition>
    <description>Employment in the business sector equals aggregate
hours divided by the average workweek.

</description>
    <standard_equation>
      <eviews_equation>lep - lep_aerr = lhp / lww </eviews_equation>
      <python_equation>lep - lep_aerr = lhp / lww </python_equation>
      <rhs_eq_var>lhp</rhs_eq_var>
      <rhs_eq_var>lww</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>leppot</name>
    <equation_type>Identity</equation_type>
    <sector>Labor Market</sector>
    <definition>Potential employment in  business sector</definition>
    <description>The trend level of employment in the business sector
consists of potential economy-wide employment less trend employment in
other sectors.  Potential economy-wide employment equals the product
of the trend labor force (QLF) and the proportion of the labor force
employed in equilibrium (1.0 minus the natural rate of unemployment,
LURNAT).  Trend employment in sectors other than business
consists of trend government employment (LEST + LEFT) and trend
"other" employment (QLEOR * QLF).
</description>
    <standard_equation>
      <eviews_equation>leppot - leppot_aerr = (qlf*(1-.01*lurnat - qleor))/(1+adjlegrt) </eviews_equation>
      <python_equation>leppot - leppot_aerr = (qlf*(1-.01*lurnat - qleor))/(1+adjlegrt) </python_equation>
      <rhs_eq_var>adjlegrt</rhs_eq_var>
      <rhs_eq_var>lurnat</rhs_eq_var>
      <rhs_eq_var>qleor</rhs_eq_var>
      <rhs_eq_var>qlf</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>leuc</name>
    <equation_type>Exogenous</equation_type>
    <definition>Emergency unemployment compensation (EUC)</definition>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>lf</name>
    <equation_type>Identity</equation_type>
    <sector>Labor Market</sector>
    <definition>Civilian labor force (break adjusted)</definition>
    <standard_equation>
      <eviews_equation>lf - lf_aerr = lfpr * n16 </eviews_equation>
      <python_equation>lf - lf_aerr = lfpr * n16 </python_equation>
      <rhs_eq_var>lfpr</rhs_eq_var>
      <rhs_eq_var>n16</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>lfpr</name>
    <equation_type>Behavioral</equation_type>
    <sector>Labor Market</sector>
    <definition>Labor force participation rate</definition>
    <description>In the long run, the participation rate moves at its trend first
difference (HQLFPR).  In the short run, the participation rate error
corrects at a 45 percent rate to the lagged deviation of its level
from its trend level (QLFPR).  QLFPR is modeled as a random walk with
time-varying drift.  Cyclical variation in the participation rate is
captured by including the gap between the unemployment rate and its
natural rate (LURNAT), which is lagged to avoid coefficient bias that
might arise from measurement error that is common to LUR and LFPR.
</description>
    <standard_equation>
      <eviews_equation>d(lfpr)-hqlfpr  - lfpr_aerr =
           y_lfpr(1)*(qlfpr(-1)-lfpr(-1))
          + y_lfpr(2)*(lur(-1)-lurnat(-1))</eviews_equation>
      <python_equation>(lfpr - (lfpr(-1)))-hqlfpr  - lfpr_aerr =
           y_lfpr_1*(qlfpr(-1)-lfpr(-1))
          + y_lfpr_2*(lur(-1)-lurnat(-1))</python_equation>
      <coeff>
        <cf_name>y_lfpr(1)</cf_name>
        <cf_value>0.5676074828293328</cf_value>
        <t_stat>10.43880510602398</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_lfpr(2)</cf_name>
        <cf_value>-0.0008751892020969236</cf_value>
        <t_stat>-9.063087467005178</t_stat>
      </coeff>
      <rhs_eq_var>lfpr</rhs_eq_var>
      <rhs_eq_var>lur</rhs_eq_var>
      <rhs_eq_var>lurnat</rhs_eq_var>
      <rhs_eq_var>qlfpr</rhs_eq_var>
      <estimation_statistics>
        <adjusted_r_squared>0.3351540036058511</adjusted_r_squared>
        <date>08/30/18   Time: 10:02 </date>
        <durbin_watson>1.957962129545313</durbin_watson>
        <method>Least Squares</method>
        <r_squared>0.3382178100408473</r_squared>
        <sample_end>2017Q4</sample_end>
        <sample_start>1963Q3</sample_start>
        <se_of_regression>0.001231338397034172</se_of_regression>
      </estimation_statistics>
    </standard_equation>
    <stochastic_type>LB</stochastic_type>
  </variable>
  <variable>
    <name>lhp</name>
    <equation_type>Behavioral</equation_type>
    <sector>Labor Market</sector>
    <definition>Aggregate labor hours,  business sector (employee and  self-employed)</definition>
    <description>Firms attempt to keep aggregate hours in line with the expected
level of production adjusted for the trend level of labor
productivity.  This definition of the target level of hours is
embedded in a version of the polynomial adjustment cost framework that
is modified to allow some portion of labor hours to adjust costlessly.
The portion of the equation that corresponds to the costly adjusting
hours consists of the three conventional PAC terms -- the degree hours
were out of equilibrium last period, lagged hours growth, and expected
growth in target hours.  The structure of the PAC component of the
equation is outlined below in Note 1.  To translate the general PAC
specification into the form in which it appears in the LHP equation,
associate log(LHP) with y, log(QLHP) with y*, and
ZLHP with the expected weighted sum of future &amp;Delta;y*.  The order of
adjustment costs (m) is 2.

The portion of hours that adjusts costlessly is captured by the
current growth in target hours (the growth rate of XBO less the trend
growth rate of output per hour, HLPRDT).  The coefficient on the
latter indicates that more than 40 percent of hours adjust costlessly
and a bit less than 60 percent of hours adjust according to the PAC
specification.  The aggregation of slow-adjusting and fast-adjusting
hours is outlined below in Note 2.

&lt;b&gt;Note 1:&lt;/b&gt; PAC Overview: Let y denote the decision variable and
y* its desired level in the absence of adjustment frictions.  The
decision rule derived from the PAC Euler equation has the following
form.

&amp;nbsp&amp;nbsp&amp;nbsp &amp;Delta;y&lt;sub&gt;t&lt;/sub&gt;&lt;sup&gt;pac&lt;/sup&gt; = a&lt;sub&gt;0&lt;/sub&gt;(y*&lt;sub&gt;t-1&lt;/sub&gt; -
      y&lt;sub&gt;t-1&lt;/sub&gt;) + &amp;sum;&lt;sub&gt;i=1,m-1&lt;/sub&gt;
      a&lt;sub&gt;i&lt;/sub&gt;&amp;Delta;y&lt;sub&gt;t-i&lt;/sub&gt; +
      E&lt;sub&gt;t-1&lt;/sub&gt;&amp;sum;&lt;sub&gt;i=0,&amp;infin;&lt;/sub&gt;d&lt;sub&gt;i&lt;/sub&gt;&amp;Delta;y*&lt;sub&gt;t+i&lt;/sub&gt;

 The order of adjustment costs is given by parameter m.  The
forward weights, d&lt;sub&gt;i&lt;/sub&gt; {i=0,&amp;infin;}, are functions of the
estimated values of a&lt;sub&gt;i&lt;/sub&gt; {i=0,m-1} and a fixed discount
factor (0.98).  Estimation imposes the growth neutrality restriction
&amp;sum;&lt;sub&gt;i=1,m-1&lt;/sub&gt;a&lt;sub&gt;i&lt;/sub&gt; +
&amp;sum;&lt;sub&gt;i=0,&amp;infin;&lt;/sub&gt;d&lt;sub&gt;i&lt;/sub&gt; = 1.  For more information,
see &lt;a href="pac_basics.pdf"&gt;PAC Basics&lt;/a&gt;.

&lt;b&gt;Note 2:&lt;/b&gt; To describe the aggregation of slow-adjusting PAC
hours and fast-adjusting hours, let h and q be the logs of total hours
and target hours, and z be the weighted sum of expected growth of
target hours.  Subscripts denote slow-adjusting ("1") and
fast-adjusting ("2") components.  Assume the shares of the two types
of hours are approximately constant.  Write

&lt;br&gt;&amp;nbsp&amp;nbsp&amp;nbsp   &amp;Delta;h&lt;sub&gt;t&lt;/sub&gt; = c*&amp;Delta;h&lt;sub&gt;1&lt;/sub&gt;&lt;sub&gt;t&lt;/sub&gt; + (1-c)*&amp;Delta;h&lt;sub&gt;2&lt;/sub&gt;&lt;sub&gt;t&lt;/sub&gt;
&lt;br&gt;&amp;nbsp&amp;nbsp&amp;nbsp   &amp;Delta;h&lt;sub&gt;1&lt;/sub&gt;&lt;sub&gt;t&lt;/sub&gt; = a&lt;sub&gt;0&lt;/sub&gt;(q&lt;sub&gt;1&lt;/sub&gt;-h&lt;sub&gt;1&lt;/sub&gt;)&lt;sub&gt;t-1&lt;/sub&gt; + a&lt;sub&gt;1&lt;/sub&gt;*&amp;Delta;h&lt;sub&gt;1,t-1&lt;/sub&gt; + zh&lt;sub&gt;1t&lt;/sub&gt;
&lt;br&gt;&amp;nbsp&amp;nbsp&amp;nbsp   &amp;Delta;h&lt;sub&gt;2t&lt;/sub&gt; = &amp;Delta;q&lt;sub&gt;2t&lt;/sub&gt; = &amp;Delta;q&lt;sub&gt;t&lt;/sub&gt;

By assumption, the total hours gap (q-h) is concentrated in the
slow adjusting hours, which leads to the final equation in the following steps

&lt;br&gt;&amp;nbsp&amp;nbsp&amp;nbsp   (q&lt;sub&gt;1t&lt;/sub&gt;-h&lt;sub&gt;1t&lt;/sub&gt;) = (q&lt;sub&gt;t&lt;/sub&gt;-h&lt;sub&gt;t&lt;/sub&gt;)/c
&lt;br&gt;&amp;nbsp&amp;nbsp&amp;nbsp   &amp;Delta;h&lt;sub&gt;1t&lt;/sub&gt; = (&amp;Delta;h&lt;sub&gt;t&lt;/sub&gt; - (1-c)*&amp;Delta;q&lt;sub&gt;t&lt;/sub&gt;)/c
&lt;br&gt;&amp;nbsp&amp;nbsp&amp;nbsp   &amp;Delta;h&lt;sub&gt;1&lt;/sub&gt;&lt;sub&gt;t&lt;/sub&gt; = a&lt;sub&gt;0&lt;/sub&gt;*(q-h)&lt;sub&gt;t-1&lt;/sub&gt;/c + a&lt;sub&gt;1&lt;/sub&gt;*(&amp;Delta;h&lt;sub&gt;t-1&lt;/sub&gt; - (1-c)&amp;Delta;q&lt;sub&gt;t-1&lt;/sub&gt;)/c + zh&lt;sub&gt;1t&lt;/sub&gt;
&lt;br&gt;&amp;nbsp&amp;nbsp&amp;nbsp   &amp;Delta;h&lt;sub&gt;t&lt;/sub&gt; = a&lt;sub&gt;0&lt;/sub&gt;*(q-h)&lt;sub&gt;t-1&lt;/sub&gt; + a&lt;sub&gt;1&lt;/sub&gt;*&amp;Delta;h&lt;sub&gt;t-1&lt;/sub&gt; + c*zh&lt;sub&gt;t&lt;/sub&gt; + (1-c)*&amp;Delta;q&lt;sub&gt;t&lt;/sub&gt; + a&lt;sub&gt;1&lt;/sub&gt;*(1-c)*&amp;Delta;q&lt;sub&gt;t-1&lt;/sub&gt;

The final form of the equation assumes zh = zh&lt;sub&gt;1&lt;/sub&gt;.
</description>
    <standard_equation>
      <eviews_equation>dlog(lhp)  - lhp_aerr =
           y_lhp(1) * (log(qlhp(-1)/lhp(-1)))
          + y_lhp(2) * dlog(lhp(-1))
          + y_lhp(3) * zlhp
          + y_lhp(4) * (dlog(xbo) - hlprdt(-1)/400 )
          + y_lhp(5) * (dlog(xbo(-1)) - hlprdt(-2)/400)</eviews_equation>
      <python_equation>(log(lhp) - log(lhp(-1)))  - lhp_aerr =
           y_lhp_1 * (log(qlhp(-1)/lhp(-1)))
          + y_lhp_2 * (log(lhp(-1)) - log(lhp(-2)))
          + y_lhp_3 * zlhp
          + y_lhp_4 * ((log(xbo) - log(xbo(-1))) - hlprdt(-1)/400 )
          + y_lhp_5 * ((log(xbo(-1)) - log(xbo(-2))) - hlprdt(-2)/400)</python_equation>
      <coeff>
        <cf_name>y_lhp(1)</cf_name>
        <cf_value>0.2022897898011354</cf_value>
        <t_stat>7.259064432449588</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_lhp(2)</cf_name>
        <cf_value>0.2028806748568088</cf_value>
        <t_stat>3.393905820484788</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_lhp(3)</cf_name>
        <cf_value>0.3720641848854363</cf_value>
        <t_stat>10.35220238834869</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_lhp(4)</cf_name>
        <cf_value>0.6279358151145638</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_lhp(5)</cf_name>
        <cf_value>-0.127396041937203</cf_value>
      </coeff>
      <rhs_eq_var>hlprdt</rhs_eq_var>
      <rhs_eq_var>lhp</rhs_eq_var>
      <rhs_eq_var>qlhp</rhs_eq_var>
      <rhs_eq_var>xbo</rhs_eq_var>
      <rhs_eq_var>zlhp</rhs_eq_var>
      <estimation_statistics>
        <adjusted_r_squared>0.7997430562973022</adjusted_r_squared>
        <date>08/30/18   Time: 10:03 </date>
        <durbin_watson>1.970798850059509</durbin_watson>
        <method>Iterative Least Squares</method>
        <r_squared>0.8016412258148194</r_squared>
        <sample_end>2017Q4</sample_end>
        <sample_start>1965Q1</sample_start>
        <se_of_regression>0.003538197604939341</se_of_regression>
      </estimation_statistics>
    </standard_equation>
    <stochastic_type>LB</stochastic_type>
  </variable>
  <variable>
    <name>lprdt</name>
    <equation_type>Identity</equation_type>
    <sector>Labor Market</sector>
    <definition>Trend labor productivity</definition>
    <description>Trend labor productivity in the adjusted business sector is
the ratio of potential output in that sector to trend total hours.
The latter is the product of potential employment (LEPPOT) and the trend
in hours per worker (QLWW).

</description>
    <standard_equation>
      <eviews_equation>log(lprdt) - lprdt_aerr  = log(xbt) - log(leppot) - log(qlww) </eviews_equation>
      <python_equation>log(lprdt) - lprdt_aerr  = log(xbt) - log(leppot) - log(qlww) </python_equation>
      <rhs_eq_var>leppot</rhs_eq_var>
      <rhs_eq_var>qlww</rhs_eq_var>
      <rhs_eq_var>xbt</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>lqualt</name>
    <equation_type>Exogenous</equation_type>
    <definition>Labor quality, trend level</definition>
    <exogenous_projection>1</exogenous_projection>
  </variable>
  <variable>
    <name>lur</name>
    <equation_type>Behavioral</equation_type>
    <sector>Labor Market</sector>
    <definition>Civilian unemployment rate (break adjusted)</definition>
    <standard_equation>
      <eviews_equation>lur - lur_aerr = 100*(1 - leh/lf) </eviews_equation>
      <python_equation>lur - lur_aerr = 100*(1 - leh/lf) </python_equation>
      <rhs_eq_var>leh</rhs_eq_var>
      <rhs_eq_var>lf</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>lurnat</name>
    <equation_type>Behavioral</equation_type>
    <sector>Labor Market</sector>
    <definition>Natural rate of unemployment</definition>
    <description> The natural rate of unemployment follows a random walk with zero drift.

</description>
    <standard_equation>
      <eviews_equation>lurnat - lurnat_aerr = lurnat(-1) </eviews_equation>
      <python_equation>lurnat - lurnat_aerr = lurnat(-1) </python_equation>
      <rhs_eq_var>lurnat</rhs_eq_var>
    </standard_equation>
    <stochastic_type>LB</stochastic_type>
  </variable>
  <variable>
    <name>lurtrsh</name>
    <equation_type>Exogenous</equation_type>
    <definition>Unemployment threshold</definition>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>lww</name>
    <equation_type>Behavioral</equation_type>
    <sector>Labor Market</sector>
    <definition>Workweek,  business sector (employee and self-employed)</definition>
    <description>In the long run, the workweek grows as its trend rate (HQLWW).  In
the short run, the workweek error corrects at nearly a 20 percent rate
to the lagged deviation of its level from its trend level (QLWW).
QLWW is modeled as a random walk with drift.  About 30 percent of the
contemporaneous deviation of the rate of growth of total hours from
its trend shows up as a change in the workweek (and thus about 70
percent shows up as a change in employment).

</description>
    <standard_equation>
      <eviews_equation>dlog(lww)-hqlww/400  - lww_aerr =
           y_lww(1)*log(qlww(-1)/lww(-1))
          + y_lww(2)*(dlog(lhp)-(hlept+hqlww)/400)</eviews_equation>
      <python_equation>(log(lww) - log(lww(-1)))-hqlww/400  - lww_aerr =
           y_lww_1*log(qlww(-1)/lww(-1))
          + y_lww_2*((log(lhp) - log(lhp(-1)))-(hlept+hqlww)/400)</python_equation>
      <coeff>
        <cf_name>y_lww(1)</cf_name>
        <cf_value>0.195710350653204</cf_value>
        <t_stat>10.66506989979301</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_lww(2)</cf_name>
        <cf_value>0.3184816471961936</cf_value>
        <t_stat>19.41865174072189</t_stat>
      </coeff>
      <rhs_eq_var>hlept</rhs_eq_var>
      <rhs_eq_var>hqlww</rhs_eq_var>
      <rhs_eq_var>lhp</rhs_eq_var>
      <rhs_eq_var>lww</rhs_eq_var>
      <rhs_eq_var>qlww</rhs_eq_var>
      <estimation_statistics>
        <adjusted_r_squared>0.6547090231380972</adjusted_r_squared>
        <date>08/30/18   Time: 10:02 </date>
        <durbin_watson>1.892277522064893</durbin_watson>
        <method>Least Squares</method>
        <r_squared>0.656300225796447</r_squared>
        <sample_end>2017Q4</sample_end>
        <sample_start>1963Q3</sample_start>
        <se_of_regression>0.001811376258859421</se_of_regression>
      </estimation_statistics>
    </standard_equation>
    <stochastic_type>LB</stochastic_type>
  </variable>
  <variable>
    <name>mei</name>
    <equation_type>Behavioral</equation_type>
    <sector>Financial Sector</sector>
    <definition>Multiplicative discrepancy for the difference between XGDI and XGDO</definition>
    <standard_equation>
      <eviews_equation>log(mei) - mei_aerr = y_mei(1) * log(mei(-1)) </eviews_equation>
      <python_equation>log(mei) - mei_aerr = y_mei_1 * log(mei(-1)) </python_equation>
      <coeff>
        <cf_name>y_mei(1)</cf_name>
        <cf_value>1.00</cf_value>
      </coeff>
      <rhs_eq_var>mei</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>mep</name>
    <equation_type>Behavioral</equation_type>
    <sector>Financial Sector</sector>
    <definition>Multiplicative discrepancy for the difference between XGDP and XGDO</definition>
    <standard_equation>
      <eviews_equation>log(mep) - mep_aerr = y_mep(1) * log(mep(-1)) </eviews_equation>
      <python_equation>log(mep) - mep_aerr = y_mep_1 * log(mep(-1)) </python_equation>
      <coeff>
        <cf_name>y_mep(1)</cf_name>
        <cf_value>1.00</cf_value>
      </coeff>
      <rhs_eq_var>mep</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>mfpt</name>
    <equation_type>Behavioral</equation_type>
    <sector>Aggregate Output Identities</sector>
    <definition>Multifactor productivity, trend level</definition>
    <standard_equation>
      <eviews_equation>log(mfpt) - mfpt_aerr = y_mfpt(1) + log(mfpt(-1)) + hmfpt/400 </eviews_equation>
      <python_equation>log(mfpt) - mfpt_aerr = y_mfpt_1 + log(mfpt(-1)) + hmfpt/400 </python_equation>
      <coeff>
        <cf_name>y_mfpt(1)</cf_name>
        <cf_value>0.0</cf_value>
      </coeff>
      <rhs_eq_var>hmfpt</rhs_eq_var>
      <rhs_eq_var>mfpt</rhs_eq_var>
    </standard_equation>
    <stochastic_type>ST</stochastic_type>
  </variable>
  <variable>
    <name>n16</name>
    <equation_type>Exogenous</equation_type>
    <definition>Noninstitutional population, aged 16 and over (break adjusted)</definition>
    <exogenous_projection>1</exogenous_projection>
  </variable>
  <variable>
    <name>pbfir</name>
    <equation_type>Behavioral</equation_type>
    <sector>Wages and Prices</sector>
    <definition>Price level of BFI compared to PXP</definition>
    <standard_equation>
      <eviews_equation>log(pbfir) - pbfir_aerr =  log(pbfir(-1)) + pipxnc/400 + dpadj - d(log(pxp), 0, 1)</eviews_equation>
      <python_equation>log(pbfir) - pbfir_aerr =  log(pbfir(-1)) + pipxnc/400 + dpadj - (log(pxp) - (log(pxp(-1))))</python_equation>
      <rhs_eq_var>dpadj</rhs_eq_var>
      <rhs_eq_var>pbfir</rhs_eq_var>
      <rhs_eq_var>pipxnc</rhs_eq_var>
      <rhs_eq_var>pxp</rhs_eq_var>
    </standard_equation>
    <kfcalc>1</kfcalc>
    <stochastic_type>OT</stochastic_type>
  </variable>
  <variable>
    <name>pcdr</name>
    <equation_type>Behavioral</equation_type>
    <sector>Wages and Prices</sector>
    <definition>Price index for consumer durables, cw (relative to to PCNIA)</definition>
    <description>The growth rate of the relative (to PCNIA) price of consumer durable
goods (PCDR) is assumed to follow a first order autoregressive process.
</description>
    <standard_equation>
      <eviews_equation>d(log(pcdr))  - pcdr_aerr =
           y_pcdr(1)
          + y_pcdr(2)*d(log(pcdr(-1)))</eviews_equation>
      <python_equation>(log(pcdr) - (log(pcdr(-1))))  - pcdr_aerr =
           y_pcdr_1
          + y_pcdr_2*(log(pcdr(-1)) - (log(pcdr(-2))))</python_equation>
      <coeff>
        <cf_name>y_pcdr(1)</cf_name>
        <cf_value>-0.003334518696912942</cf_value>
        <t_stat>-6.21336908480081</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_pcdr(2)</cf_name>
        <cf_value>0.5098481943420772</cf_value>
        <t_stat>8.124650601186599</t_stat>
      </coeff>
      <rhs_eq_var>pcdr</rhs_eq_var>
      <estimation_statistics>
        <F_statistic>66.00994739136145</F_statistic>
        <adjusted_r_squared>0.2549310254614942</adjusted_r_squared>
        <date>08/30/18   Time: 10:03 </date>
        <durbin_watson>1.995150313594502</durbin_watson>
        <method>Least Squares</method>
        <prob_F_statistic>5.705791043811285e-14</prob_F_statistic>
        <r_squared>0.2588524411169599</r_squared>
        <sample_end>2017Q4</sample_end>
        <sample_start>1970Q2</sample_start>
        <se_of_regression>0.004525354347700505</se_of_regression>
      </estimation_statistics>
    </standard_equation>
  </variable>
  <variable>
    <name>pcer</name>
    <equation_type>Behavioral</equation_type>
    <sector>Wages and Prices</sector>
    <definition>Price index for personal consumption expenditures on energy (relative to PCXFE)</definition>
    <description>The growth rate of the consumer energy prices (relative to PXCFE) are
assumed to be a fraction of that of oil imports (relative to PCXFE, as well).
</description>
    <standard_equation>
      <eviews_equation>d( log(pcer), 0, 1 )  - pcer_aerr =
           y_pcer(1) * d(log(pmp/pcxfe))</eviews_equation>
      <python_equation>( log(pcer) - ( log(pcer(-1))))  - pcer_aerr =
           y_pcer_1 * (log(pmp/pcxfe) - (log(pmp(-1)/pcxfe(-1))))</python_equation>
      <coeff>
        <cf_name>y_pcer(1)</cf_name>
        <cf_value>0.2488609533651416</cf_value>
        <t_stat>19.3687417670298</t_stat>
      </coeff>
      <rhs_eq_var>pcxfe</rhs_eq_var>
      <rhs_eq_var>pmp</rhs_eq_var>
      <estimation_statistics>
        <adjusted_r_squared>0.6390264852519756</adjusted_r_squared>
        <date>08/30/18   Time: 10:01 </date>
        <durbin_watson>1.958877559688213</durbin_watson>
        <method>Least Squares (Gauss-Newton / Marquardt steps)</method>
        <r_squared>0.6390264852519756</r_squared>
        <sample_end>2017Q4</sample_end>
        <sample_start>1965Q1</sample_start>
        <se_of_regression>0.02491917225605605</se_of_regression>
      </estimation_statistics>
    </standard_equation>
    <kfcalc>0</kfcalc>
    <stochastic_type>PR</stochastic_type>
  </variable>
  <variable>
    <name>pcfr</name>
    <equation_type>Behavioral</equation_type>
    <sector>Wages and Prices</sector>
    <definition>Price index for personal consumption expenditures on food (relative to PCXFE)</definition>
    <description>Growth in relative consumer food prices is modeled using a
simple error-correction specification, where the level of prices
in the long run is equal to an estimated trend, PCFRT, defined
historically by H-P filtering the observed series.

</description>
    <standard_equation>
      <eviews_equation>d( log(pcfr), 0, 1 )   - pcfr_aerr =
           y_pcfr(1) * log(pcfr(-1)/pcfrt(-1))
          + y_pcfr(2)
          + y_pcfr(3) *  d( log(pcfr(-1)), 0, 1 )
          + y_pcfr(4) *  d( log(pcfr(-2)), 0, 1 )
          + y_pcfr(5) *  d( log(pcfr(-3)), 0, 1 )
          + y_pcfr(6) * d( log(pcfrt), 0, 1 )</eviews_equation>
      <python_equation>( log(pcfr) - ( log(pcfr(-1))))   - pcfr_aerr =
           y_pcfr_1 * log(pcfr(-1)/pcfrt(-1))
          + y_pcfr_2
          + y_pcfr_3 *  ( log(pcfr(-1)) - ( log(pcfr(-2))))
          + y_pcfr_4 *  ( log(pcfr(-2)) - ( log(pcfr(-3))))
          + y_pcfr_5 *  ( log(pcfr(-3)) - ( log(pcfr(-4))))
          + y_pcfr_6 * ( log(pcfrt) - ( log(pcfrt(-1))))</python_equation>
      <coeff>
        <cf_name>y_pcfr(1)</cf_name>
        <cf_value>-0.1753151166404203</cf_value>
        <t_stat>-6.407515202419682</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_pcfr(2)</cf_name>
        <cf_value>-5.59454305651988e-05</cf_value>
        <t_stat>-0.1190835368445417</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_pcfr(3)</cf_name>
        <cf_value>0.3855084844618753</cf_value>
        <t_stat>6.133218161450598</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_pcfr(4)</cf_name>
        <cf_value>0.02031018771733943</cf_value>
        <t_stat>0.3014709078795031</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_pcfr(5)</cf_name>
        <cf_value>0.3388841893424357</cf_value>
        <t_stat>5.12176446254809</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_pcfr(6)</cf_name>
        <cf_value>0.3176985579727371</cf_value>
        <t_stat>1.313157636299621</t_stat>
      </coeff>
      <rhs_eq_var>pcfr</rhs_eq_var>
      <rhs_eq_var>pcfrt</rhs_eq_var>
      <estimation_statistics>
        <F_statistic>25.57304467839001</F_statistic>
        <adjusted_r_squared>0.3680084500676164</adjusted_r_squared>
        <date>08/30/18   Time: 10:01 </date>
        <durbin_watson>1.964597509430065</durbin_watson>
        <method>Least Squares (Gauss-Newton / Marquardt steps)</method>
        <prob_F_statistic>4.884156780608893e-20</prob_F_statistic>
        <r_squared>0.3829845531465829</r_squared>
        <sample_end>2017Q4</sample_end>
        <sample_start>1965Q1</sample_start>
        <se_of_regression>0.006836630019194702</se_of_regression>
      </estimation_statistics>
    </standard_equation>
    <kfcalc>1</kfcalc>
    <stochastic_type>PR</stochastic_type>
  </variable>
  <variable>
    <name>pcfrt</name>
    <equation_type>Exogenous</equation_type>
    <definition>Real PCE price of food, trend</definition>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>pchr</name>
    <equation_type>Behavioral</equation_type>
    <sector>Wages and Prices</sector>
    <definition>Price index for housing services, cw (relative to to PCNIA)</definition>
    <description>The growth rate of the relative (to PCNIA) price of housing services
(PCHR) is assumed to follow a first order autoregressive process.
</description>
    <standard_equation>
      <eviews_equation>d(log(pchr))  - pchr_aerr =
           y_pchr(1)
          + y_pchr(2)*d(log(pchr(-1)))</eviews_equation>
      <python_equation>(log(pchr) - (log(pchr(-1))))  - pchr_aerr =
           y_pchr_1
          + y_pchr_2*(log(pchr(-1)) - (log(pchr(-2))))</python_equation>
      <coeff>
        <cf_name>y_pchr(1)</cf_name>
        <cf_value>0.0006138065838894166</cf_value>
        <t_stat>1.897791205363502</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_pchr(2)</cf_name>
        <cf_value>0.5980639856669541</cf_value>
        <t_stat>10.26601235956948</t_stat>
      </coeff>
      <rhs_eq_var>pchr</rhs_eq_var>
      <estimation_statistics>
        <F_statistic>105.3910097668334</F_statistic>
        <adjusted_r_squared>0.3545998563254845</adjusted_r_squared>
        <date>08/30/18   Time: 10:03 </date>
        <durbin_watson>1.989191197272333</durbin_watson>
        <method>Least Squares</method>
        <prob_F_statistic>6.229873200267816e-20</prob_F_statistic>
        <r_squared>0.3579966991869293</r_squared>
        <sample_end>2017Q4</sample_end>
        <sample_start>1970Q2</sample_start>
        <se_of_regression>0.004304736918445813</se_of_regression>
      </estimation_statistics>
    </standard_equation>
  </variable>
  <variable>
    <name>pcnia</name>
    <equation_type>Identity</equation_type>
    <sector>Wages and Prices</sector>
    <definition>Price index for personal consumption expenditures, cw (NIPA definition)</definition>
    <standard_equation>
      <eviews_equation>d( log(pcnia), 0, 1 ) - pcnia_aerr = picnia / 400 </eviews_equation>
      <python_equation>( log(pcnia) - ( log(pcnia(-1)))) - pcnia_aerr = picnia / 400 </python_equation>
      <rhs_eq_var>picnia</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>pcor</name>
    <equation_type>Behavioral</equation_type>
    <sector>Wages and Prices</sector>
    <definition>Price index for non-durable goods and non-housing services, cw (relative to to PCNIA</definition>
    <description>

The relative price of non-durable goods and non-housing services
(PCOR) is approximated by a fixed-weighted aggregation of its components.

</description>
    <standard_equation>
      <eviews_equation>log(pcor)  - pcor_aerr = log(pcor(-1))
          + y_pcor(1)*log(pcdr/pcdr(-1))
          + y_pcor(2)*log(pchr/pchr(-1))</eviews_equation>
      <python_equation>log(pcor)  - pcor_aerr = log(pcor(-1))
          + y_pcor_1*log(pcdr/pcdr(-1))
          + y_pcor_2*log(pchr/pchr(-1))</python_equation>
      <coeff>
        <cf_name>y_pcor(1)</cf_name>
        <cf_value>-0.1436</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_pcor(2)</cf_name>
        <cf_value>-0.217</cf_value>
      </coeff>
      <rhs_eq_var>pcdr</rhs_eq_var>
      <rhs_eq_var>pchr</rhs_eq_var>
      <rhs_eq_var>pcor</rhs_eq_var>
      <estimation_statistics>
        <adjusted_r_squared>0.9999935141056029</adjusted_r_squared>
        <date>08/30/18   Time: 09:59 </date>
        <durbin_watson>2.164395735868182</durbin_watson>
        <method>Least Squares (Gauss-Newton / Marquardt steps)</method>
        <r_squared>0.9999951355792022</r_squared>
        <sample_end>2017Q4</sample_end>
        <sample_start>2016Q4</sample_start>
        <se_of_regression>2.268479028335759e-06</se_of_regression>
      </estimation_statistics>
    </standard_equation>
  </variable>
  <variable>
    <name>pcpi</name>
    <equation_type>Identity</equation_type>
    <sector>Wages and Prices</sector>
    <definition>Consumer price index,total</definition>
    <description> The overall CPI equals the product of the PCE chain-weight
price index and a proportionality factor.  This factor has two
components, one to account for the effect of different weights
on energy in the two price indices, and the other to account
for all other differences.
</description>
    <standard_equation>
      <eviews_equation>pcpi - pcpi_aerr = upcpi * pcnia
	 </eviews_equation>
      <python_equation>pcpi - pcpi_aerr = upcpi * pcnia
	 </python_equation>
      <rhs_eq_var>pcnia</rhs_eq_var>
      <rhs_eq_var>upcpi</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>pcpix</name>
    <equation_type>Identity</equation_type>
    <sector>Wages and Prices</sector>
    <definition>Consumer price index,excluding food and energy</definition>
    <standard_equation>
      <eviews_equation>pcpix - pcpix_aerr = upcpix * pcxfe </eviews_equation>
      <python_equation>pcpix - pcpix_aerr = upcpix * pcxfe </python_equation>
      <rhs_eq_var>pcxfe</rhs_eq_var>
      <rhs_eq_var>upcpix</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>pcstar</name>
    <equation_type>Exogenous</equation_type>
    <definition>Target consumption price level (used in RFFGEN policy rule)</definition>
    <exogenous_projection>1</exogenous_projection>
  </variable>
  <variable>
    <name>pcxfe</name>
    <equation_type>Behavioral</equation_type>
    <sector>Wages and Prices</sector>
    <definition>Price index for personal consumption expendits ex. food and energy, cw (NIPA definit</definition>
    <description>
</description>
    <standard_equation>
      <eviews_equation>d(log(pcxfe), 0, 1) - pcxfe_aerr = picxfe/400 </eviews_equation>
      <python_equation>(log(pcxfe) - (log(pcxfe(-1)))) - pcxfe_aerr = picxfe/400 </python_equation>
      <rhs_eq_var>picxfe</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>pegfr</name>
    <equation_type>Behavioral</equation_type>
    <sector>Government</sector>
    <definition>Price index for federal government expenditures, CW (relative to PXP)</definition>
    <description/>
    <standard_equation>
      <eviews_equation>log(pegfr) - pegfr_aerr - log(pegfr(-1)) =  pipxnc/400
                                         + dpadj - d(log(pxp))
	 </eviews_equation>
      <python_equation>log(pegfr) - pegfr_aerr - log(pegfr(-1)) =  pipxnc/400
                                         + dpadj - (log(pxp) - (log(pxp(-1))))
	 </python_equation>
      <rhs_eq_var>dpadj</rhs_eq_var>
      <rhs_eq_var>pipxnc</rhs_eq_var>
      <rhs_eq_var>pxp</rhs_eq_var>
    </standard_equation>
    <kfcalc>1</kfcalc>
    <stochastic_type>GV</stochastic_type>
  </variable>
  <variable>
    <name>pegsr</name>
    <equation_type>Behavioral</equation_type>
    <sector>Government</sector>
    <definition>Price index for S&amp;L government expenditures, CW (relative to PXP)</definition>
    <description/>
    <standard_equation>
      <eviews_equation>log(pegsr) - pegsr_aerr =  log(pegsr(-1)) + pipxnc/400
                        + dpadj - d(log(pxp))
	 </eviews_equation>
      <python_equation>log(pegsr) - pegsr_aerr =  log(pegsr(-1)) + pipxnc/400
                        + dpadj - (log(pxp) - (log(pxp(-1))))
	 </python_equation>
      <rhs_eq_var>dpadj</rhs_eq_var>
      <rhs_eq_var>pegsr</rhs_eq_var>
      <rhs_eq_var>pipxnc</rhs_eq_var>
      <rhs_eq_var>pxp</rhs_eq_var>
    </standard_equation>
    <kfcalc>1</kfcalc>
    <stochastic_type>GV</stochastic_type>
  </variable>
  <variable>
    <name>pgdp</name>
    <equation_type>Identity</equation_type>
    <sector>Wages and Prices</sector>
    <definition>Price index for GDP, cw</definition>
    <standard_equation>
      <eviews_equation>pgdp - pgdp_aerr = 100*xgdpn/xgdp </eviews_equation>
      <python_equation>pgdp - pgdp_aerr = 100*xgdpn/xgdp </python_equation>
      <rhs_eq_var>xgdp</rhs_eq_var>
      <rhs_eq_var>xgdpn</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>pgfl</name>
    <equation_type>Identity</equation_type>
    <sector>Wages and Prices</sector>
    <definition>Price index for federal government employee compensation, cw</definition>
    <description>The price index for federal employee compensation (PGFL) is
proportional to the economy-wide compensation rate (PL).  They are
linked by the exogenous conversion factor UPGFL.

</description>
    <standard_equation>
      <eviews_equation>log(pgfl) - pgfl_aerr = log(upgfl)+log(pl)-log(lprdt)
	 </eviews_equation>
      <python_equation>log(pgfl) - pgfl_aerr = log(upgfl)+log(pl)-log(lprdt)
	 </python_equation>
      <rhs_eq_var>lprdt</rhs_eq_var>
      <rhs_eq_var>pl</rhs_eq_var>
      <rhs_eq_var>upgfl</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>pgsl</name>
    <equation_type>Identity</equation_type>
    <sector>Wages and Prices</sector>
    <definition>Price index for S&amp;L government employee compensation, cw</definition>
    <description>The price index for federal employee compensation (PGSL) is
proportional to the economy-wide compensation rate (PL).  They are
linked by the exogenous conversion factor UPGSL.
</description>
    <standard_equation>
      <eviews_equation>log(pgsl) - pgsl_aerr = log(upgsl)+log(pl)-log(lprdt)
	 </eviews_equation>
      <python_equation>log(pgsl) - pgsl_aerr = log(upgsl)+log(pl)-log(lprdt)
	 </python_equation>
      <rhs_eq_var>lprdt</rhs_eq_var>
      <rhs_eq_var>pl</rhs_eq_var>
      <rhs_eq_var>upgsl</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>phouse</name>
    <equation_type>Behavioral</equation_type>
    <sector>Financial Sector</sector>
    <definition>Loan Performance House Price Index</definition>
    <description> The price of owner-occupied real estate is modeled in an
error-correction format.  The housing price is proportional
to housing rents (PCHR*PCNIA) in the long run.
</description>
    <standard_equation>
      <eviews_equation>dlog(phouse)  - phouse_aerr =
           y_phouse(1)
          + y_phouse(2)*dlog(phouse(-1))
          + y_phouse(3)*log(phouse(-1)/(pchr(-1)*pcnia(-1)))</eviews_equation>
      <python_equation>(log(phouse) - log(phouse(-1)))  - phouse_aerr =
           y_phouse_1
          + y_phouse_2*(log(phouse(-1)) - log(phouse(-2)))
          + y_phouse_3*log(phouse(-1)/(pchr(-1)*pcnia(-1)))</python_equation>
      <coeff>
        <cf_name>y_phouse(1)</cf_name>
        <cf_value>0.005158779390135185</cf_value>
        <t_stat>3.935165599301115</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_phouse(2)</cf_name>
        <cf_value>0.9018869955145716</cf_value>
        <t_stat>29.95363868812332</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_phouse(3)</cf_name>
        <cf_value>-0.01156922658993683</cf_value>
        <t_stat>-3.56924816554673</t_stat>
      </coeff>
      <rhs_eq_var>pchr</rhs_eq_var>
      <rhs_eq_var>pcnia</rhs_eq_var>
      <rhs_eq_var>phouse</rhs_eq_var>
      <estimation_statistics>
        <F_statistic>481.834390092032</F_statistic>
        <adjusted_r_squared>0.8520380797874416</adjusted_r_squared>
        <date>08/30/18   Time: 10:02 </date>
        <durbin_watson>2.062144629586203</durbin_watson>
        <method>Least Squares</method>
        <prob_F_statistic>1.275522525671469e-69</prob_F_statistic>
        <r_squared>0.8538100788319034</r_squared>
        <sample_end>2017Q4</sample_end>
        <sample_start>1976Q1</sample_start>
        <se_of_regression>0.006604001196849979</se_of_regression>
      </estimation_statistics>
    </standard_equation>
    <kfcalc>1</kfcalc>
    <stochastic_type>FN</stochastic_type>
  </variable>
  <variable>
    <name>phr</name>
    <equation_type>Behavioral</equation_type>
    <sector>Wages and Prices</sector>
    <definition>Price index for residential investment, cw (relative to PXP)</definition>
    <standard_equation>
      <eviews_equation>log(phr) - phr_aerr - log(phr(-1)) = y_phr(1) + pipxnc/400 + dpadj - d(log(pxp), 0, 1) </eviews_equation>
      <python_equation>log(phr) - phr_aerr - log(phr(-1)) = y_phr_1 + pipxnc/400 + dpadj - (log(pxp) - (log(pxp(-1)))) </python_equation>
      <coeff>
        <cf_name>y_phr(1)</cf_name>
        <cf_value>0.0</cf_value>
      </coeff>
      <rhs_eq_var>dpadj</rhs_eq_var>
      <rhs_eq_var>pipxnc</rhs_eq_var>
      <rhs_eq_var>pxp</rhs_eq_var>
    </standard_equation>
    <kfcalc>1</kfcalc>
    <stochastic_type>OT</stochastic_type>
  </variable>
  <variable>
    <name>pic4</name>
    <equation_type>Identity</equation_type>
    <sector>Wages and Prices</sector>
    <definition>Four-quarter percent change in PCE prices</definition>
    <standard_equation>
      <eviews_equation>pic4 - pic4_aerr = 100*(pcnia/pcnia(-4) - 1) </eviews_equation>
      <python_equation>pic4 - pic4_aerr = 100*(pcnia/pcnia(-4) - 1) </python_equation>
      <rhs_eq_var>pcnia</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>picnia</name>
    <equation_type>Behavioral</equation_type>
    <sector>Wages and Prices</sector>
    <definition>Inflation rate, personal consumption expenditures, cw</definition>
    <standard_equation>
      <eviews_equation>picnia  - picnia_aerr = picxfe
          + y_picnia(1)*400*(log(pcer)-log(pcer(-1)))
          + y_picnia(2)*400*(log(pcfr)-log(pcfr(-1)))</eviews_equation>
      <python_equation>picnia  - picnia_aerr = picxfe
          + y_picnia_1*400*(log(pcer)-log(pcer(-1)))
          + y_picnia_2*400*(log(pcfr)-log(pcfr(-1)))</python_equation>
      <coeff>
        <cf_name>y_picnia(1)</cf_name>
        <cf_value>0.0399</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_picnia(2)</cf_name>
        <cf_value>0.0726</cf_value>
      </coeff>
      <rhs_eq_var>pcer</rhs_eq_var>
      <rhs_eq_var>pcfr</rhs_eq_var>
      <rhs_eq_var>picxfe</rhs_eq_var>
      <estimation_statistics>
        <adjusted_r_squared>0.9998459277741218</adjusted_r_squared>
        <date>08/30/18   Time: 09:59 </date>
        <durbin_watson>0.6756632769321184</durbin_watson>
        <method>Least Squares (Gauss-Newton / Marquardt steps)</method>
        <r_squared>0.9998844458305912</r_squared>
        <sample_end>2017Q4</sample_end>
        <sample_start>2016Q4</sample_start>
        <se_of_regression>0.008667770574518556</se_of_regression>
      </estimation_statistics>
    </standard_equation>
  </variable>
  <variable>
    <name>picx4</name>
    <equation_type>Identity</equation_type>
    <sector>Wages and Prices</sector>
    <definition>Four-quarter percent change core in PCE prices</definition>
    <standard_equation>
      <eviews_equation>picx4 - picx4_aerr = 100*(pcxfe/pcxfe(-4) - 1) </eviews_equation>
      <python_equation>picx4 - picx4_aerr = 100*(pcxfe/pcxfe(-4) - 1) </python_equation>
      <rhs_eq_var>pcxfe</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>picxfe</name>
    <equation_type>Behavioral</equation_type>
    <sector>Wages and Prices</sector>
    <definition>Inflation rate, personal consumption expenditures, ex. food and energy, cw</definition>
    <description> This is the main price equation in FRB/US.  Its specification is
based on a variant of the New Keynesian Phillips Curve (NKPC) derived
by Cogley and Sbordonne (2008) for the case in which the subset of
prices that is not optimally reset each period is indexed to either
past or trend price inflation.

(1) &amp;Pi;&lt;sub&gt;t&lt;/sub&gt; = E&lt;sub&gt;t-1&lt;/sub&gt;[&amp;beta;&amp;Pi;&lt;sub&gt;t+1&lt;/sub&gt;
       + &amp;kappa;&amp;mu;&lt;sub&gt;t&lt;/sub&gt;] + &amp;epsilon;&lt;sub&gt;t&lt;/sub&gt;

(2) &amp;Pi;&lt;sub&gt;t&lt;/sub&gt; &amp;equiv; &amp;pi;&lt;sub&gt;t&lt;/sub&gt; -
       &amp;gamma;&amp;pi;^&lt;sub&gt;t&lt;/sub&gt; - (1-&amp;gamma;)&amp;pi;*&lt;sub&gt;t&lt;/sub&gt;

(3) &amp;pi;^&lt;sub&gt;t&lt;/sub&gt;  &amp;equiv; &amp;pi;&lt;sub&gt;t-1&lt;/sub&gt;

 Equation 1 is the basic NKPC expressed in terms of the composite
variable &amp;Pi;, which is defined in equation 2 as the difference
between actual inflation (&amp;pi;) and a weighted average of past (&amp;pi;^)
and trend (&amp;pi;*) inflation.  Expectations are formed on the basis of
"t-1" information, &amp;beta;(=.98) is the discount factor, and &amp;mu; is
the price markup gap.

 Past inflation is measured as the first lag (equation 3).
Trend price inflation is measured using survey data on ten-year
inflation expectations (PTR).  The price markup gap
(log(QPCNIA/PCNIA)) is measured using a set of relationships that, if
linearized, would set it equal to a weighted average of the detrended
labor share in the nonfarm business sector, the relative price of
nonoil imports, and a few additional but minor terms.  For purposes of
simplicity, the markup gap enters as a t-1 observation rather than the
t-1 expectation of the observation in period t.

 The unemployment rate does not directly appear in the structural price
equation.  The sensitivity of price inflation to the unemployment rate
is indirect and operates through the effect that the structural dependence
of wage inflation (PIECI) on labor market conditions has on the expectation
of PICXFE in period t+1 (ZPICXFE).

 The PICXFE equation, which is estimated simultaneously with the
equation for the rate of growth of the ECI measure of hourly
compensation (PIECI), contains two estimated
parameters.  &amp;gamma; is the fraction of non-optimized prices
that is indexed to past inflation, and &amp;kappa; is the
response of inflation to the price markup gap.

More information on the estimation of the price-wage NKPC
equations is available &lt;a href="price_wage_sector_083013.pdf"&gt;here&lt;/a&gt;.

</description>
    <standard_equation>
      <eviews_equation>picxfe - picxfe_aerr = (y_picxfe(1)*picxfe(-1)
                     + y_picxfe(3)*zpicxfe
                     + (1-y_picxfe(3))*(1-y_picxfe(1))*ptr(-1)
                     + y_picxfe(2)*400*log(qpcnia(-1)/pcnia(-1))) / (1+y_picxfe(1)*y_picxfe(3))
</eviews_equation>
      <python_equation>picxfe - picxfe_aerr = (y_picxfe_1*picxfe(-1)
                     + y_picxfe_3*zpicxfe
                     + (1-y_picxfe_3)*(1-y_picxfe_1)*ptr(-1)
                     + y_picxfe_2*400*log(qpcnia(-1)/pcnia(-1))) / (1+y_picxfe_1*y_picxfe_3)
</python_equation>
      <coeff>
        <cf_name>y_picxfe(1)</cf_name>
        <cf_value>0.671147437396</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_picxfe(2)</cf_name>
        <cf_value>0.00191485982247</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_picxfe(3)</cf_name>
        <cf_value>0.98</cf_value>
      </coeff>
      <rhs_eq_var>pcnia</rhs_eq_var>
      <rhs_eq_var>picxfe</rhs_eq_var>
      <rhs_eq_var>ptr</rhs_eq_var>
      <rhs_eq_var>qpcnia</rhs_eq_var>
      <rhs_eq_var>zpicxfe</rhs_eq_var>
      <estimation_statistics>
        <estimation_date>2017</estimation_date>
        <sample_end>-</sample_end>
        <sample_start>1988q1</sample_start>
      </estimation_statistics>
    </standard_equation>
    <kfcalc>1</kfcalc>
    <stochastic_type>PR</stochastic_type>
  </variable>
  <variable>
    <name>pieci</name>
    <equation_type>Behavioral</equation_type>
    <sector>Wages and Prices</sector>
    <definition>Annualized rate of growth of EI hourly compensation</definition>
    <description> This is the main wage equation in FRB/US.  Its specification is
based on a variant of the New Keynesian Phillips Curve (NKPC) derived
by Cogley and Sbordonne (2008) for the case in which the subset of
wages that is not optimally reset each period is indexed to either
past or trend wage inflation.

(1) &amp;Pi;(w)&lt;sub&gt;t&lt;/sub&gt; = E&lt;sub&gt;t-1&lt;/sub&gt;[&amp;beta;&amp;Pi;(w)&lt;sub&gt;t+1&lt;/sub&gt;
       + &amp;kappa;&amp;mu;&lt;sub&gt;t&lt;/sub&gt;] + &amp;epsilon;&lt;sub&gt;t&lt;/sub&gt;

(2) &amp;Pi;(w)&lt;sub&gt;t&lt;/sub&gt; &amp;equiv; &amp;pi;(w)&lt;sub&gt;t&lt;/sub&gt; -
       &amp;gamma;&amp;pi;^(w)&lt;sub&gt;t&lt;/sub&gt; - (1-&amp;gamma;)&amp;pi;*(w)&lt;sub&gt;t&lt;/sub&gt;

(3) &amp;pi;(w)^&lt;sub&gt;t&lt;/sub&gt;  &amp;equiv; .25 &amp;Sum;(i=1,4)&amp;pi;(w)&lt;sub&gt;t-i&lt;/sub&gt;

 Equation 1 is the basic NKPC expressed in terms of the composite
variable &amp;Pi;(w), which is defined in equation 2 as the difference
between actual wage inflation (&amp;pi;(w)) and a weighted average of
past (&amp;pi;^(w)) and trend (&amp;pi;*(w)) wage inflation.  Expectations are
formed on the basis of "t-1" information, &amp;beta;(=.98) is the discount
factor, and &amp;mu; is the wage markup gap.

 Past wage inflation is measured as a four-quarter average
(equation 3).  Trend wage inflation is measured as the sum of survey
data on ten-year consumer price inflation expectations (PTR) and the
FRB/US estimate of the trend rate of growth of labor productivity
(HLPRDT), less the FRB/US estimate of trend rate of growth of the
price of consumption relative to the price of final sales (HUQPCT).
The wage markup gap -- in theory, the difference between the marginal
rate of substitution and the real wage -- is expressed as a function
of the unemployment gap (LUR-LURNAT) and the detrended labor share
(log(PL/QPL)).  For purposes of simplicity, each component of the
markup gap enters as a t-1 observation rather than the t-1 expectation
of the observation in period t. ZPIECI is the expectation of PIECI in
period t+1.

 The PIECI equation, which is estimated simultaneously with the
equation for core PCE price inflation (PICXFE), contains three
estimated parameters: the fraction of non-optimized wages that is
indexed to past inflation (&amp;gamma;); the
coefficient on the detrended labor share; and the
coefficient on the unemployment gap.

More information on the estimation of the price-wage NKPC
equations is available &lt;a href="price_wage_sector_083013.pdf"&gt;here&lt;/a&gt;.

</description>
    <standard_equation>
      <eviews_equation>pieci - pieci_aerr = (.25*y_pieci(1)*((1-y_pieci(4))*(pieci(-1)+pieci(-2)+pieci(-3)) + pieci(-4))
                     + y_pieci(4)*zpieci
                     + (1-y_pieci(4))*(1-y_pieci(1))*(ptr(-1) + hlprdt(-1) - 400*huqpct(-1))
                     + y_pieci(2)*(lur(-1)-lurnat(-1))
                     + y_pieci(3)*400*log(qpl(-1)/pl(-1))) / (1+.25*y_pieci(1)*y_pieci(4))
</eviews_equation>
      <python_equation>pieci - pieci_aerr = (.25*y_pieci_1*((1-y_pieci_4)*(pieci(-1)+pieci(-2)+pieci(-3)) + pieci(-4))
                     + y_pieci_4*zpieci
                     + (1-y_pieci_4)*(1-y_pieci_1)*(ptr(-1) + hlprdt(-1) - 400*huqpct(-1))
                     + y_pieci_2*(lur(-1)-lurnat(-1))
                     + y_pieci_3*400*log(qpl(-1)/pl(-1))) / (1+.25*y_pieci_1*y_pieci_4)
</python_equation>
      <coeff>
        <cf_name>y_pieci(1)</cf_name>
        <cf_value>0.684663089102</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_pieci(2)</cf_name>
        <cf_value>-0.0167232072082</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_pieci(3)</cf_name>
        <cf_value>0.000957429911235</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_pieci(4)</cf_name>
        <cf_value>0.98</cf_value>
      </coeff>
      <rhs_eq_var>hlprdt</rhs_eq_var>
      <rhs_eq_var>huqpct</rhs_eq_var>
      <rhs_eq_var>lur</rhs_eq_var>
      <rhs_eq_var>lurnat</rhs_eq_var>
      <rhs_eq_var>pieci</rhs_eq_var>
      <rhs_eq_var>pl</rhs_eq_var>
      <rhs_eq_var>ptr</rhs_eq_var>
      <rhs_eq_var>qpl</rhs_eq_var>
      <rhs_eq_var>zpieci</rhs_eq_var>
      <estimation_statistics>
        <estimation_date>2017</estimation_date>
        <sample_end>-</sample_end>
        <sample_start>1988q1</sample_start>
      </estimation_statistics>
    </standard_equation>
    <kfcalc>1</kfcalc>
    <stochastic_type>PR</stochastic_type>
  </variable>
  <variable>
    <name>pigdp</name>
    <equation_type>Identity</equation_type>
    <sector>Wages and Prices</sector>
    <definition>Inflation rate, GDP, cw</definition>
    <standard_equation>
      <eviews_equation>pigdp - pigdp_aerr = 400*d( log(pgdp), 0, 1 ) </eviews_equation>
      <python_equation>pigdp - pigdp_aerr = 400*( log(pgdp) - ( log(pgdp(-1)))) </python_equation>
      <rhs_eq_var>pgdp</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>pipl</name>
    <equation_type>Behavioral</equation_type>
    <sector>Wages and Prices</sector>
    <definition>Rate of growth of PL</definition>
    <standard_equation>
      <eviews_equation>pipl - pipl_aerr = pieci </eviews_equation>
      <python_equation>pipl - pipl_aerr = pieci </python_equation>
      <rhs_eq_var>pieci</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>pipxnc</name>
    <equation_type>Behavioral</equation_type>
    <sector>Wages and Prices</sector>
    <definition>Inflation rate, price of adjusted final sales excluding consumption (annual rate)</definition>
    <description>The difference between nonconsumption price inflation (PIPXNC) and
consumption price inflation (PICNIA), adjusted for the trend
difference between the two (1.99*400*HUQPCT), depends on two lags of
itself and the rate of change of the real exchange rate.
</description>
    <standard_equation>
      <eviews_equation>pipxnc - pipxnc_aerr =
          picnia - 1.99 * 400 * huqpct+ y_pipxnc(1) * (pipxnc(-1) - picnia(-1) + 1.99 * 400 *  huqpct(-1))
          + y_pipxnc(2) * (pipxnc(-2) - picnia(-2) + 1.99 * 400 *  huqpct(-2))
          + y_pipxnc(3) * y_pipxnc(4) * 400 * (log(fpxr) - log(fpxr(-1)))+ .025*400*log(qpxnc(-1)/pxnc(-1))
      </eviews_equation>
      <python_equation>pipxnc - pipxnc_aerr =
          picnia - 1.99 * 400 * huqpct+ y_pipxnc_1 * (pipxnc(-1) - picnia(-1) + 1.99 * 400 *  huqpct(-1))
          + y_pipxnc_2 * (pipxnc(-2) - picnia(-2) + 1.99 * 400 *  huqpct(-2))
          + y_pipxnc_3 * y_pipxnc_4 * 400 * (log(fpxr) - log(fpxr(-1)))+ .025*400*log(qpxnc(-1)/pxnc(-1))
      </python_equation>
      <coeff>
        <cf_name>y_pipxnc(1)</cf_name>
        <cf_value>0.462801</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_pipxnc(2)</cf_name>
        <cf_value>0.229745</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_pipxnc(3)</cf_name>
        <cf_value>-0.284477</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_pipxnc(4)</cf_name>
        <cf_value>0.1312355937</cf_value>
      </coeff>
      <rhs_eq_var>fpxr</rhs_eq_var>
      <rhs_eq_var>huqpct</rhs_eq_var>
      <rhs_eq_var>picnia</rhs_eq_var>
      <rhs_eq_var>pipxnc</rhs_eq_var>
      <rhs_eq_var>pxnc</rhs_eq_var>
      <rhs_eq_var>qpxnc</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>pitarg</name>
    <equation_type>Exogenous</equation_type>
    <definition>Target rate of consumption price inflation (used in policy reaction functions)</definition>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>pitrsh</name>
    <equation_type>Exogenous</equation_type>
    <definition>Inflation threshold</definition>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>pkbfir</name>
    <equation_type>Identity</equation_type>
    <sector>Wages and Prices</sector>
    <definition>Ratio of price of BFI stock (KBFI) to PXP</definition>
    <standard_equation>
      <eviews_equation>pkbfir - pkbfir_aerr = upkbfir * pbfir </eviews_equation>
      <python_equation>pkbfir - pkbfir_aerr = upkbfir * pbfir </python_equation>
      <rhs_eq_var>pbfir</rhs_eq_var>
      <rhs_eq_var>upkbfir</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>pkir</name>
    <equation_type>Exogenous</equation_type>
    <definition>Price index for stock of inventories, cw (relative to PXP)</definition>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>pl</name>
    <equation_type>Identity</equation_type>
    <sector>Wages and Prices</sector>
    <definition>Compensation per hour,  business</definition>
    <standard_equation>
      <eviews_equation>log(pl) - pl_aerr = log(pl(-1)) + pipl/400 </eviews_equation>
      <python_equation>log(pl) - pl_aerr = log(pl(-1)) + pipl/400 </python_equation>
      <rhs_eq_var>pipl</rhs_eq_var>
      <rhs_eq_var>pl</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>pmo</name>
    <equation_type>Behavioral</equation_type>
    <sector>Wages and Prices</sector>
    <definition>Price index for imports ex. petroleum, cw</definition>
    <description>The price index for non-petroleum imports (PMO) is modeled using a
Kalman filter specification in which the price level gradually
converges to a steady-state target.  The latter has two elements: a
stochastic random walk (QPMO) and a weighted average of aggregate
foreign and domestic prices.  Empirical work suggests that the
pass-through of changes in the exchange rate (FPX) or foreign prices
(FPC) into dollar-denominated import prices is incomplete.  In
accordance with this evidence, only 64 percent of any
movement in FPC or FPX is allowed to pass through to PMO in the long
run.  This pass-through relationship is defined in relative terms using
the price of US business output, which accounts for the presence of
PXB in the equilibrium formula. The PMO equation also contains the
contemporaneous rates of foreign and domestic price inflation with the
two coefficients restricted to sum to one.

</description>
    <standard_equation>
      <eviews_equation>dlog(pmo)  - pmo_aerr =
           y_pmo(1)
          + y_pmo(2) * (log(qpmo) + .64*log(fpc(-1)/fpx(-1)) + .36*log(pxb(-1)) - log(pmo(-1)))
          + y_pmo(3) * dlog(fpc/fpx) + (1
          -y_pmo(3)) * dlog(pxb)</eviews_equation>
      <python_equation>(log(pmo) - log(pmo(-1)))  - pmo_aerr =
           y_pmo_1
          + y_pmo_2 * (log(qpmo) + .64*log(fpc(-1)/fpx(-1)) + .36*log(pxb(-1)) - log(pmo(-1)))
          + y_pmo_3 * (log(fpc/fpx) - log(fpc(-1)/fpx(-1))) + (1
          -y_pmo_3) * (log(pxb) - log(pxb(-1)))</python_equation>
      <coeff>
        <cf_name>y_pmo(1)</cf_name>
        <cf_value>0.0</cf_value>
        <t_stat>0.00570033516761314</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_pmo(2)</cf_name>
        <cf_value>0.3776815983707077</cf_value>
        <t_stat>6.056507577021148</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_pmo(3)</cf_name>
        <cf_value>0.2343966603329429</cf_value>
        <t_stat>15.62606599938812</t_stat>
      </coeff>
      <rhs_eq_var>fpc</rhs_eq_var>
      <rhs_eq_var>fpx</rhs_eq_var>
      <rhs_eq_var>pmo</rhs_eq_var>
      <rhs_eq_var>pxb</rhs_eq_var>
      <rhs_eq_var>qpmo</rhs_eq_var>
      <estimation_statistics>
        <date>08/30/18   Time: 10:02 </date>
        <method>Maximum likelihood  (BFGS / Marquardt steps)</method>
        <sample_end>2017Q4</sample_end>
        <sample_start>1965Q1</sample_start>
      </estimation_statistics>
    </standard_equation>
    <kfcalc>1</kfcalc>
    <stochastic_type>PR</stochastic_type>
  </variable>
  <variable>
    <name>pmp</name>
    <equation_type>Identity</equation_type>
    <sector>Wages and Prices</sector>
    <definition>Price index for petroleum imports</definition>
    <description>The chain-weight price index for imported petroleum products (PMP)
is proportional to the per barrel price of imported crude oil (POIL).

</description>
    <standard_equation>
      <eviews_equation>pmp - pmp_aerr = upmp*poil </eviews_equation>
      <python_equation>pmp - pmp_aerr = upmp*poil </python_equation>
      <rhs_eq_var>poil</rhs_eq_var>
      <rhs_eq_var>upmp</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>poil</name>
    <equation_type>Identity</equation_type>
    <sector>Wages and Prices</sector>
    <definition>Price of imported oil ($ per barrel)</definition>
    <standard_equation>
      <eviews_equation>poil - poil_aerr = poilr*pxb </eviews_equation>
      <python_equation>poil - poil_aerr = poilr*pxb </python_equation>
      <rhs_eq_var>poilr</rhs_eq_var>
      <rhs_eq_var>pxb</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>poilr</name>
    <equation_type>Behavioral</equation_type>
    <sector>Wages and Prices</sector>
    <definition>Price of imported oil, relative to price index for bus. sector output</definition>
    <description>Real oil prices error-correct to their long-run trend, POILRT.
</description>
    <standard_equation>
      <eviews_equation>dlog(poilr)  - poilr_aerr =
           y_poilr(1) * log(poilr(-1)/poilrt(-1))
          + y_poilr(2)
          + y_poilr(3) * d( log(poilr(-1)), 0, 1 )
          + y_poilr(4) * d( log(poilrt), 0, 1 )</eviews_equation>
      <python_equation>(log(poilr) - log(poilr(-1)))  - poilr_aerr =
           y_poilr_1 * log(poilr(-1)/poilrt(-1))
          + y_poilr_2
          + y_poilr_3 * ( log(poilr(-1)) - ( log(poilr(-2))))
          + y_poilr_4 * ( log(poilrt) - ( log(poilrt(-1))))</python_equation>
      <coeff>
        <cf_name>y_poilr(1)</cf_name>
        <cf_value>-0.2189945671343387</cf_value>
        <t_stat>-6.092084124540779</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_poilr(2)</cf_name>
        <cf_value>-0.007197716577611038</cf_value>
        <t_stat>-0.8680077614487675</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_poilr(3)</cf_name>
        <cf_value>0.3903451978006103</cf_value>
        <t_stat>6.087907897950358</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_poilr(4)</cf_name>
        <cf_value>0.3940619235700209</cf_value>
        <t_stat>1.251637004042893</t_stat>
      </coeff>
      <rhs_eq_var>poilr</rhs_eq_var>
      <rhs_eq_var>poilrt</rhs_eq_var>
      <estimation_statistics>
        <F_statistic>23.64717927531193</F_statistic>
        <adjusted_r_squared>0.243569094640657</adjusted_r_squared>
        <date>08/30/18   Time: 10:00 </date>
        <durbin_watson>1.888420049356177</durbin_watson>
        <method>Least Squares (Gauss-Newton / Marquardt steps)</method>
        <prob_F_statistic>3.283851277644087e-13</prob_F_statistic>
        <r_squared>0.2543240364230174</r_squared>
        <sample_end>2017Q4</sample_end>
        <sample_start>1965Q1</sample_start>
        <se_of_regression>0.1150196236879837</se_of_regression>
      </estimation_statistics>
    </standard_equation>
    <kfcalc>1</kfcalc>
    <stochastic_type>PR</stochastic_type>
  </variable>
  <variable>
    <name>poilrt</name>
    <equation_type>Exogenous</equation_type>
    <definition>Price of imported oil, relative to price index for bus. sector output, trend</definition>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>ptr</name>
    <equation_type>Behavioral</equation_type>
    <sector>Expectations</sector>
    <definition>10-year expected PCE price inflation (Survey of Professional Forecasters)</definition>
    <description>PTR gradually adjusts toward a weighted average of actual and
target inflation.

Historical values of PTR come from several sources.  Since 1991q4,
the source is the Survey of Professional Forecasters (SPF), first for
expected CPI inflation and then, when it becomes available in 2007,
for expected PCE price inflation. PTR data from 1981q1 to 1991q3 is
primarily from a survey conducted by Richard Hoey.  The Hoey and SPF
CPI observations are reduced by 40 basis to account for the average
difference between CPI and PCE inflation. Values of PTR before
1981 are constructed in a manner similar to the one described in
Kozicki and Tinsley (2001, section 3.3), "Term Structure Views of
Monetary Policy under Alternative Models of Agent Expectations,"
Journal of Economic Dynamics and Control, 25: 149-184.
</description>
    <standard_equation>
      <eviews_equation>ptr - ptr_aerr = y_ptr(1)*ptr(-1) + y_ptr(2)*picxfe(-1)+ y_ptr(3)*pitarg(-1) </eviews_equation>
      <python_equation>ptr - ptr_aerr = y_ptr_1*ptr(-1) + y_ptr_2*picxfe(-1)+ y_ptr_3*pitarg(-1) </python_equation>
      <coeff>
        <cf_name>y_ptr(1)</cf_name>
        <cf_value>0.9</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_ptr(2)</cf_name>
        <cf_value>0.05</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_ptr(3)</cf_name>
        <cf_value>0.05</cf_value>
      </coeff>
      <rhs_eq_var>picxfe</rhs_eq_var>
      <rhs_eq_var>pitarg</rhs_eq_var>
      <rhs_eq_var>ptr</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>pwstar</name>
    <equation_type>Exogenous</equation_type>
    <definition>Equilibrium business price markup</definition>
    <description> PWSTAR, which is the nonstationary component of the inverse of the
log labor share in the adjusted nonfarm business sector, is estimated
historically as a one-sided HP filter (lambda = 80000) of
log(PXG*LPRDT/PL). </description>
    <exogenous_projection>8</exogenous_projection>
  </variable>
  <variable>
    <name>pxb</name>
    <equation_type>Identity</equation_type>
    <sector>Wages and Prices</sector>
    <definition>Price index for business output</definition>
    <standard_equation>
      <eviews_equation>pxb - pxb_aerr = upxb*pgdp </eviews_equation>
      <python_equation>pxb - pxb_aerr = upxb*pgdp </python_equation>
      <rhs_eq_var>pgdp</rhs_eq_var>
      <rhs_eq_var>upxb</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>pxnc</name>
    <equation_type>Behavioral</equation_type>
    <sector>Wages and Prices</sector>
    <definition>Price of adjusted final sales excluding consumption</definition>
    <standard_equation>
      <eviews_equation>d( log(pxnc), 0, 1 ) - pxnc_aerr = pipxnc/400 </eviews_equation>
      <python_equation>( log(pxnc) - ( log(pxnc(-1)))) - pxnc_aerr = pipxnc/400 </python_equation>
      <rhs_eq_var>pipxnc</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>pxp</name>
    <equation_type>Behavioral</equation_type>
    <sector>Wages and Prices</sector>
    <definition>Price index for final sales plus imports less gov. labor</definition>
    <standard_equation>
      <eviews_equation>log(pxp)   - pxp_aerr = log(pxp(-1))
          +y_pxp(1)*log(pcnia/pcnia(-1))
          +y_pxp(2)*log(pxnc/pxnc(-1))</eviews_equation>
      <python_equation>log(pxp)   - pxp_aerr = log(pxp(-1))
          +y_pxp_1*log(pcnia/pcnia(-1))
          +y_pxp_2*log(pxnc/pxnc(-1))</python_equation>
      <coeff>
        <cf_name>y_pxp(1)</cf_name>
        <cf_value>0.6469</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_pxp(2)</cf_name>
        <cf_value>0.3531</cf_value>
      </coeff>
      <rhs_eq_var>pcnia</rhs_eq_var>
      <rhs_eq_var>pxnc</rhs_eq_var>
      <rhs_eq_var>pxp</rhs_eq_var>
      <estimation_statistics>
        <adjusted_r_squared>0.9999998397340336</adjusted_r_squared>
        <date>08/30/18   Time: 09:58 </date>
        <durbin_watson>1.511393471878079</durbin_watson>
        <method>Least Squares (Gauss-Newton / Marquardt steps)</method>
        <r_squared>0.9999998798005252</r_squared>
        <sample_end>2017Q4</sample_end>
        <sample_start>2016Q4</sample_start>
        <se_of_regression>3.135921495759801e-06</se_of_regression>
      </estimation_statistics>
    </standard_equation>
  </variable>
  <variable>
    <name>pxr</name>
    <equation_type>Behavioral</equation_type>
    <sector>Wages and Prices</sector>
    <definition>Price index for exports, cw (relative to PXP)</definition>
    <standard_equation>
      <eviews_equation>log(pxr) - pxr_aerr - log(pxr(-1)) = y_pxr(1) + pipxnc/400 + dpadj - d(log(pxp), 0, 1) </eviews_equation>
      <python_equation>log(pxr) - pxr_aerr - log(pxr(-1)) = y_pxr_1 + pipxnc/400 + dpadj - (log(pxp) - (log(pxp(-1)))) </python_equation>
      <coeff>
        <cf_name>y_pxr(1)</cf_name>
        <cf_value>0.0</cf_value>
      </coeff>
      <rhs_eq_var>dpadj</rhs_eq_var>
      <rhs_eq_var>pipxnc</rhs_eq_var>
      <rhs_eq_var>pxp</rhs_eq_var>
    </standard_equation>
    <kfcalc>1</kfcalc>
    <stochastic_type>OT</stochastic_type>
  </variable>
  <variable>
    <name>qebfi</name>
    <equation_type>Identity</equation_type>
    <sector>Business Expenditures</sector>
    <definition>Desired level of investment in business investment</definition>
    <description>The target rate of investment is defined as the rate necessary to
keep the capital-output ratio at its optimal value (VBFI).
</description>
    <standard_equation>
      <eviews_equation>qebfi - qebfi_aerr = xb*vbfi*(hxbt/100 -.01*hgpbfir+jrbfi)</eviews_equation>
      <python_equation>qebfi - qebfi_aerr = xb*vbfi*(hxbt/100 -.01*hgpbfir+jrbfi)</python_equation>
      <rhs_eq_var>hgpbfir</rhs_eq_var>
      <rhs_eq_var>hxbt</rhs_eq_var>
      <rhs_eq_var>jrbfi</rhs_eq_var>
      <rhs_eq_var>vbfi</rhs_eq_var>
      <rhs_eq_var>xb</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>qec</name>
    <equation_type>Identity</equation_type>
    <sector>Household Expenditures</sector>
    <definition>Desired level of consumption (FRBUS definition)</definition>
    <description>QEC is the desired level of spending associated with consumption of
nondurable goods and services plus the imputed service flow from the
stock of durables (EC). The estimated coefficient values and equation statistics come from
a cointegrating regression of EC on the set of explanatory variables.
QEC is measured historically as the fitted values of this regression.

</description>
    <standard_equation>
      <eviews_equation>log(qec)  - qec_aerr =
           y_qec(1)
          + y_qec(2)*log(zyh-zyht-zyhp)
          + y_qec(3)*log(zyht) + (1
          -y_qec(2)
          -y_qec(3)
          -y_qec(4))*log(zyhp)
          + y_qec(4)*log(wpo+wps)</eviews_equation>
      <python_equation>log(qec)  - qec_aerr =
           y_qec_1
          + y_qec_2*log(zyh-zyht-zyhp)
          + y_qec_3*log(zyht) + (1
          -y_qec_2
          -y_qec_3
          -y_qec_4)*log(zyhp)
          + y_qec_4*log(wpo+wps)</python_equation>
      <coeff>
        <cf_name>y_qec(1)</cf_name>
        <cf_value>0.3653279067017037</cf_value>
        <t_stat>9.770628366419192</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_qec(2)</cf_name>
        <cf_value>0.493602432836492</cf_value>
        <t_stat>31.91994930540975</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_qec(3)</cf_name>
        <cf_value>0.1858248429134642</cf_value>
        <t_stat>27.65659022873051</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_qec(4)</cf_name>
        <cf_value>0.1873934907158843</cf_value>
        <t_stat>16.46072326015892</t_stat>
      </coeff>
      <rhs_eq_var>wpo</rhs_eq_var>
      <rhs_eq_var>wps</rhs_eq_var>
      <rhs_eq_var>zyh</rhs_eq_var>
      <rhs_eq_var>zyhp</rhs_eq_var>
      <rhs_eq_var>zyht</rhs_eq_var>
      <estimation_statistics>
        <F_statistic>87425.30768086495</F_statistic>
        <adjusted_r_squared>0.9992304026698688</adjusted_r_squared>
        <date>08/30/18   Time: 09:58 </date>
        <durbin_watson>0.1755915855180969</durbin_watson>
        <method>Least Squares (Gauss-Newton / Marquardt steps)</method>
        <prob_F_statistic>0</prob_F_statistic>
        <r_squared>0.9992418323331876</r_squared>
        <sample_end>2017Q4</sample_end>
        <sample_start>1967Q2</sample_start>
        <se_of_regression>0.01268295053665157</se_of_regression>
      </estimation_statistics>
    </standard_equation>
  </variable>
  <variable>
    <name>qecd</name>
    <equation_type>Identity</equation_type>
    <sector>Household Expenditures</sector>
    <definition>Target level of consumption of durable goods, trending component</definition>
    <description>The ratio of the target level of spending on consumer durable goods
to the target level of overall consumption depends on two factors.
The first factor is the relative rental rate, which is the product of
the relative purchase price of consumer durables, PCDR, and the real
financial cost of capital (plus depreciation) for such goods, RCCD.
The relative rental rate is associated with the steady-state condition
for the stock of consumer durables.  The second factor converts the
steady-state stock condition to one for gross investment by multiplying
the stock condition by the sum of two factors -- the depreciation rate
for durable goods, and the steady-state growth rate of the target
capital stock.  The latter factor equals the sum of trend output
growth (HGGDPT) and the trend rate of decline in the relative price of
consumer durable goods (HGPCDR, weighted by the real rental rate
elasticity).

The coefficients values and equation statistics come from a
cointegrating regression in which actual investment (ECD) replaces
target investment (QECD) as the dependent variable.
</description>
    <standard_equation>
      <eviews_equation>qecd  - qecd_aerr = qec*(jrcd/4 + (hggdpt+hggdpt(-1)+hggdpt(-2)+hggdpt(-3)+hggdpt(-4)+hggdpt(-5)+hggdpt(-6)+hggdpt(-7)) /8 / 400
          + y_qecd(1)*hgpcdr/400)*exp
          (y_qecd(2)
          + y_qecd(3)*(log(pcdr) + log(rccd)))</eviews_equation>
      <python_equation>qecd  - qecd_aerr = qec*(jrcd/4 + (hggdpt+hggdpt(-1)+hggdpt(-2)+hggdpt(-3)+hggdpt(-4)+hggdpt(-5)+hggdpt(-6)+hggdpt(-7)) /8 / 400
          + y_qecd_1*hgpcdr/400)*exp
          (y_qecd_2
          + y_qecd_3*(log(pcdr) + log(rccd)))</python_equation>
      <coeff>
        <cf_name>y_qecd(1)</cf_name>
        <cf_value>-0.5843539676290892</cf_value>
        <t_stat>-67.29278199675044</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_qecd(2)</cf_name>
        <cf_value>2.4132166616749</cf_value>
        <t_stat>74.46889604283302</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_qecd(3)</cf_name>
        <cf_value>-0.5843539676290892</cf_value>
      </coeff>
      <rhs_eq_var>hggdpt</rhs_eq_var>
      <rhs_eq_var>hgpcdr</rhs_eq_var>
      <rhs_eq_var>jrcd</rhs_eq_var>
      <rhs_eq_var>pcdr</rhs_eq_var>
      <rhs_eq_var>qec</rhs_eq_var>
      <rhs_eq_var>rccd</rhs_eq_var>
      <estimation_statistics>
        <F_statistic>5502.542407933025</F_statistic>
        <adjusted_r_squared>0.9659382748639029</adjusted_r_squared>
        <date>08/30/18   Time: 10:02 </date>
        <durbin_watson>0.2486800296054228</durbin_watson>
        <method>Least Squares (Gauss-Newton / Marquardt steps)</method>
        <prob_F_statistic>8.187489598949724e-144</prob_F_statistic>
        <r_squared>0.9661138507666662</r_squared>
        <sample_end>2017Q4</sample_end>
        <sample_start>1969Q2</sample_start>
        <se_of_regression>0.05446736848378917</se_of_regression>
      </estimation_statistics>
    </standard_equation>
  </variable>
  <variable>
    <name>qeco</name>
    <equation_type>Identity</equation_type>
    <sector>Household Expenditures</sector>
    <definition>Desired level of consumption of nondurable goods and nonhousing services</definition>
    <description>The elasticity of the desired level of consumption on nondurable
goods and non-housing services is one with respect to the
desired level of overall consumption and minus one with respect to the
relative price (PCOR) of consumption on nondurable goods and
non-housing services to overall consumption.  A constant term ensures
that historically the average log difference between ECO and QECO is
zero.
</description>
    <standard_equation>
      <eviews_equation>log(qeco)  - qeco_aerr =
           y_qeco(1) + log(qec) - log(pcor)</eviews_equation>
      <python_equation>log(qeco)  - qeco_aerr =
           y_qeco_1 + log(qec) - log(pcor)</python_equation>
      <coeff>
        <cf_name>y_qeco(1)</cf_name>
        <cf_value>-0.3258628580621771</cf_value>
        <t_stat>-322.5042869083098</t_stat>
      </coeff>
      <rhs_eq_var>pcor</rhs_eq_var>
      <rhs_eq_var>qec</rhs_eq_var>
      <estimation_statistics>
        <adjusted_r_squared>0.9988542660886428</adjusted_r_squared>
        <date>08/30/18   Time: 10:02 </date>
        <durbin_watson>0.174035161519942</durbin_watson>
        <method>Least Squares (Gauss-Newton / Marquardt steps)</method>
        <r_squared>0.9988542660886428</r_squared>
        <sample_end>2017Q4</sample_end>
        <sample_start>1965Q3</sample_start>
        <se_of_regression>0.01464229046081368</se_of_regression>
      </estimation_statistics>
    </standard_equation>
  </variable>
  <variable>
    <name>qeh</name>
    <equation_type>Identity</equation_type>
    <sector>Household Expenditures</sector>
    <definition>Target level of residential investment</definition>
    <description>The ratio of the target level of residential investment to the
target level of overall consumption depends on two factors.  The first
factor is the relative rental rate, which is the product of the
relative purchase price of residential investment, PHR*PXP/PCNIA, and the
real financial cost of capital (plus depreciation) for such goods,
RCCH.  The relative rental rate is associated with the steady-state
condition for the stock of housing.  The second factor converts the
steady-state stock condition to one for gross investment by multiplying
the stock condition by the sum of two terms -- the depreciation rate
for residential structures, and the steady-state growth rate of the
target capital stock.  The latter term equals trend output growth
(HGGDPT).  (Note: unlike consumer durables, no adjustment is made to
the steady-state growth of the target stock to control for trend
movements in the relative price of housing construction, because the
relative price does not show a pronounced trend.)

The coefficients values and equation statistics come from a
cointegrating regression in which actual residential investment (EH) replaces
target investment (QEH) as the dependent variable.

</description>
    <standard_equation>
      <eviews_equation>qeh  - qeh_aerr = qec
      * (jrh/4 +
      ((hggdpt+hggdpt(-1)+hggdpt(-2)+hggdpt(-3)+hggdpt(-4)+hggdpt(-5)+hggdpt(-6)+hggdpt(-7)+hggdpt(-8)+hggdpt(-9)+hggdpt(-10)+hggdpt(-11)+hggdpt(-12)+hggdpt(-13)+hggdpt(-14)+hggdpt(-15)) /16) / 400)
      * exp
          (y_qeh(1) - log(phr*pxp/pcnia)
          + y_qeh(2)*log(rcch))</eviews_equation>
      <python_equation>qeh  - qeh_aerr = qec
      * (jrh/4 +
      ((hggdpt+hggdpt(-1)+hggdpt(-2)+hggdpt(-3)+hggdpt(-4)+hggdpt(-5)+hggdpt(-6)+hggdpt(-7)+hggdpt(-8)+hggdpt(-9)+hggdpt(-10)+hggdpt(-11)+hggdpt(-12)+hggdpt(-13)+hggdpt(-14)+hggdpt(-15)) /16) / 400)
      * exp
          (y_qeh_1 - log(phr*pxp/pcnia)
          + y_qeh_2*log(rcch))</python_equation>
      <coeff>
        <cf_name>y_qeh(1)</cf_name>
        <cf_value>1.909300384501687</cf_value>
        <t_stat>NA</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_qeh(2)</cf_name>
        <cf_value>-0.1168105360328174</cf_value>
        <t_stat>NA</t_stat>
      </coeff>
      <rhs_eq_var>hggdpt</rhs_eq_var>
      <rhs_eq_var>jrh</rhs_eq_var>
      <rhs_eq_var>pcnia</rhs_eq_var>
      <rhs_eq_var>phr</rhs_eq_var>
      <rhs_eq_var>pxp</rhs_eq_var>
      <rhs_eq_var>qec</rhs_eq_var>
      <rhs_eq_var>rcch</rhs_eq_var>
      <estimation_statistics>
        <adjusted_r_squared>1</adjusted_r_squared>
        <date>08/30/18   Time: 10:02 </date>
        <method>Least Squares (Gauss-Newton / Marquardt steps)</method>
        <r_squared>1</r_squared>
        <sample_end>2017Q4</sample_end>
        <sample_start>1964Q1</sample_start>
        <se_of_regression>0</se_of_regression>
      </estimation_statistics>
    </standard_equation>
  </variable>
  <variable>
    <name>qkir</name>
    <equation_type>Behavioral</equation_type>
    <sector>Business Expenditures</sector>
    <definition>Desired Inventory Sales Ratio</definition>
    <description>The target inventory-sales ratio is estimated along with the
equation for the stock of inventories (KI) using the Kalman filter.
To ensure that long-run simulations are characterized by balanced
growth, exogenous variable DGLPRD can be set to 1.0 to make the target
inventory-sales ratio constant.

</description>
    <standard_equation>
      <eviews_equation>log(qkir) - qkir_aerr = (1-dglprd)*y_qkir(1) + log(qkir(-1)) </eviews_equation>
      <python_equation>log(qkir) - qkir_aerr = (1-dglprd)*y_qkir_1 + log(qkir(-1)) </python_equation>
      <coeff>
        <cf_name>y_qkir(1)</cf_name>
        <cf_value>-0.001885366737710053</cf_value>
      </coeff>
      <rhs_eq_var>dglprd</rhs_eq_var>
      <rhs_eq_var>qkir</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>qleor</name>
    <equation_type>Exogenous</equation_type>
    <definition>Desired ratio of employment discrepancy to the labor force</definition>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>qlf</name>
    <equation_type>Identity</equation_type>
    <sector>Labor Market</sector>
    <definition>Desired level of civilian labor force</definition>
    <description>The trend labor force is equal to the product of the trend
participation rate and the size of the population age 16 and up.

</description>
    <standard_equation>
      <eviews_equation>qlf - qlf_aerr = qlfpr * n16 </eviews_equation>
      <python_equation>qlf - qlf_aerr = qlfpr * n16 </python_equation>
      <rhs_eq_var>n16</rhs_eq_var>
      <rhs_eq_var>qlfpr</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>qlfpr</name>
    <equation_type>Identity</equation_type>
    <sector>Labor Market</sector>
    <definition>Trend labor force participation rate</definition>
    <description> The trend participation rate follows a random walk with time-varying
drift.
</description>
    <standard_equation>
      <eviews_equation>qlfpr - qlfpr_aerr = qlfpr(-1) + hqlfpr </eviews_equation>
      <python_equation>qlfpr - qlfpr_aerr = qlfpr(-1) + hqlfpr </python_equation>
      <rhs_eq_var>hqlfpr</rhs_eq_var>
      <rhs_eq_var>qlfpr</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>qlhp</name>
    <equation_type>Identity</equation_type>
    <sector>Labor Market</sector>
    <definition>Desired level of  business labor hours</definition>
    <description>The desired level of aggregate hours equals business sector output (XB)
divided by trend labor productivity (LPRDT).

</description>
    <standard_equation>
      <eviews_equation>qlhp - qlhp_aerr = xbo/lprdt </eviews_equation>
      <python_equation>qlhp - qlhp_aerr = xbo/lprdt </python_equation>
      <rhs_eq_var>lprdt</rhs_eq_var>
      <rhs_eq_var>xbo</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>qlww</name>
    <equation_type>Identity</equation_type>
    <sector>Labor Market</sector>
    <definition>Trend workweek,  business sector (employee and  self-employed)</definition>
    <description>The trend workweek is a random walk with drift.
</description>
    <standard_equation>
      <eviews_equation>log(qlww) - qlww_aerr = log(qlww(-1)) + hqlww(-1)/400 </eviews_equation>
      <python_equation>log(qlww) - qlww_aerr = log(qlww(-1)) + hqlww(-1)/400 </python_equation>
      <rhs_eq_var>hqlww</rhs_eq_var>
      <rhs_eq_var>qlww</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>qpcnia</name>
    <equation_type>Identity</equation_type>
    <sector>Wages and Prices</sector>
    <definition>Desired level of consumption price</definition>
    <standard_equation>
      <eviews_equation>log(qpcnia) - qpcnia_aerr = log(qpxp) + log(uqpct) </eviews_equation>
      <python_equation>log(qpcnia) - qpcnia_aerr = log(qpxp) + log(uqpct) </python_equation>
      <rhs_eq_var>qpxp</rhs_eq_var>
      <rhs_eq_var>uqpct</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>qpl</name>
    <equation_type>Identity</equation_type>
    <sector>Wages and Prices</sector>
    <definition>Desired level of compensation per hour, trending component</definition>
    <description>The target level of hourly compensation (QPL) is defined by a
condition that is just a rearrangement of the relationship used to
define the target price level (QPXB).  As a result, the percentage
wage gap, log(PL/QPL), is the negative of the percentage price gap,
log(PXB/QPXB), and both measure the deviation of the labor share
(inverse price markup) in the adjusted nonfarm business sector from
its long-run equilibrium.
</description>
    <standard_equation>
      <eviews_equation>log(qpl) - qpl_aerr = log(pl) + y_qpl(1) * log(pxb/qpxb) </eviews_equation>
      <python_equation>log(qpl) - qpl_aerr = log(pl) + y_qpl_1 * log(pxb/qpxb) </python_equation>
      <coeff>
        <cf_name>y_qpl(1)</cf_name>
        <cf_value>1.0</cf_value>
      </coeff>
      <rhs_eq_var>pl</rhs_eq_var>
      <rhs_eq_var>pxb</rhs_eq_var>
      <rhs_eq_var>qpxb</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>qpmo</name>
    <equation_type>Behavioral</equation_type>
    <sector>Wages and Prices</sector>
    <definition>Random walk component of non-oil import prices</definition>
    <description>

In the long run, the level of non-oil import prices is determined
by two factors -- a weighted average of foreign consumer prices
expressed in dollars and domestic output prices; and a stochastic
trend component that takes account of permanent movements in the
relative price of imported goods with respect to the prices of both
foreign consumption and domestic output.  The stochastic trend
component, QPMO, is a random walk with drift and is derived from
Kalman filter estimation of the non-oil import price (PMO) equation.

</description>
    <standard_equation>
      <eviews_equation>log(qpmo) - qpmo_aerr = log(qpmo(-1)) + y_qpmo(1) </eviews_equation>
      <python_equation>log(qpmo) - qpmo_aerr = log(qpmo(-1)) + y_qpmo_1 </python_equation>
      <coeff>
        <cf_name>y_qpmo(1)</cf_name>
        <cf_value>-.003347</cf_value>
      </coeff>
      <rhs_eq_var>qpmo</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>qpxb</name>
    <equation_type>Identity</equation_type>
    <sector>Wages and Prices</sector>
    <definition>Desired price level of private output ex. energy, housing, and farm</definition>
    <description>Given the levels of hourly compensation (PL) and trend labor
productivity (LRPDT) in the nonfarm business sector, QPXB is
the level of that sector's price that would set the price markup
(inverse labor share) equal to its equilibrium (PWSTAR).

</description>
    <standard_equation>
      <eviews_equation>log(qpxb) - qpxb_aerr = log(pwstar) + y_qpxb(1) + y_qpxb(2)*log(pl/lprdt) </eviews_equation>
      <python_equation>log(qpxb) - qpxb_aerr = log(pwstar) + y_qpxb_1 + y_qpxb_2*log(pl/lprdt) </python_equation>
      <coeff>
        <cf_name>y_qpxb(1)</cf_name>
        <cf_value>0.0</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_qpxb(2)</cf_name>
        <cf_value>1</cf_value>
      </coeff>
      <rhs_eq_var>lprdt</rhs_eq_var>
      <rhs_eq_var>pl</rhs_eq_var>
      <rhs_eq_var>pwstar</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>qpxnc</name>
    <equation_type>Identity</equation_type>
    <sector>Wages and Prices</sector>
    <definition>Desired level of nonconsumption price</definition>
    <standard_equation>
      <eviews_equation>log(qpxnc) - qpxnc_aerr = log(pxnc)
                        + y_qpxnc(1) * log(qpxp/pxp)
                        + y_qpxnc(2) * log(qpcnia/pcnia)
</eviews_equation>
      <python_equation>log(qpxnc) - qpxnc_aerr = log(pxnc)
                        + y_qpxnc_1 * log(qpxp/pxp)
                        + y_qpxnc_2 * log(qpcnia/pcnia)
</python_equation>
      <coeff>
        <cf_name>y_qpxnc(1)</cf_name>
        <cf_value>2.98507462687</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_qpxnc(2)</cf_name>
        <cf_value>-1.98507462687</cf_value>
      </coeff>
      <rhs_eq_var>pcnia</rhs_eq_var>
      <rhs_eq_var>pxnc</rhs_eq_var>
      <rhs_eq_var>pxp</rhs_eq_var>
      <rhs_eq_var>qpcnia</rhs_eq_var>
      <rhs_eq_var>qpxp</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>qpxp</name>
    <equation_type>Identity</equation_type>
    <sector>Wages and Prices</sector>
    <definition>Desired price level of adjusted final sales</definition>
    <description/>
    <standard_equation>
      <eviews_equation>qpxp - qpxp_aerr = 100*(xpn + (.01*qpxb*xb-xbn))/xp </eviews_equation>
      <python_equation>qpxp - qpxp_aerr = 100*(xpn + (.01*qpxb*xb-xbn))/xp </python_equation>
      <rhs_eq_var>qpxb</rhs_eq_var>
      <rhs_eq_var>xb</rhs_eq_var>
      <rhs_eq_var>xbn</rhs_eq_var>
      <rhs_eq_var>xp</rhs_eq_var>
      <rhs_eq_var>xpn</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>qynidn</name>
    <equation_type>Identity</equation_type>
    <sector>Nominal Income</sector>
    <definition>Desired level of dividends</definition>
    <description>The desired level of dividends is a constant fraction of after-tax
corporate profits, with a shift in the desired fraction starting in
1980.  Coefficient values are taken from a regression of the log of
the actual ratio of dividends to after-tax profits on the explanatory
variables.  A max function is used to prevent simulation problems
arising from attempts to take the log of a negative number.
</description>
    <standard_equation>
      <eviews_equation>log(qynidn)   - qynidn_aerr =
           y_qynidn(1)
          + y_qynidn(2)*d79a
          + y_qynidn(3)*log((@recode((ynicpn-tcin)&gt;(.01),ynicpn-tcin,.01)))</eviews_equation>
      <python_equation>log(qynidn)   - qynidn_aerr =
           y_qynidn_1
          + y_qynidn_2*d79a
          + y_qynidn_3*log((max((ynicpn-tcin),(.01))))</python_equation>
      <coeff>
        <cf_name>y_qynidn(1)</cf_name>
        <cf_value>-0.9155533588082586</cf_value>
        <t_stat>-46.07889399573773</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_qynidn(2)</cf_name>
        <cf_value>0.3548225925232601</cf_value>
        <t_stat>15.15689413622798</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_qynidn(3)</cf_name>
        <cf_value>1</cf_value>
      </coeff>
      <rhs_eq_var>d79a</rhs_eq_var>
      <rhs_eq_var>tcin</rhs_eq_var>
      <rhs_eq_var>ynicpn</rhs_eq_var>
      <estimation_statistics>
        <F_statistic>229.7314398568205</F_statistic>
        <adjusted_r_squared>0.5213472732464004</adjusted_r_squared>
        <date>08/30/18   Time: 10:03 </date>
        <durbin_watson>0.2032855651222054</durbin_watson>
        <method>Least Squares (Gauss-Newton / Marquardt steps)</method>
        <prob_F_statistic>1.68073934433181e-35</prob_F_statistic>
        <r_squared>0.5236265719452271</r_squared>
        <sample_end>2017Q4</sample_end>
        <sample_start>1965Q2</sample_start>
        <se_of_regression>0.152618654206574</se_of_regression>
      </estimation_statistics>
    </standard_equation>
  </variable>
  <variable>
    <name>rbbb</name>
    <equation_type>Identity</equation_type>
    <sector>Financial Sector</sector>
    <definition>S&amp;P BBB corporate bond rate</definition>
    <standard_equation>
      <eviews_equation>rbbb - rbbb_aerr = rbbbp + rg10 </eviews_equation>
      <python_equation>rbbb - rbbb_aerr = rbbbp + rg10 </python_equation>
      <rhs_eq_var>rbbbp</rhs_eq_var>
      <rhs_eq_var>rg10</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>rbbbp</name>
    <equation_type>Behavioral</equation_type>
    <sector>Financial Sector</sector>
    <definition>S&amp;P BBB corporate bond rate, risk/term premium</definition>
    <description/>
    <standard_equation>
      <eviews_equation>rbbbp  - rbbbp_aerr =
           y_rbbbp(1)
          + y_rbbbp(2)*zgap10
          + y_rbbbp(3)*( rbbbp(-1)
          - y_rbbbp(1)
          - y_rbbbp(2)*zgap10(-1))</eviews_equation>
      <python_equation>rbbbp  - rbbbp_aerr =
           y_rbbbp_1
          + y_rbbbp_2*zgap10
          + y_rbbbp_3*( rbbbp(-1)
          - y_rbbbp_1
          - y_rbbbp_2*zgap10(-1))</python_equation>
      <coeff>
        <cf_name>y_rbbbp(1)</cf_name>
        <cf_value>1.972218</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_rbbbp(2)</cf_name>
        <cf_value>-0.189051</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_rbbbp(3)</cf_name>
        <cf_value>0.848879</cf_value>
      </coeff>
      <rhs_eq_var>rbbbp</rhs_eq_var>
      <rhs_eq_var>zgap10</rhs_eq_var>
      <estimation_statistics/>
    </standard_equation>
    <kfcalc>1</kfcalc>
    <stochastic_type>FN</stochastic_type>
  </variable>
  <variable>
    <name>rbfi</name>
    <equation_type>Identity</equation_type>
    <sector>Business Expenditures</sector>
    <definition>After-tax real financial cost of capital for business investment</definition>
    <description>The firm's financing cost is measured as a weighted average of
borrowing costs in debt and equity markets. The cost of debt finance is proxied by the yield on 5-year Treasury
bonds plus a risk premium measured by the spread between the BBB corporate bond
rate and the yield on 10-year Treasury bonds, and allows for the tax
deductibility of interest payments.  The expected rate of inflation
over a 5-year horizon is subtracted from the after-tax nominal yield
to obtain the real after-tax rate of interest.  The cost of equity
finance is measured as the expected real return to equity.
</description>
    <standard_equation>
      <eviews_equation>rbfi - rbfi_aerr = 0.5*(7.2 + (1-trfcim)*(rg5 + rbbb- rg10) - zpib5)
                 + 0.5*req </eviews_equation>
      <python_equation>rbfi - rbfi_aerr = 0.5*(7.2 + (1-trfcim)*(rg5 + rbbb- rg10) - zpib5)
                 + 0.5*req </python_equation>
      <rhs_eq_var>rbbb</rhs_eq_var>
      <rhs_eq_var>req</rhs_eq_var>
      <rhs_eq_var>rg10</rhs_eq_var>
      <rhs_eq_var>rg5</rhs_eq_var>
      <rhs_eq_var>trfcim</rhs_eq_var>
      <rhs_eq_var>zpib5</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>rcar</name>
    <equation_type>Behavioral</equation_type>
    <sector>Financial Sector</sector>
    <definition>New car loan rate at finance companies</definition>
    <description>In the long run, the rate on new car loans equals the yield
on 5-year Treasury bonds, plus an exogenous risk premium.  This
risk premium declined over the 1960s and 1970s, but appears to
have been stable since 1980; this effect is captured using the
dummy variable D79A and time trend T47.  The lagged value of the
auto loan rate is included in the equation to capture the
sluggish adjustment of bank loan rates to movements in market
interest rates.
</description>
    <standard_equation>
      <eviews_equation>rcar  - rcar_aerr =
           y_rcar(1)
          + y_rcar(2) * d79a
          + y_rcar(3) * ((1-d79a)*t47)
          + y_rcar(4) * rcar(-1)
          + y_rcar(5) * rg5
          + y_rcar(6) * rg5(-1)</eviews_equation>
      <python_equation>rcar  - rcar_aerr =
           y_rcar_1
          + y_rcar_2 * d79a
          + y_rcar_3 * ((1-d79a)*t47)
          + y_rcar_4 * rcar(-1)
          + y_rcar_5 * rg5
          + y_rcar_6 * rg5(-1)</python_equation>
      <coeff>
        <cf_name>y_rcar(1)</cf_name>
        <cf_value>2.078274063162198</cf_value>
        <t_stat>6.953353560871758</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_rcar(2)</cf_name>
        <cf_value>-1.163656496933583</cf_value>
        <t_stat>-4.563821930722726</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_rcar(3)</cf_name>
        <cf_value>-0.008285302552441101</cf_value>
        <t_stat>-3.48724808868144</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_rcar(4)</cf_name>
        <cf_value>0.6967481719141809</cf_value>
        <t_stat>26.60862704426585</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_rcar(5)</cf_name>
        <cf_value>0.1016693350391095</cf_value>
        <t_stat>2.680941136659083</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_rcar(6)</cf_name>
        <cf_value>0.2015824930467097</cf_value>
      </coeff>
      <rhs_eq_var>d79a</rhs_eq_var>
      <rhs_eq_var>rcar</rhs_eq_var>
      <rhs_eq_var>rg5</rhs_eq_var>
      <rhs_eq_var>t47</rhs_eq_var>
      <estimation_statistics>
        <F_statistic>5118.994138673028</F_statistic>
        <adjusted_r_squared>0.9897983735831228</adjusted_r_squared>
        <date>08/30/18   Time: 10:01 </date>
        <durbin_watson>1.593068745032383</durbin_watson>
        <method>Least Squares (Gauss-Newton / Marquardt steps)</method>
        <prob_F_statistic>1.126603345764567e-205</prob_F_statistic>
        <r_squared>0.9899917693445802</r_squared>
        <sample_end>2017Q4</sample_end>
        <sample_start>1965Q1</sample_start>
        <se_of_regression>0.2962987270861543</se_of_regression>
      </estimation_statistics>
    </standard_equation>
    <kfcalc>1</kfcalc>
    <stochastic_type>FN</stochastic_type>
  </variable>
  <variable>
    <name>rccd</name>
    <equation_type>Identity</equation_type>
    <sector>Household Expenditures</sector>
    <definition>Cost of capital for consumer durables</definition>
    <description> The real user cost of the stock of consumer durable goods
(excluding the purchase price of new goods) equals the sum of the
depreciation rate (JRCD) and the real interest rate.  The latter is
approximated by the new auto loan rate minus expected inflation over
the next five years.  A MAX function is included to prevent RCCD from
taking on implausible values, improving the stability of the model in
stochastic simulations.  Over history, RCCD has never approached this
floor.
</description>
    <standard_equation>
      <eviews_equation>rccd - rccd_aerr = (@recode((100*jrcd + rcar - zpi5)&gt;( .01),100*jrcd + rcar - zpi5, .01)) </eviews_equation>
      <python_equation>rccd - rccd_aerr = (max((100*jrcd + rcar - zpi5),( .01))) </python_equation>
      <rhs_eq_var>jrcd</rhs_eq_var>
      <rhs_eq_var>rcar</rhs_eq_var>
      <rhs_eq_var>zpi5</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>rcch</name>
    <equation_type>Identity</equation_type>
    <sector>Household Expenditures</sector>
    <definition>Cost of capital for residential investment</definition>
    <description> The real user cost of housing (excluding the purchase price of
new construction) equals the depreciation rate JRH, plus the real
after-tax mortgage rate (1-TRFPM/100)*RME-ZPI10, plus the effective
marginal property tax rate (1-TRFPM/100)*TRSPP.  A MAX function is
included to prevent RCCH from taking on implausible values,
improving the stability of the model in stochastic simulations. Over
history, RCCH has never approached this floor.

Note:  TRFPM is the marginal federal income tax rate for the taxpayers
with household incomes that are twice the median; this group is
considered the most representative of households who itemize.
</description>
    <standard_equation>
      <eviews_equation>rcch - rcch_aerr = (@recode((100*jrh + (1-trfpm/100)*(rme+100*trspp) - zpi10)&gt;( .1),100*jrh + (1-trfpm/100)*(rme+100*trspp) - zpi10, .1)) </eviews_equation>
      <python_equation>rcch - rcch_aerr = (max((100*jrh + (1-trfpm/100)*(rme+100*trspp) - zpi10),( .1))) </python_equation>
      <rhs_eq_var>jrh</rhs_eq_var>
      <rhs_eq_var>rme</rhs_eq_var>
      <rhs_eq_var>trfpm</rhs_eq_var>
      <rhs_eq_var>trspp</rhs_eq_var>
      <rhs_eq_var>zpi10</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>rcgain</name>
    <equation_type>Behavioral</equation_type>
    <sector>Financial Sector</sector>
    <definition>Rate of capital gain on the non-equity portion of household wealth</definition>
    <description>RCGAIN measures the rate of capital gain on non-equity, non-housing
household net worth.  In addtion to an adjustment for inflation, its equation has a
cyclical component and an autocorrelated residual.
</description>
    <standard_equation>
      <eviews_equation>rcgain  - rcgain_aerr = picx4
          + y_rcgain(1)
          + y_rcgain(2)*xgap2
          + y_rcgain(3)*(rcgain(-1) - picx4(-1)
          - y_rcgain(4)
          - y_rcgain(5)*xgap2)</eviews_equation>
      <python_equation>rcgain  - rcgain_aerr = picx4
          + y_rcgain_1
          + y_rcgain_2*xgap2
          + y_rcgain_3*(rcgain(-1) - picx4(-1)
          - y_rcgain_4
          - y_rcgain_5*xgap2)</python_equation>
      <coeff>
        <cf_name>y_rcgain(1)</cf_name>
        <cf_value>-0.4097125100056558</cf_value>
        <t_stat>-1.136880671120589</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_rcgain(2)</cf_name>
        <cf_value>0.4243575136593637</cf_value>
        <t_stat>3.940423673398673</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_rcgain(3)</cf_name>
        <cf_value>0.2257857751190805</cf_value>
        <t_stat>3.93826906058571</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_rcgain(4)</cf_name>
        <cf_value>-0.4097125100056558</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_rcgain(5)</cf_name>
        <cf_value>0.4243575136593637</cf_value>
      </coeff>
      <rhs_eq_var>picx4</rhs_eq_var>
      <rhs_eq_var>rcgain</rhs_eq_var>
      <rhs_eq_var>xgap2</rhs_eq_var>
      <estimation_statistics>
        <F_statistic>9.170730580739472</F_statistic>
        <adjusted_r_squared>0.1010761214358822</adjusted_r_squared>
        <date>08/30/18   Time: 10:01 </date>
        <durbin_watson>2.086075012466668</durbin_watson>
        <method>ARMA Maximum Likelihood (BFGS)</method>
        <prob_F_statistic>9.777220190100152e-06</prob_F_statistic>
        <r_squared>0.1134466335262141</r_squared>
        <sample_end>2017Q4</sample_end>
        <sample_start>1963Q2</sample_start>
        <se_of_regression>3.971658968796835</se_of_regression>
      </estimation_statistics>
    </standard_equation>
    <kfcalc>1</kfcalc>
    <stochastic_type>FN</stochastic_type>
  </variable>
  <variable>
    <name>req</name>
    <equation_type>Identity</equation_type>
    <sector>Financial Sector</sector>
    <definition>Real expected rate of return on equity</definition>
    <description>The rate of return on equity equals the rate on thirty-year Treasury
bonds (RG30), minus the average rate of inflation expected to
prevail over the coming 30 years  (ZPIC30), plus an equity premium
(REQP).  The latter varies with the corporate bond premium (RBBBP)
and also includes an AR(1) error term.
</description>
    <standard_equation>
      <eviews_equation>req - req_aerr = rg30 - zpic30 + reqp </eviews_equation>
      <python_equation>req - req_aerr = rg30 - zpic30 + reqp </python_equation>
      <rhs_eq_var>reqp</rhs_eq_var>
      <rhs_eq_var>rg30</rhs_eq_var>
      <rhs_eq_var>zpic30</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>reqp</name>
    <equation_type>Behavioral</equation_type>
    <sector>Financial Sector</sector>
    <definition>Real expected rate of return on equity, premium component</definition>
    <description> The residuals from a regression of the equity term premium on an intercept and corporate bond risk premium (RBBBP) are assumed to follow an AR(1) process.
</description>
    <standard_equation>
      <eviews_equation>reqp  - reqp_aerr =
           y_reqp(1)
          + y_reqp(2) * rbbbp
          + y_reqp(3)*( reqp(-1)
          - y_reqp(1)
          - y_reqp(2)* rbbbp(-1) )</eviews_equation>
      <python_equation>reqp  - reqp_aerr =
           y_reqp_1
          + y_reqp_2 * rbbbp
          + y_reqp_3*( reqp(-1)
          - y_reqp_1
          - y_reqp_2* rbbbp(-1) )</python_equation>
      <coeff>
        <cf_name>y_reqp(1)</cf_name>
        <cf_value>2.903727</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_reqp(2)</cf_name>
        <cf_value>0.808086</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_reqp(3)</cf_name>
        <cf_value>0.795819</cf_value>
      </coeff>
      <rhs_eq_var>rbbbp</rhs_eq_var>
      <rhs_eq_var>reqp</rhs_eq_var>
      <estimation_statistics/>
    </standard_equation>
    <kfcalc>1</kfcalc>
    <stochastic_type>FN</stochastic_type>
  </variable>
  <variable>
    <name>rff</name>
    <equation_type>Behavioral</equation_type>
    <sector>Financial Sector</sector>
    <definition>Federal funds rate</definition>
    <description> The equation for the effective federal funds rate imposes the
lower bound (RFFMIN) and, when DMPTRSH = 1, imposes a version of the
unemployment and inflation threshold policy that appeared
in FOMC statements from December 2012 to January 2014.  In a ZLB
episode, DMPTR = 0 before the thresholds are reached, and the funds
rate is equal to the value of RFFMIN.  After one of the thresholds is
breached, DMPTR = 1, and, with a one-quarter lag, the funds rate is
set according to the policy rule chosen by RFFRULE.
</description>
    <standard_equation>
      <eviews_equation>rff - rff_aerr = (1-dmptrsh) * (@recode((rffrule)&gt;( rffmin),rffrule, rffmin))
      + dmptrsh * (@recode(((dmptr(-1)*rffrule + (1-dmptr(-1))*rffmin))&gt;( rffmin),(dmptr(-1)*rffrule + (1-dmptr(-1))*rffmin), rffmin))
</eviews_equation>
      <python_equation>rff - rff_aerr = (1-dmptrsh) * (max((rffrule),( rffmin)))
      + dmptrsh * (max(((dmptr(-1)*rffrule + (1-dmptr(-1))*rffmin)),( rffmin)))
</python_equation>
      <rhs_eq_var>dmptr</rhs_eq_var>
      <rhs_eq_var>dmptrsh</rhs_eq_var>
      <rhs_eq_var>rffmin</rhs_eq_var>
      <rhs_eq_var>rffrule</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>rffalt</name>
    <equation_type>Behavioral</equation_type>
    <sector>Financial Sector</sector>
    <definition>Value of eff. federal funds rate given by estimated policy rule</definition>
    <standard_equation>
      <eviews_equation>rffalt - rffalt_aerr = y_rffalt(1)
                     + y_rffalt(2) * rff(-1)
                     + y_rffalt(3) * rff(-2)
                     + y_rffalt(4) * xgap2
                     + y_rffalt(5) * xgap2(-1)
                     + y_rffalt(6) * ( ( picxfe +  picxfe(-1) +  picxfe(-2) +  picxfe(-3))  / 4 )
</eviews_equation>
      <python_equation>rffalt - rffalt_aerr = y_rffalt_1
                     + y_rffalt_2 * rff(-1)
                     + y_rffalt_3 * rff(-2)
                     + y_rffalt_4 * xgap2
                     + y_rffalt_5 * xgap2(-1)
                     + y_rffalt_6 * ( ( picxfe +  picxfe(-1) +  picxfe(-2) +  picxfe(-3))  / 4 )
</python_equation>
      <coeff>
        <cf_name>y_rffalt(1)</cf_name>
        <cf_value>.0551</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_rffalt(2)</cf_name>
        <cf_value>1.2</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_rffalt(3)</cf_name>
        <cf_value>-.39</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_rffalt(4)</cf_name>
        <cf_value>.6954</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_rffalt(5)</cf_name>
        <cf_value>-.5168</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_rffalt(6)</cf_name>
        <cf_value>.3287</cf_value>
      </coeff>
      <rhs_eq_var>picxfe</rhs_eq_var>
      <rhs_eq_var>rff</rhs_eq_var>
      <rhs_eq_var>xgap2</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>rfffix</name>
    <equation_type>Exogenous</equation_type>
    <definition>Federal funds rate given by fixed, pre-determined funds rate path</definition>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>rffintay</name>
    <equation_type>Behavioral</equation_type>
    <sector>Financial Sector</sector>
    <definition>Value of eff. federal funds rate given by the inertial Taylor rule</definition>
    <description>RFFINTAY is an inertial version of the Taylor Rule.  According to
the equation, the nominal funds rate gradually adjusts to a value
consistent with a Taylor rule in which the funds equals
the sum of the equilibrium real funds rate as perceived by
policymakers (RSTAR), a four-quarter moving average of actual
inflation, and adjustements in response to deviations of actual
inflation from the target rate of inflation (PITARG) and deviations of
the level of output from potential (XGAP2).

</description>
    <standard_equation>
      <eviews_equation>rffintay - rffintay_aerr = y_rffintay(3) * rff(-1)
                     + (1-y_rffintay(3)) * (rstar
                     +  ( picxfe +  picxfe(-1) +  picxfe(-2) +  picxfe(-3))  / 4
                     + y_rffintay(1) * ( ( picxfe +  picxfe(-1) +  picxfe(-2) +  picxfe(-3))  / 4 -pitarg)
                     + y_rffintay(2) * xgap2)
</eviews_equation>
      <python_equation>rffintay - rffintay_aerr = y_rffintay_3 * rff(-1)
                     + (1-y_rffintay_3) * (rstar
                     +  ( picxfe +  picxfe(-1) +  picxfe(-2) +  picxfe(-3))  / 4
                     + y_rffintay_1 * ( ( picxfe +  picxfe(-1) +  picxfe(-2) +  picxfe(-3))  / 4 -pitarg)
                     + y_rffintay_2 * xgap2)
</python_equation>
      <coeff>
        <cf_name>y_rffintay(1)</cf_name>
        <cf_value>0.5</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_rffintay(2)</cf_name>
        <cf_value>1.0</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_rffintay(3)</cf_name>
        <cf_value>.85</cf_value>
      </coeff>
      <rhs_eq_var>picxfe</rhs_eq_var>
      <rhs_eq_var>pitarg</rhs_eq_var>
      <rhs_eq_var>rff</rhs_eq_var>
      <rhs_eq_var>rstar</rhs_eq_var>
      <rhs_eq_var>xgap2</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>rffmin</name>
    <equation_type>Exogenous</equation_type>
    <definition>Minimum nominal funds rate (set at 0 to impose zero lower bound)</definition>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>rffrule</name>
    <equation_type>Behavioral</equation_type>
    <sector>Financial Sector</sector>
    <definition>Federal funds rate</definition>
    <description>The RFFRULE equation combines the seven basic options for setting
the federal funds rate in a form that yields the outcome for the funds
rate under the chosen option.  The funds rate is exogenous in nominal
terms when DMPEX is one and the other policy switches are zero.  The
funds rate is exogenous in real terms when DMPRR is one.  Other
settings select one of the policy reaction functions.
</description>
    <standard_equation>
      <eviews_equation>rffrule - rffrule_aerr =  dmpex * rfffix
                       + dmprr  * (rrfix +  ( picxfe +  picxfe(-1) +  picxfe(-2) +  picxfe(-3))  / 4 )
                       + dmptay * rfftay
                       + dmptlr * rfftlr
                       + dmpintay * rffintay
                       + dmpalt * rffalt
</eviews_equation>
      <python_equation>rffrule - rffrule_aerr =  dmpex * rfffix
                       + dmprr  * (rrfix +  ( picxfe +  picxfe(-1) +  picxfe(-2) +  picxfe(-3))  / 4 )
                       + dmptay * rfftay
                       + dmptlr * rfftlr
                       + dmpintay * rffintay
                       + dmpalt * rffalt
</python_equation>
      <rhs_eq_var>dmpalt</rhs_eq_var>
      <rhs_eq_var>dmpex</rhs_eq_var>
      <rhs_eq_var>dmpgen</rhs_eq_var>
      <rhs_eq_var>dmpintay</rhs_eq_var>
      <rhs_eq_var>dmprr</rhs_eq_var>
      <rhs_eq_var>dmptay</rhs_eq_var>
      <rhs_eq_var>dmptlr</rhs_eq_var>
      <rhs_eq_var>picxfe</rhs_eq_var>
      <rhs_eq_var>rffalt</rhs_eq_var>
      <rhs_eq_var>rfffix</rhs_eq_var>
      <rhs_eq_var>rffgen</rhs_eq_var>
      <rhs_eq_var>rffintay</rhs_eq_var>
      <rhs_eq_var>rfftay</rhs_eq_var>
      <rhs_eq_var>rfftlr</rhs_eq_var>
      <rhs_eq_var>rrfix</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>rfftay</name>
    <equation_type>Behavioral</equation_type>
    <sector>Financial Sector</sector>
    <definition>Value of eff. federal funds rate given by the Taylor rule with output gap</definition>
    <description>RFFTAY is a version of the Taylor Rule.  According to the
equation, the nominal funds rate equals the sum of
the equilibrium real funds rate as perceived by policymakers (RSTAR)
and a four-quarter moving average of actual inflation.  This value
is then adjusted in response to deviations of actual inflation from
the target rate of inflation (PITARG) and deviations of the level of
output from potential (XGAP2).

</description>
    <standard_equation>
      <eviews_equation>rfftay - rfftay_aerr = rstar
                     +  ( picxfe +  picxfe(-1) +  picxfe(-2) +  picxfe(-3))  / 4
                     + y_rfftay(1) * ( ( picxfe +  picxfe(-1) +  picxfe(-2) +  picxfe(-3))  / 4 -pitarg)
                     + y_rfftay(2) * xgap2
</eviews_equation>
      <python_equation>rfftay - rfftay_aerr = rstar
                     +  ( picxfe +  picxfe(-1) +  picxfe(-2) +  picxfe(-3))  / 4
                     + y_rfftay_1 * ( ( picxfe +  picxfe(-1) +  picxfe(-2) +  picxfe(-3))  / 4 -pitarg)
                     + y_rfftay_2 * xgap2
</python_equation>
      <coeff>
        <cf_name>y_rfftay(1)</cf_name>
        <cf_value>0.5</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_rfftay(2)</cf_name>
        <cf_value>1.0</cf_value>
      </coeff>
      <rhs_eq_var>picxfe</rhs_eq_var>
      <rhs_eq_var>pitarg</rhs_eq_var>
      <rhs_eq_var>rstar</rhs_eq_var>
      <rhs_eq_var>xgap2</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>rfftlr</name>
    <equation_type>Behavioral</equation_type>
    <sector>Financial Sector</sector>
    <definition>Value of eff. federal funds rate given by the Taylor rule with unemployment gap</definition>
    <description>RFFTLR is a version of the Taylor Rule.  According to the equation,
the nominal funds rate equals the sum of the equilibrium real funds
rate as perceived by policymakers (RSTAR) and a four-quarter moving
average of actual inflation.  This value is then adjusted in response
to deviations of actual inflation from the target rate of inflation
(PITARG) and deviations of the unemployment rate from the natural rate
of unemployment.

</description>
    <standard_equation>
      <eviews_equation>rfftlr - rfftlr_aerr = rstar
                       + y_rfftlr(1) * pitarg
                       + y_rfftlr(2) * ( ( picxfe +  picxfe(-1) +  picxfe(-2) +  picxfe(-3)) )
                       + y_rfftlr(3) * (lurnat + deuc * leuc - lur)
</eviews_equation>
      <python_equation>rfftlr - rfftlr_aerr = rstar
                       + y_rfftlr_1 * pitarg
                       + y_rfftlr_2 * ( ( picxfe +  picxfe(-1) +  picxfe(-2) +  picxfe(-3)) )
                       + y_rfftlr_3 * (lurnat + deuc * leuc - lur)
</python_equation>
      <coeff>
        <cf_name>y_rfftlr(1)</cf_name>
        <cf_value>-0.5</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_rfftlr(2)</cf_name>
        <cf_value>.375</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_rfftlr(3)</cf_name>
        <cf_value>1.1</cf_value>
      </coeff>
      <rhs_eq_var>deuc</rhs_eq_var>
      <rhs_eq_var>leuc</rhs_eq_var>
      <rhs_eq_var>lur</rhs_eq_var>
      <rhs_eq_var>lurnat</rhs_eq_var>
      <rhs_eq_var>picxfe</rhs_eq_var>
      <rhs_eq_var>pitarg</rhs_eq_var>
      <rhs_eq_var>rstar</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>rfnict</name>
    <equation_type>Exogenous</equation_type>
    <definition>Residual in FNICN equation</definition>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>rfrs10</name>
    <equation_type>Exogenous</equation_type>
    <definition>Real foreign short-term interest rate</definition>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>rfynic</name>
    <equation_type>Behavioral</equation_type>
    <sector>Foreign Trade</sector>
    <definition>Average yield earned on gross claims of US residents on the rest of the world</definition>
    <description>
</description>
    <standard_equation>
      <eviews_equation>d(rfynic)  - rfynic_aerr =
           y_rfynic(1)
          + y_rfynic(2) * (rfynic(-1) - rfynil(-1))
          + y_rfynic(3) * d(rfynic(-1))
          + y_rfynic(4) * d(rfynil)</eviews_equation>
      <python_equation>(rfynic - (rfynic(-1)))  - rfynic_aerr =
           y_rfynic_1
          + y_rfynic_2 * (rfynic(-1) - rfynil(-1))
          + y_rfynic_3 * (rfynic(-1) - (rfynic(-2)))
          + y_rfynic_4 * (rfynil - (rfynil(-1)))</python_equation>
      <coeff>
        <cf_name>y_rfynic(1)</cf_name>
        <cf_value>0.2442546132781247</cf_value>
        <t_stat>3.92192750493124</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_rfynic(2)</cf_name>
        <cf_value>-0.1404162075757351</cf_value>
        <t_stat>-4.065136495979325</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_rfynic(3)</cf_name>
        <cf_value>0.1444243609858357</cf_value>
        <t_stat>2.380103805914031</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_rfynic(4)</cf_name>
        <cf_value>0.6315036756054792</cf_value>
        <t_stat>9.344833568209976</t_stat>
      </coeff>
      <rhs_eq_var>rfynic</rhs_eq_var>
      <rhs_eq_var>rfynil</rhs_eq_var>
      <estimation_statistics>
        <F_statistic>39.518396138636</F_statistic>
        <adjusted_r_squared>0.3769474234411996</adjusted_r_squared>
        <date>08/30/18   Time: 10:00 </date>
        <durbin_watson>2.26121080955441</durbin_watson>
        <method>Least Squares (Gauss-Newton / Marquardt steps)</method>
        <prob_F_statistic>7.534505776906502e-20</prob_F_statistic>
        <r_squared>0.3867335895651598</r_squared>
        <sample_end>2017Q4</sample_end>
        <sample_start>1970Q1</sample_start>
        <se_of_regression>0.2867100186020708</se_of_regression>
      </estimation_statistics>
    </standard_equation>
    <kfcalc>1</kfcalc>
    <stochastic_type>FN</stochastic_type>
  </variable>
  <variable>
    <name>rfynil</name>
    <equation_type>Behavioral</equation_type>
    <sector>Foreign Trade</sector>
    <definition>Average yield earned on liabilities of US residents on the rest of the world</definition>
    <description>The average yield on U.S. liabilities to the rest of the world is
modeled in an error correction format.  In the long run, this yield is
a function of the rates of return on a range of domestic assets.
Short-run movements in these rates of return have additional effects
on the average yield on U.S. liabilities.
</description>
    <standard_equation>
      <eviews_equation>d(rfynil)  - rfynil_aerr =
           y_rfynil(1)
          + y_rfynil(2) * rfynil(-1)
          + y_rfynil(3) * rg10(-1)
          + y_rfynil(4) * rtb(-1)
          + y_rfynil(5) * reqp(-1)
          + y_rfynil(6) * d(rfynil(-1))
          + y_rfynil(7) * d(rg10)
          + y_rfynil(8) * d(rtb)
          + y_rfynil(9) * d(reqp)</eviews_equation>
      <python_equation>(rfynil - (rfynil(-1)))  - rfynil_aerr =
           y_rfynil_1
          + y_rfynil_2 * rfynil(-1)
          + y_rfynil_3 * rg10(-1)
          + y_rfynil_4 * rtb(-1)
          + y_rfynil_5 * reqp(-1)
          + y_rfynil_6 * (rfynil(-1) - (rfynil(-2)))
          + y_rfynil_7 * (rg10 - (rg10(-1)))
          + y_rfynil_8 * (rtb - (rtb(-1)))
          + y_rfynil_9 * (reqp - (reqp(-1)))</python_equation>
      <coeff>
        <cf_name>y_rfynil(1)</cf_name>
        <cf_value>0.1769720233111774</cf_value>
        <t_stat>2.373640925450795</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_rfynil(2)</cf_name>
        <cf_value>-0.2484056734487245</cf_value>
        <t_stat>-6.373954472203009</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_rfynil(3)</cf_name>
        <cf_value>0.08033864767698434</cf_value>
        <t_stat>3.83936899334617</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_rfynil(4)</cf_name>
        <cf_value>0.09023943103709648</cf_value>
        <t_stat>4.915529887555425</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_rfynil(5)</cf_name>
        <cf_value>0.04450523477009356</cf_value>
        <t_stat>3.980479199442374</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_rfynil(6)</cf_name>
        <cf_value>0.1328188190918866</cf_value>
        <t_stat>2.645335004909808</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_rfynil(7)</cf_name>
        <cf_value>0.08760339070734239</cf_value>
        <t_stat>1.837455383056476</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_rfynil(8)</cf_name>
        <cf_value>0.2614346003836546</cf_value>
        <t_stat>9.81222000297911</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_rfynil(9)</cf_name>
        <cf_value>0.0179349568621618</cf_value>
        <t_stat>0.7533961092312401</t_stat>
      </coeff>
      <rhs_eq_var>reqp</rhs_eq_var>
      <rhs_eq_var>rfynil</rhs_eq_var>
      <rhs_eq_var>rg10</rhs_eq_var>
      <rhs_eq_var>rtb</rhs_eq_var>
      <estimation_statistics>
        <F_statistic>35.55785836081795</F_statistic>
        <adjusted_r_squared>0.591411396434282</adjusted_r_squared>
        <date>08/30/18   Time: 10:00 </date>
        <durbin_watson>2.311962491449172</durbin_watson>
        <method>Least Squares (Gauss-Newton / Marquardt steps)</method>
        <prob_F_statistic>1.692675416073763e-33</prob_F_statistic>
        <r_squared>0.6085250552223749</r_squared>
        <sample_end>2017Q4</sample_end>
        <sample_start>1970Q1</sample_start>
        <se_of_regression>0.2091249856063969</se_of_regression>
      </estimation_statistics>
    </standard_equation>
    <kfcalc>1</kfcalc>
    <stochastic_type>FN</stochastic_type>
  </variable>
  <variable>
    <name>rg10</name>
    <equation_type>Identity</equation_type>
    <sector>Financial Sector</sector>
    <definition>10-year Treasury bond rate</definition>
    <standard_equation>
      <eviews_equation>rg10 - rg10_aerr = zrff10 + rg10p </eviews_equation>
      <python_equation>rg10 - rg10_aerr = zrff10 + rg10p </python_equation>
      <rhs_eq_var>rg10p</rhs_eq_var>
      <rhs_eq_var>zrff10</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>rg10p</name>
    <equation_type>Behavioral</equation_type>
    <sector>Financial Sector</sector>
    <definition>10-year Treasury bond rate, term premium</definition>
    <description> The term premium on 10-year Treasury bonds consists of a constant
(which shifts upward over 1980-1995), a serially correlated
residual, and a counter-cyclical term that depends on a weighted
average of expected future output gaps.

</description>
    <standard_equation>
      <eviews_equation>rg10p  - rg10p_aerr =
            y_rg10p(1)
          + y_rg10p(2) * zgap10
          + y_rg10p(3) * d8095
          + y_rg10p(4) * (rg10p(-1)
          - y_rg10p(1)
          - y_rg10p(2)*zgap10(-1)
          - y_rg10p(3)*d8095(-1))</eviews_equation>
      <python_equation>rg10p  - rg10p_aerr =
            y_rg10p_1
          + y_rg10p_2 * zgap10
          + y_rg10p_3 * d8095
          + y_rg10p_4 * (rg10p(-1)
          - y_rg10p_1
          - y_rg10p_2*zgap10(-1)
          - y_rg10p_3*d8095(-1))</python_equation>
      <coeff>
        <cf_name>y_rg10p(1)</cf_name>
        <cf_value>1.050750815840056</cf_value>
        <t_stat>2.152669419357577</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_rg10p(2)</cf_name>
        <cf_value>-0.4606588068717281</cf_value>
        <t_stat>-3.400500835521426</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_rg10p(3)</cf_name>
        <cf_value>0.2287218644237361</cf_value>
        <t_stat>0.5092760860325648</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_rg10p(4)</cf_name>
        <cf_value>0.9201040880647524</cf_value>
        <t_stat>26.94171034524088</t_stat>
      </coeff>
      <rhs_eq_var>d8095</rhs_eq_var>
      <rhs_eq_var>rg10p</rhs_eq_var>
      <rhs_eq_var>zgap10</rhs_eq_var>
      <estimation_statistics>
        <F_statistic>303.3880155705486</F_statistic>
        <adjusted_r_squared>0.8890156399111166</adjusted_r_squared>
        <date>08/30/18   Time: 10:01 </date>
        <durbin_watson>1.695993654354336</durbin_watson>
        <method>ARMA Maximum Likelihood (BFGS)</method>
        <prob_F_statistic>6.208183719833546e-70</prob_F_statistic>
        <r_squared>0.8919556229598288</r_squared>
        <sample_end>2017Q4</sample_end>
        <sample_start>1980Q1</sample_start>
        <se_of_regression>0.4226677509723388</se_of_regression>
      </estimation_statistics>
    </standard_equation>
    <kfcalc>1</kfcalc>
    <stochastic_type>FN</stochastic_type>
  </variable>
  <variable>
    <name>rg30</name>
    <equation_type>Identity</equation_type>
    <sector>Financial Sector</sector>
    <definition>30-year Treasury bond rate</definition>
    <standard_equation>
      <eviews_equation>rg30 - rg30_aerr = zrff30 + rg30p </eviews_equation>
      <python_equation>rg30 - rg30_aerr = zrff30 + rg30p </python_equation>
      <rhs_eq_var>rg30p</rhs_eq_var>
      <rhs_eq_var>zrff30</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>rg30p</name>
    <equation_type>Behavioral</equation_type>
    <sector>Financial Sector</sector>
    <definition>30-year Treasury bond rate, term premium</definition>
    <description> The term premium on 30-year Treasury bonds consists of a constant
(which shifts upward over 1980-1995), a serially correlated
residual, and a counter-cyclical term that depends on a weighted
average of expected future output gaps.
</description>
    <standard_equation>
      <eviews_equation>rg30p  - rg30p_aerr =
            y_rg30p(1)
          + y_rg30p(2) * zgap30
          + y_rg30p(3) * d8095
          + y_rg30p(4) * (rg30p(-1)
          - y_rg30p(1)
          - y_rg30p(2)*zgap30(-1)
          - y_rg30p(3)*d8095(-1))</eviews_equation>
      <python_equation>rg30p  - rg30p_aerr =
            y_rg30p_1
          + y_rg30p_2 * zgap30
          + y_rg30p_3 * d8095
          + y_rg30p_4 * (rg30p(-1)
          - y_rg30p_1
          - y_rg30p_2*zgap30(-1)
          - y_rg30p_3*d8095(-1))</python_equation>
      <coeff>
        <cf_name>y_rg30p(1)</cf_name>
        <cf_value>1.420673758140307</cf_value>
        <t_stat>2.335036684607532</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_rg30p(2)</cf_name>
        <cf_value>-0.6248294677066961</cf_value>
        <t_stat>-2.468414793434361</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_rg30p(3)</cf_name>
        <cf_value>0.1349942505218234</cf_value>
        <t_stat>0.2632143742816308</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_rg30p(4)</cf_name>
        <cf_value>0.9381086057081572</cf_value>
        <t_stat>33.83245598844158</t_stat>
      </coeff>
      <rhs_eq_var>d8095</rhs_eq_var>
      <rhs_eq_var>rg30p</rhs_eq_var>
      <rhs_eq_var>zgap30</rhs_eq_var>
      <estimation_statistics>
        <F_statistic>351.7712085507486</F_statistic>
        <adjusted_r_squared>0.9028367070595346</adjusted_r_squared>
        <date>08/30/18   Time: 10:02 </date>
        <durbin_watson>1.64445106001514</durbin_watson>
        <method>ARMA Maximum Likelihood (BFGS)</method>
        <prob_F_statistic>3.581314241399316e-74</prob_F_statistic>
        <r_squared>0.9054105691241828</r_squared>
        <sample_end>2017Q4</sample_end>
        <sample_start>1980Q1</sample_start>
        <se_of_regression>0.3931690006447321</se_of_regression>
      </estimation_statistics>
    </standard_equation>
    <kfcalc>1</kfcalc>
    <stochastic_type>FN</stochastic_type>
  </variable>
  <variable>
    <name>rg5</name>
    <equation_type>Identity</equation_type>
    <sector>Financial Sector</sector>
    <definition>5-year Treasury note rate</definition>
    <standard_equation>
      <eviews_equation>rg5 - rg5_aerr = zrff5 + rg5p </eviews_equation>
      <python_equation>rg5 - rg5_aerr = zrff5 + rg5p </python_equation>
      <rhs_eq_var>rg5p</rhs_eq_var>
      <rhs_eq_var>zrff5</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>rg5p</name>
    <equation_type>Behavioral</equation_type>
    <sector>Financial Sector</sector>
    <definition>5-year Treasury note rate. term premium</definition>
    <description> The term premium on 5-year Treasury bonds consists of a constant,
a serially correlated residual, and a counter-cyclical term that
depends on a weighted average of expected future output gaps.
</description>
    <standard_equation>
      <eviews_equation>rg5p  - rg5p_aerr =
            y_rg5p(1)
          + y_rg5p(2) * zgap05
          + y_rg5p(3) * (rg5p(-1)
          - y_rg5p(1)
          - y_rg5p(2)*zgap05(-1))</eviews_equation>
      <python_equation>rg5p  - rg5p_aerr =
            y_rg5p_1
          + y_rg5p_2 * zgap05
          + y_rg5p_3 * (rg5p(-1)
          - y_rg5p_1
          - y_rg5p_2*zgap05(-1))</python_equation>
      <coeff>
        <cf_name>y_rg5p(1)</cf_name>
        <cf_value>0.6912438755770502</cf_value>
        <t_stat>1.682452444736806</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_rg5p(2)</cf_name>
        <cf_value>-0.3495644809998469</cf_value>
        <t_stat>-4.504844838736181</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_rg5p(3)</cf_name>
        <cf_value>0.9022132931202672</cf_value>
        <t_stat>25.86686275296578</t_stat>
      </coeff>
      <rhs_eq_var>rg5p</rhs_eq_var>
      <rhs_eq_var>zgap05</rhs_eq_var>
      <estimation_statistics>
        <F_statistic>311.2491624718159</F_statistic>
        <adjusted_r_squared>0.8604110462407684</adjusted_r_squared>
        <date>08/30/18   Time: 10:02 </date>
        <durbin_watson>1.874996386806262</durbin_watson>
        <method>ARMA Maximum Likelihood (BFGS)</method>
        <prob_F_statistic>1.076025431947807e-63</prob_F_statistic>
        <r_squared>0.863184336712806</r_squared>
        <sample_end>2017Q4</sample_end>
        <sample_start>1980Q1</sample_start>
        <se_of_regression>0.4745642666474429</se_of_regression>
      </estimation_statistics>
    </standard_equation>
    <kfcalc>1</kfcalc>
    <stochastic_type>FN</stochastic_type>
  </variable>
  <variable>
    <name>rgfint</name>
    <equation_type>Behavioral</equation_type>
    <sector>Financial Sector</sector>
    <definition>Average rate of interest on existing federal debt</definition>
    <description>The average rate of interest on federal government debt (RGFINT) is
measured historically as the ratio of net interest paid to the lagged
stock of debt outstanding.  In this equation, RGFINT adjusts toward
the weighted average rate of interest on new government debt (RGW),
with the speed of adjustment depending positively on the rate of
growth of debt.
</description>
    <standard_equation>
      <eviews_equation>rgfint  - rgfint_aerr =
          (y_rgfint(1)*rgfint(-1)+.14*rgw(-1))*gfdbtn(-2)/gfdbtn(-1) + rgw(-1)*(1-gfdbtn(-2)/gfdbtn(-1))
          + y_rgfint(2)</eviews_equation>
      <python_equation>rgfint  - rgfint_aerr =
          (y_rgfint_1*rgfint(-1)+.14*rgw(-1))*gfdbtn(-2)/gfdbtn(-1) + rgw(-1)*(1-gfdbtn(-2)/gfdbtn(-1))
          + y_rgfint_2</python_equation>
      <coeff>
        <cf_name>y_rgfint(1)</cf_name>
        <cf_value>0.86</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_rgfint(2)</cf_name>
        <cf_value>0.003726285406154968</cf_value>
        <t_stat>22.44160516364979</t_stat>
      </coeff>
      <rhs_eq_var>gfdbtn</rhs_eq_var>
      <rhs_eq_var>rgfint</rhs_eq_var>
      <rhs_eq_var>rgw</rhs_eq_var>
      <estimation_statistics>
        <adjusted_r_squared>0.9934255382392978</adjusted_r_squared>
        <date>08/30/18   Time: 10:01 </date>
        <durbin_watson>1.455157760153021</durbin_watson>
        <method>Least Squares (Gauss-Newton / Marquardt steps)</method>
        <r_squared>0.9934255382392978</r_squared>
        <sample_end>2017Q4</sample_end>
        <sample_start>1965Q1</sample_start>
        <se_of_regression>0.002417631629984398</se_of_regression>
      </estimation_statistics>
    </standard_equation>
    <kfcalc>1</kfcalc>
    <stochastic_type>GV</stochastic_type>
  </variable>
  <variable>
    <name>rgw</name>
    <equation_type>Identity</equation_type>
    <sector>Financial Sector</sector>
    <definition>Approximate average rate of interest on new federal debt</definition>
    <description>The weighted average of the four current treasury yields, with
the weights based on the Treasury's average issue patterns over some
appropriate period.

</description>
    <standard_equation>
      <eviews_equation>rgw - rgw_aerr = y_rgw(1) * rtb
               + y_rgw(2) * rg5
               + y_rgw(3) * rg10
               + y_rgw(4) * rg30
</eviews_equation>
      <python_equation>rgw - rgw_aerr = y_rgw_1 * rtb
               + y_rgw_2 * rg5
               + y_rgw_3 * rg10
               + y_rgw_4 * rg30
</python_equation>
      <coeff>
        <cf_name>y_rgw(1)</cf_name>
        <cf_value>.00495</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_rgw(2)</cf_name>
        <cf_value>.00271</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_rgw(3)</cf_name>
        <cf_value>.00129</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_rgw(4)</cf_name>
        <cf_value>.00105</cf_value>
      </coeff>
      <rhs_eq_var>rg10</rhs_eq_var>
      <rhs_eq_var>rg30</rhs_eq_var>
      <rhs_eq_var>rg5</rhs_eq_var>
      <rhs_eq_var>rtb</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>rme</name>
    <equation_type>Behavioral</equation_type>
    <sector>Financial Sector</sector>
    <definition>Interest rate on conventional mortgages</definition>
    <standard_equation>
      <eviews_equation>d(rme,0,1)  - rme_aerr =
           y_rme(1)
          + y_rme(2) * d(rg10,0,1)
          + y_rme(3) *  d87 * d(rg10,0,1)
          + y_rme(4) *  (rg10(-1)-rme(-1))
          + y_rme(5) * d87 * (rg10(-1)-rme(-1))</eviews_equation>
      <python_equation>(rme - rme(-1))  - rme_aerr =
          y_rme_1
          + y_rme_2 * (rg10 - rg10(-1))
          + y_rme_3 *  d87 * (rg10 - rg10(-1))
          + y_rme_4 *  (rg10(-1)-rme(-1))
          + y_rme_5 * d87 * (rg10(-1)-rme(-1))</python_equation>
      <coeff>
        <cf_name>y_rme(1)</cf_name>
        <cf_value>0.515870426113512</cf_value>
        <t_stat>6.777066007810314</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_rme(2)</cf_name>
        <cf_value>0.6286405556840244</cf_value>
        <t_stat>12.52077892458438</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_rme(3)</cf_name>
        <cf_value>0.2555601487902845</cf_value>
        <t_stat>3.072413312754793</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_rme(4)</cf_name>
        <cf_value>0.2889775740676342</cf_value>
        <t_stat>6.935995894871971</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_rme(5)</cf_name>
        <cf_value>0.05071546489585005</cf_value>
        <t_stat>2.094828435559376</t_stat>
      </coeff>
      <rhs_eq_var>d87</rhs_eq_var>
      <rhs_eq_var>rg10</rhs_eq_var>
      <rhs_eq_var>rme</rhs_eq_var>
      <estimation_statistics>
        <F_statistic>99.79539697983526</F_statistic>
        <adjusted_r_squared>0.6519194838559236</adjusted_r_squared>
        <date>08/30/18   Time: 10:01 </date>
        <durbin_watson>1.767884936076667</durbin_watson>
        <method>Least Squares (Gauss-Newton / Marquardt steps)</method>
        <prob_F_statistic>3.494466503908938e-47</prob_F_statistic>
        <r_squared>0.6585181666264275</r_squared>
        <sample_end>2017Q4</sample_end>
        <sample_start>1965Q1</sample_start>
        <se_of_regression>0.270168967291638</se_of_regression>
      </estimation_statistics>
    </standard_equation>
    <kfcalc>1</kfcalc>
    <stochastic_type>FN</stochastic_type>
  </variable>
  <variable>
    <name>rrff</name>
    <equation_type>Identity</equation_type>
    <sector>Financial Sector</sector>
    <definition>Real federal funds rate</definition>
    <description>The real federal funds rate (RRFF) is defined as the nominal
effective funds rate (RFF) minus a 4-quarter moving average of
core consumer price inflation (PICXFE).
</description>
    <standard_equation>
      <eviews_equation>rrff - rrff_aerr = rff -  ( picxfe +  picxfe(-1) +  picxfe(-2) +  picxfe(-3))  / 4  </eviews_equation>
      <python_equation>rrff - rrff_aerr = rff -  ( picxfe +  picxfe(-1) +  picxfe(-2) +  picxfe(-3))  / 4  </python_equation>
      <rhs_eq_var>picxfe</rhs_eq_var>
      <rhs_eq_var>rff</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>rrfix</name>
    <equation_type>Exogenous</equation_type>
    <definition>Real federal funds rate given by fixed, pre-determined real funds rate path</definition>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>rrtr</name>
    <equation_type>Behavioral</equation_type>
    <sector>Expectations</sector>
    <definition>Expected long-run real federal funds rate</definition>
    <description>The expected long-run value of the real federal funds rate (RRTR)
is assumed each quarter to close 3 percent of the gap between the
current ex post real funds rate and last quarter's estimate of RRTR.
</description>
    <standard_equation>
      <eviews_equation>rrtr - rrtr_aerr = y_rrtr(1) * rrtr(-1)
                 + y_rrtr(2) * rrff
</eviews_equation>
      <python_equation>rrtr - rrtr_aerr = y_rrtr_1 * rrtr(-1)
                 + y_rrtr_2 * rrff
</python_equation>
      <coeff>
        <cf_name>y_rrtr(1)</cf_name>
        <cf_value>.97</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_rrtr(2)</cf_name>
        <cf_value>.03</cf_value>
      </coeff>
      <rhs_eq_var>rrff</rhs_eq_var>
      <rhs_eq_var>rrtr</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>rspnia</name>
    <equation_type>Identity</equation_type>
    <sector>Nominal Income</sector>
    <definition>Personal saving rate</definition>
    <standard_equation>
      <eviews_equation>rspnia - rspnia_aerr =  100 * yhsn / ydn </eviews_equation>
      <python_equation>rspnia - rspnia_aerr =  100 * yhsn / ydn </python_equation>
      <rhs_eq_var>ydn</rhs_eq_var>
      <rhs_eq_var>yhsn</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>rstar</name>
    <equation_type>Behavioral</equation_type>
    <sector>Financial Sector</sector>
    <definition>Equilibrium real federal funds rate (for monetary policy reaction functions)</definition>
    <description>The estimate of the equilibrium real federal funds rate
used in the monetary policy rules is updated each period by
5 percent of the gap between the ex post real short rate and
the prior estimate, if the switch DRSTAR is set to 1.
</description>
    <standard_equation>
      <eviews_equation>rstar - rstar_aerr = rstar(-1)
                   + y_rstar(1) * ((rrff-rstar(-1))*drstar)
</eviews_equation>
      <python_equation>rstar - rstar_aerr = rstar(-1)
                   + y_rstar_1 * ((rrff-rstar(-1))*drstar)
</python_equation>
      <coeff>
        <cf_name>y_rstar(1)</cf_name>
        <cf_value>.05</cf_value>
      </coeff>
      <rhs_eq_var>drstar</rhs_eq_var>
      <rhs_eq_var>rrff</rhs_eq_var>
      <rhs_eq_var>rstar</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>rtb</name>
    <equation_type>Identity</equation_type>
    <sector>Financial Sector</sector>
    <definition>3-month Treasury bill rate</definition>
    <standard_equation>
      <eviews_equation>rtb  - rtb_aerr =
           y_rtb(1)
          + y_rtb(2) *  rtb(-1)
          + y_rtb(3) *  rtb(-2)
          + y_rtb(4) *  rff
          + y_rtb(5) *  rff(-1)</eviews_equation>
      <python_equation>rtb  - rtb_aerr =
           y_rtb_1
          + y_rtb_2 *  rtb(-1)
          + y_rtb_3 *  rtb(-2)
          + y_rtb_4 *  rff
          + y_rtb_5 *  rff(-1)</python_equation>
      <coeff>
        <cf_name>y_rtb(1)</cf_name>
        <cf_value>-0.05102548358978556</cf_value>
        <t_stat>-1.948655553084059</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_rtb(2)</cf_name>
        <cf_value>0.7997187921520415</cf_value>
        <t_stat>17.83865494990525</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_rtb(3)</cf_name>
        <cf_value>0.1113735515796583</cf_value>
        <t_stat>3.800861828827981</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_rtb(4)</cf_name>
        <cf_value>0.7701225626671688</cf_value>
        <t_stat>31.83234870999721</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_rtb(5)</cf_name>
        <cf_value>-0.6812149063988686</cf_value>
      </coeff>
      <rhs_eq_var>rff</rhs_eq_var>
      <rhs_eq_var>rtb</rhs_eq_var>
      <estimation_statistics>
        <F_statistic>8466.769390385325</F_statistic>
        <adjusted_r_squared>0.9917604865346919</adjusted_r_squared>
        <date>08/30/18   Time: 10:01 </date>
        <durbin_watson>2.213612725588249</durbin_watson>
        <method>Least Squares (Gauss-Newton / Marquardt steps)</method>
        <prob_F_statistic>4.653216024700701e-217</prob_F_statistic>
        <r_squared>0.9918776360152412</r_squared>
        <sample_end>2017Q4</sample_end>
        <sample_start>1965Q1</sample_start>
        <se_of_regression>0.2956466849509188</se_of_regression>
      </estimation_statistics>
    </standard_equation>
  </variable>
  <variable>
    <name>rtbfi</name>
    <equation_type>Identity</equation_type>
    <sector>Business Expenditures</sector>
    <definition>User cost of capital for business investment</definition>
    <description>The annualized rental cost, relative to the price of output, of
a unit of equipment has three components: the relative
purchase price of new investment (PKBFIR*PXP/PXB); the depreciation
rate (JRBFI) plus the real financing rate (RBFI) less the trend growth
rate of the relative price of investment (HGPBFIR); and tax adjustments
for depreciation and the marginal corporate tax rate.
</description>
    <standard_equation>
      <eviews_equation>rtbfi - rtbfi_aerr = (.01*rbfi + jrbfi - .01*hgpbfir)
                   * ((1-.01*tritc-trfcim*(1-tapddp*.01*tritc)*tdpv)/(1-trfcim))
                   * (pkbfir*pxp/pxb)
</eviews_equation>
      <python_equation>rtbfi - rtbfi_aerr = (.01*rbfi + jrbfi - .01*hgpbfir)
                   * ((1-.01*tritc-trfcim*(1-tapddp*.01*tritc)*tdpv)/(1-trfcim))
                   * (pkbfir*pxp/pxb)
</python_equation>
      <rhs_eq_var>hgpbfir</rhs_eq_var>
      <rhs_eq_var>jrbfi</rhs_eq_var>
      <rhs_eq_var>pkbfir</rhs_eq_var>
      <rhs_eq_var>pxb</rhs_eq_var>
      <rhs_eq_var>pxp</rhs_eq_var>
      <rhs_eq_var>rbfi</rhs_eq_var>
      <rhs_eq_var>tapddp</rhs_eq_var>
      <rhs_eq_var>tdpv</rhs_eq_var>
      <rhs_eq_var>trfcim</rhs_eq_var>
      <rhs_eq_var>tritc</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>rtinv</name>
    <equation_type>Identity</equation_type>
    <sector>Business Expenditures</sector>
    <definition>User cost of capital for inventories</definition>
    <description>The annualized rental cost, relative to the price of output, of a
unit of inventory capital is equal to the relative purchase price of new
investment (PKIR*PXP/PXB) multiplied by the after-tax financial rate
(RPD) minus the trend growth rate of the relative price of inventories
(HGPKIR).

</description>
    <standard_equation>
      <eviews_equation>rtinv - rtinv_aerr = (.01*rbfi - .01*hgpkir)
                   * ( ( pxp*pkir +  pxp(-1)*pkir(-1)) /2)/pxb
      </eviews_equation>
      <python_equation>rtinv - rtinv_aerr = (.01*rbfi - .01*hgpkir)
                   * ( ( pxp*pkir +  pxp(-1)*pkir(-1)) /2)/pxb
      </python_equation>
      <rhs_eq_var>hgpkir</rhs_eq_var>
      <rhs_eq_var>pkir</rhs_eq_var>
      <rhs_eq_var>pxb</rhs_eq_var>
      <rhs_eq_var>pxp</rhs_eq_var>
      <rhs_eq_var>rbfi</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>rtr</name>
    <equation_type>Identity</equation_type>
    <sector>Expectations</sector>
    <definition>Expected federal funds rate in the long run (Blue Chip)</definition>
    <description> Historical values of RTR since 1984q3 are based on data from the
Blue Chip Survey.  Prior to that, RTR = PTR + 2.0.
</description>
    <standard_equation>
      <eviews_equation>rtr - rtr_aerr = rrtr + ptr </eviews_equation>
      <python_equation>rtr - rtr_aerr = rrtr + ptr </python_equation>
      <rhs_eq_var>ptr</rhs_eq_var>
      <rhs_eq_var>rrtr</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>t47</name>
    <equation_type>Exogenous</equation_type>
    <definition>Time trend, begins in 1947q1 (0 before)</definition>
    <exogenous_projection>5</exogenous_projection>
  </variable>
  <variable>
    <name>tapddp</name>
    <equation_type>Exogenous</equation_type>
    <definition>Proportion of investment tax credit deducted from depr. base</definition>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>tcin</name>
    <equation_type>Identity</equation_type>
    <sector>Government</sector>
    <definition>Government corporate income tax accruals, current $</definition>
    <description/>
    <standard_equation>
      <eviews_equation>tcin - tcin_aerr = trci * ynicpn
	 </eviews_equation>
      <python_equation>tcin - tcin_aerr = trci * ynicpn
	 </python_equation>
      <rhs_eq_var>trci</rhs_eq_var>
      <rhs_eq_var>ynicpn</rhs_eq_var>
    </standard_equation>
    <stochastic_type>NO</stochastic_type>
  </variable>
  <variable>
    <name>tdpv</name>
    <equation_type>Exogenous</equation_type>
    <definition>Present value of depreciation allowances, BFI</definition>
    <exogenous_projection>3</exogenous_projection>
  </variable>
  <variable>
    <name>tpn</name>
    <equation_type>Identity</equation_type>
    <sector>Government</sector>
    <definition>Government personal income tax and non-tax receipts, current $</definition>
    <description/>
    <standard_equation>
      <eviews_equation>tpn - tpn_aerr = trp * (ypn - gtn)
	 </eviews_equation>
      <python_equation>tpn - tpn_aerr = trp * (ypn - gtn)
	 </python_equation>
      <rhs_eq_var>gtn</rhs_eq_var>
      <rhs_eq_var>trp</rhs_eq_var>
      <rhs_eq_var>ypn</rhs_eq_var>
    </standard_equation>
    <stochastic_type>NO</stochastic_type>
  </variable>
  <variable>
    <name>trci</name>
    <equation_type>Behavioral</equation_type>
    <sector>Government</sector>
    <definition>Average government corporate income tax rate</definition>
    <description/>
    <standard_equation>
      <eviews_equation>trci  - trci_aerr = trcit + y_trci(2)*xgap2
            + y_trci(1)*(trci(-1)-trcit(-1) - y_trci(2)*xgap2(-1))
      </eviews_equation>
      <python_equation>trci  - trci_aerr = trcit + y_trci_2*xgap2
            + y_trci_1*(trci(-1)-trcit(-1) - y_trci_2*xgap2(-1))
      </python_equation>
      <coeff>
        <cf_name>y_trci(1)</cf_name>
        <cf_value>0.810247648208</cf_value>
        <t_stat>19.24857</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_trci(2)</cf_name>
        <cf_value>0.00706626139452</cf_value>
        <t_stat>5.260813</t_stat>
      </coeff>
      <rhs_eq_var>trci</rhs_eq_var>
      <rhs_eq_var>trcit</rhs_eq_var>
      <rhs_eq_var>xgap2</rhs_eq_var>
      <estimation_statistics>
        <adjusted_r_squared>0.956523</adjusted_r_squared>
        <date>03/09/21   Time: 11:11</date>
        <durbin_watson>1.953357</durbin_watson>
        <method>Least Squares (Gauss-Newton / Marquardt steps)</method>
        <r_squared>0.956741</r_squared>
        <sample_end>2019Q4</sample_end>
        <sample_start>1970Q1</sample_start>
        <se_of_regression>0.013799</se_of_regression>
      </estimation_statistics>
    </standard_equation>
    <stochastic_type>GV</stochastic_type>
  </variable>
  <variable>
    <name>trcit</name>
    <equation_type>Exogenous</equation_type>
    <definition>Government corporate income tax rate, trend</definition>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>trfcim</name>
    <equation_type>Exogenous</equation_type>
    <definition>Marginal federal corporate income tax rate</definition>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>trfpm</name>
    <equation_type>Exogenous</equation_type>
    <definition>Marginal federal personal income tax rate (at twice median family income)</definition>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>tritc</name>
    <equation_type>Exogenous</equation_type>
    <definition>Investment tax credit for business investment</definition>
    <exogenous_projection>3</exogenous_projection>
  </variable>
  <variable>
    <name>trp</name>
    <equation_type>Behavioral</equation_type>
    <sector>Government</sector>
    <definition>Average government tax rate for personal income tax and non-tax receipts</definition>
    <description/>
    <standard_equation>
      <eviews_equation>trp  - trp_aerr =
           y_trp(1) * trpt
          + y_trp(2) *  (trp(-1)-trpt(-1))
          + y_trp(3) *  (trp(-2)-trpt(-2))
          + y_trp(4) * xgap2</eviews_equation>
      <python_equation>trp  - trp_aerr = y_trp_1 * trpt
          + y_trp_2 *  (trp(-1)-trpt(-1))
          + y_trp_3 *  (trp(-2)-trpt(-2))
          + y_trp_4 * xgap2</python_equation>
      <coeff>
        <cf_name>y_trp(1)</cf_name>
        <cf_value>1</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_trp(2)</cf_name>
        <cf_value>0.603942358608</cf_value>
        <t_stat>8.766441</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_trp(3)</cf_name>
        <cf_value>0.236576213581</cf_value>
        <t_stat>3.543782</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_trp(4)</cf_name>
        <cf_value>0.000630587773923</cf_value>
        <t_stat>3.978659</t_stat>
      </coeff>
      <rhs_eq_var>trp</rhs_eq_var>
      <rhs_eq_var>trpt</rhs_eq_var>
      <rhs_eq_var>xgap2</rhs_eq_var>
      <estimation_statistics>
        <adjusted_r_squared>0.788808</adjusted_r_squared>
        <date>03/09/21   Time: 11:11</date>
        <durbin_watson>1.933843</durbin_watson>
        <method>Least Squares (Gauss-Newton / Marquardt steps)</method>
        <r_squared>0.790930</r_squared>
        <sample_end>2019Q4</sample_end>
        <sample_start>1970Q1</sample_start>
        <se_of_regression>0.004835</se_of_regression>
      </estimation_statistics>
    </standard_equation>
    <stochastic_type>GV</stochastic_type>
  </variable>
  <variable>
    <name>trpt</name>
    <equation_type>Behavioral</equation_type>
    <sector>Government</sector>
    <definition>Average government tax rate for personal income tax, trend</definition>
    <description/>
    <standard_equation>
      <eviews_equation>trpt - trpt_aerr = dfpex * trptx
                  + dfpdbt * ( trpt(-1)
                  + y_trpt(1) * (gfdbtnp(-1)/xgdpn(-1) - gfdrt(-1))
                  + y_trpt(2) * d( gfdbtnp(-1)/xgdpn(-1) - gfdrt(-1), 0, 1 ) )
                  + dfpsrp * ( trpt(-1)
                  + y_trpt(3) * ((gfsrpn(-1)/xgdpn(-1))
                               - (gfsrt(-1)+0.0075*xgap2(-1))))
	 </eviews_equation>
      <python_equation>trpt - trpt_aerr = dfpex * trptx
                  + dfpdbt * ( trpt(-1)
                  + y_trpt_1 * (gfdbtnp(-1)/xgdpn(-1) - gfdrt(-1))
                  + y_trpt_2 * ( gfdbtnp(-1)/xgdpn(-1) - gfdrt(-1) - ( gfdbtnp(-2)/xgdpn(-2) - gfdrt(-2))) )
                  + dfpsrp * ( trpt(-1)
                  + y_trpt_3 * ((gfsrpn(-1)/xgdpn(-1))
                               - (gfsrt(-1)+0.0075*xgap2(-1))))
	 </python_equation>
      <coeff>
        <cf_name>y_trpt(1)</cf_name>
        <cf_value>0.05</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_trpt(2)</cf_name>
        <cf_value>0.5</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_trpt(3)</cf_name>
        <cf_value>-0.1</cf_value>
      </coeff>
      <rhs_eq_var>dfpdbt</rhs_eq_var>
      <rhs_eq_var>dfpex</rhs_eq_var>
      <rhs_eq_var>dfpsrp</rhs_eq_var>
      <rhs_eq_var>gfdbtnp</rhs_eq_var>
      <rhs_eq_var>gfdrt</rhs_eq_var>
      <rhs_eq_var>gfsrpn</rhs_eq_var>
      <rhs_eq_var>gfsrt</rhs_eq_var>
      <rhs_eq_var>trpt</rhs_eq_var>
      <rhs_eq_var>trptx</rhs_eq_var>
      <rhs_eq_var>xgap2</rhs_eq_var>
      <rhs_eq_var>xgdpn</rhs_eq_var>
    </standard_equation>
    <stochastic_type>NO</stochastic_type>
  </variable>
  <variable>
    <name>trptx</name>
    <equation_type>Exogenous</equation_type>
    <definition>Average tax rate for personal income tax, trend, policy setting</definition>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>trspp</name>
    <equation_type>Exogenous</equation_type>
    <definition>Marginal S&amp;L tax rate on personal property</definition>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>tryh</name>
    <equation_type>Identity</equation_type>
    <sector>Government</sector>
    <definition>Average tax rate on household income</definition>
    <description>The average tax rate on household income is constructed as the
ratio of personal income taxes (TPN) to the sum of labor
income (YNLN) and taxable property income (YHPTN).  Transfer
income is assumed not to be taxed.
</description>
    <standard_equation>
      <eviews_equation>tryh - tryh_aerr = (tpn)/(yhln+yhptn) </eviews_equation>
      <python_equation>tryh - tryh_aerr = (tpn)/(yhln+yhptn) </python_equation>
      <rhs_eq_var>tpn</rhs_eq_var>
      <rhs_eq_var>yhln</rhs_eq_var>
      <rhs_eq_var>yhptn</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>uemot</name>
    <equation_type>Exogenous</equation_type>
    <definition>Trend in ratio of EMON to XGDEN</definition>
    <exogenous_projection>3</exogenous_projection>
  </variable>
  <variable>
    <name>ufcbr</name>
    <equation_type>Exogenous</equation_type>
    <definition>Multiplicative factor in FCBRN identity</definition>
    <exogenous_projection>3</exogenous_projection>
  </variable>
  <variable>
    <name>ufnir</name>
    <equation_type>Exogenous</equation_type>
    <definition>Multiplicative factor in FNIRN identity</definition>
    <exogenous_projection>3</exogenous_projection>
  </variable>
  <variable>
    <name>uftcin</name>
    <equation_type>Exogenous</equation_type>
    <definition>Multiplicative factor in FTCIN identity</definition>
    <exogenous_projection>3</exogenous_projection>
  </variable>
  <variable>
    <name>ugfdbt</name>
    <equation_type>Exogenous</equation_type>
    <definition>Multiplicative factor in GFDBTN identity</definition>
    <exogenous_projection>3</exogenous_projection>
  </variable>
  <variable>
    <name>upcpi</name>
    <equation_type>Exogenous</equation_type>
    <definition>Multiplicative factor in PCPI identity</definition>
    <exogenous_projection>4</exogenous_projection>
  </variable>
  <variable>
    <name>upcpix</name>
    <equation_type>Exogenous</equation_type>
    <definition>Multiplicative factor in PCPIX identity</definition>
    <exogenous_projection>4</exogenous_projection>
  </variable>
  <variable>
    <name>upgfl</name>
    <equation_type>Exogenous</equation_type>
    <definition>Multiplicative factor in PGFL identity</definition>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>upgsl</name>
    <equation_type>Exogenous</equation_type>
    <definition>Multiplicative factor in PGSL identity</definition>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>upkbfir</name>
    <equation_type>Exogenous</equation_type>
    <definition>Multiplicative factor in PKBFIR identity</definition>
    <exogenous_projection>3</exogenous_projection>
  </variable>
  <variable>
    <name>upmp</name>
    <equation_type>Exogenous</equation_type>
    <definition>Multiplicative factor in PMP identity</definition>
    <exogenous_projection>3</exogenous_projection>
  </variable>
  <variable>
    <name>upxb</name>
    <equation_type>Exogenous</equation_type>
    <definition>Multiplicative factor in PXB   identity</definition>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>uqpct</name>
    <equation_type>Behavioral</equation_type>
    <sector>Wages and Prices</sector>
    <definition>Stochastic component of trend ratio of PCNIA to PXP</definition>
    <standard_equation>
      <eviews_equation>log(uqpct) - uqpct_aerr = y_uqpct(1) + log(uqpct(-1)) + huqpct </eviews_equation>
      <python_equation>log(uqpct) - uqpct_aerr = y_uqpct_1 + log(uqpct(-1)) + huqpct </python_equation>
      <coeff>
        <cf_name>y_uqpct(1)</cf_name>
        <cf_value>0.0</cf_value>
      </coeff>
      <rhs_eq_var>huqpct</rhs_eq_var>
      <rhs_eq_var>uqpct</rhs_eq_var>
      <estimation_statistics>
        <estimation_date>August 2010</estimation_date>
        <sample_end>-</sample_end>
        <sample_start>1962Q1</sample_start>
      </estimation_statistics>
    </standard_equation>
  </variable>
  <variable>
    <name>uvbfi</name>
    <equation_type>Exogenous</equation_type>
    <definition>Multiplicative factor in VBFI identity</definition>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>uxbt</name>
    <equation_type>Behavioral</equation_type>
    <sector>Aggregate Output Identities</sector>
    <definition>Stochastic component of trend ratio of XGDPT to XBT</definition>
    <description> The trend component of potential GDP is a random walk with drift.
The drift component (HUXB) follows an AR(1) process.
</description>
    <standard_equation>
      <eviews_equation>log(uxbt) - uxbt_aerr = y_uxbt(1) + log(uxbt(-1)) + .0025*huxb </eviews_equation>
      <python_equation>log(uxbt) - uxbt_aerr = y_uxbt_1 + log(uxbt(-1)) + .0025*huxb </python_equation>
      <coeff>
        <cf_name>y_uxbt(1)</cf_name>
        <cf_value>0.0</cf_value>
      </coeff>
      <rhs_eq_var>huxb</rhs_eq_var>
      <rhs_eq_var>uxbt</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>uyd</name>
    <equation_type>Exogenous</equation_type>
    <definition>Multiplicative factor in YDN identity</definition>
    <exogenous_projection>3</exogenous_projection>
  </variable>
  <variable>
    <name>uyhibn</name>
    <equation_type>Exogenous</equation_type>
    <definition>Multiplicative factor (Consumer interest payments to business)</definition>
    <description>?</description>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>uyhln</name>
    <equation_type>Exogenous</equation_type>
    <definition>Multiplicative factor in YHLN identity</definition>
    <exogenous_projection>3</exogenous_projection>
  </variable>
  <variable>
    <name>uyhptn</name>
    <equation_type>Exogenous</equation_type>
    <definition>Multiplicative factor in YHPTN identity</definition>
    <exogenous_projection>3</exogenous_projection>
  </variable>
  <variable>
    <name>uyhsn</name>
    <equation_type>Exogenous</equation_type>
    <definition>Multiplicative factor in personal saving identity (accounts for transfers to foreign</definition>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>uyhtn</name>
    <equation_type>Exogenous</equation_type>
    <definition>Multiplicative factor in YHTN identity</definition>
    <exogenous_projection>3</exogenous_projection>
  </variable>
  <variable>
    <name>uyl</name>
    <equation_type>Exogenous</equation_type>
    <definition>Multiplicative factor in YLN identity</definition>
    <exogenous_projection>2</exogenous_projection>
  </variable>
  <variable>
    <name>uyni</name>
    <equation_type>Exogenous</equation_type>
    <definition>Multiplicative factor in YNIN identity</definition>
    <exogenous_projection>3</exogenous_projection>
  </variable>
  <variable>
    <name>uynicpnr</name>
    <equation_type>Behavioral</equation_type>
    <sector>Nominal Income</sector>
    <definition>Corporate profits, residual</definition>
    <description/>
    <standard_equation>
      <eviews_equation>uynicpnr - uynicpnr_aerr = y_uynicpnr(1)*(1-y_uynicpnr(2))
                         + y_uynicpnr(2)*uynicpnr(-1)
	 </eviews_equation>
      <python_equation>uynicpnr - uynicpnr_aerr = y_uynicpnr_1*(1-y_uynicpnr_2)
                         + y_uynicpnr_2*uynicpnr(-1)
	 </python_equation>
      <coeff>
        <cf_name>y_uynicpnr(1)</cf_name>
        <cf_value>-0.073960</cf_value>
        <t_stat>-192.3558</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_uynicpnr(2)</cf_name>
        <cf_value>0.779183</cf_value>
        <t_stat>14.15076</t_stat>
      </coeff>
      <rhs_eq_var>uynicpnr</rhs_eq_var>
    </standard_equation>
    <stochastic_type>NO</stochastic_type>
  </variable>
  <variable>
    <name>uyp</name>
    <equation_type>Exogenous</equation_type>
    <definition>Multiplicative factor in YPN identity</definition>
    <exogenous_projection>3</exogenous_projection>
  </variable>
  <variable>
    <name>vbfi</name>
    <equation_type>Behavioral</equation_type>
    <sector>Business Expenditures</sector>
    <definition>Desired investment-output ratio</definition>
    <description> The desired investment-output ratio is inversely related to the
user cost of capital, implying an elasiticity of substitution of one.
The multiplicative factor UVBFI has the interpretation of the
equilibrium income share for nonresidential structures.  UVBFI is
estimated with an HP filter over history and is assumed to be
exogenous in simulation.

</description>
    <standard_equation>
      <eviews_equation>vbfi - vbfi_aerr = uvbfi*(pkbfir/pbfir)/rtbfi </eviews_equation>
      <python_equation>vbfi - vbfi_aerr = uvbfi*(pkbfir/pbfir)/rtbfi </python_equation>
      <rhs_eq_var>pbfir</rhs_eq_var>
      <rhs_eq_var>pkbfir</rhs_eq_var>
      <rhs_eq_var>rtbfi</rhs_eq_var>
      <rhs_eq_var>uvbfi</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>wpo</name>
    <equation_type>Identity</equation_type>
    <sector>Financial Sector</sector>
    <definition>Household property wealth ex. stock market, real</definition>
    <standard_equation>
      <eviews_equation>wpo - wpo_aerr = wpon/(.01*pcnia) </eviews_equation>
      <python_equation>wpo - wpo_aerr = wpon/(.01*pcnia) </python_equation>
      <rhs_eq_var>pcnia</rhs_eq_var>
      <rhs_eq_var>wpon</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>wpon</name>
    <equation_type>Identity</equation_type>
    <sector>Financial Sector</sector>
    <definition>Household property wealth ex. stock market, current $</definition>
    <description> The change in the non-equity portion of household net worth has
three components -- NIPA personal savings, net investment in consumer
durable goods, and capital gains on housing and other assets.  The
capital gains on housing and other assets are weighted by their ratios
to WPON.  PHOUSE is scaled by a factor of 116 so that PHOUSE*KH
matches housing wealth (both owner occupied and noncorporate rental
real estate) from the Flow of Funds over the past decade.
</description>
    <standard_equation>
      <eviews_equation>wpon   - wpon_aerr =  wpon(-1)*exp((1
          -y_wpon(1))*rcgain/400
          + y_wpon(1)*(log(phouse) - log(phouse(-1)))) + .25 * (ydn-ecnian-yhibn) + .25 * (.01*pcdr*pcnia*(ecd-jkcd))</eviews_equation>
      <python_equation>wpon   - wpon_aerr =  wpon(-1)*exp((1
          -y_wpon_1)*rcgain/400
          + y_wpon_1*(log(phouse) - log(phouse(-1)))) + .25 * (ydn-ecnian-yhibn) + .25 * (.01*pcdr*pcnia*(ecd-jkcd))</python_equation>
      <coeff>
        <cf_name>y_wpon(1)</cf_name>
        <cf_value>0.4106759138763171</cf_value>
      </coeff>
      <rhs_eq_var>ecd</rhs_eq_var>
      <rhs_eq_var>ecnian</rhs_eq_var>
      <rhs_eq_var>jkcd</rhs_eq_var>
      <rhs_eq_var>pcdr</rhs_eq_var>
      <rhs_eq_var>pcnia</rhs_eq_var>
      <rhs_eq_var>phouse</rhs_eq_var>
      <rhs_eq_var>rcgain</rhs_eq_var>
      <rhs_eq_var>wpon</rhs_eq_var>
      <rhs_eq_var>ydn</rhs_eq_var>
      <rhs_eq_var>yhibn</rhs_eq_var>
      <estimation_statistics>
        <adjusted_r_squared>1</adjusted_r_squared>
        <date>08/30/18   Time: 09:59 </date>
        <durbin_watson>1</durbin_watson>
        <method>Least Squares (Gauss-Newton / Marquardt steps)</method>
        <r_squared>1</r_squared>
        <sample_end>2017Q4</sample_end>
        <sample_start>2016Q4</sample_start>
        <se_of_regression>1.028975793722999e-11</se_of_regression>
      </estimation_statistics>
    </standard_equation>
  </variable>
  <variable>
    <name>wps</name>
    <equation_type>Identity</equation_type>
    <sector>Financial Sector</sector>
    <definition>Household stock market wealth, real</definition>
    <standard_equation>
      <eviews_equation>wps - wps_aerr = wpsn/(.01*pcnia) </eviews_equation>
      <python_equation>wps - wps_aerr = wpsn/(.01*pcnia) </python_equation>
      <rhs_eq_var>pcnia</rhs_eq_var>
      <rhs_eq_var>wpsn</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>wpsn</name>
    <equation_type>Identity</equation_type>
    <sector>Financial Sector</sector>
    <definition>Household stock market wealth, current $</definition>
    <description>The equation for the market value of equities held by households
(WPSN) is derived from the standard Gordon model for valuing a firm's
share price.  Aggregating across firms, this model implies that WPSN
equals the current level of corporate cash payments, scaled up by the
difference between the expected real rate of return on equity (REQ)
and the expected real growth rate of dividends (ZDIVGR).  Corporate
cash payments are approximated by half corporate profits (YNICPN) less
corporate taxes (TCIN).  The equation is expressed as a
semi-log approximation to improve model simulation properties.  The
linearization assumes a long-run average dividend-price ratio of 4
percent, which is consistent with a long-run real required return on
equity of 7 percent and a real dividend growth rate of 3 percent.


</description>
    <standard_equation>
      <eviews_equation>log(wpsn) - wpsn_aerr = log((ynicpn-tcin)*.5)
                      - .25 * (req-zdivgr)
                      + log(25) + 1
	 </eviews_equation>
      <python_equation>log(wpsn) - wpsn_aerr = log((ynicpn-tcin)*.5)
                      - .25 * (req-zdivgr)
                      + log(25) + 1
	 </python_equation>
      <rhs_eq_var>req</rhs_eq_var>
      <rhs_eq_var>tcin</rhs_eq_var>
      <rhs_eq_var>ynicpn</rhs_eq_var>
      <rhs_eq_var>zdivgr</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>xb</name>
    <equation_type>Identity</equation_type>
    <sector>Aggregate Output Identities</sector>
    <definition>Business output (BEA definition), cw 2012$</definition>
    <standard_equation>
      <eviews_equation>xb - xb_aerr =  xbn/ (pxb/100) </eviews_equation>
      <python_equation>xb - xb_aerr =  xbn/ (pxb/100) </python_equation>
      <rhs_eq_var>pxb</rhs_eq_var>
      <rhs_eq_var>xbn</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>xbn</name>
    <equation_type>Identity</equation_type>
    <sector>Nominal Income</sector>
    <definition>Business output (BEA definition), current $</definition>
    <standard_equation>
      <eviews_equation>xbn - xbn_aerr =  pxb/100*xbo + xgdpn -xgdo*pgdp/100 </eviews_equation>
      <python_equation>xbn - xbn_aerr =  pxb/100*xbo + xgdpn -xgdo*pgdp/100 </python_equation>
      <rhs_eq_var>pgdp</rhs_eq_var>
      <rhs_eq_var>pxb</rhs_eq_var>
      <rhs_eq_var>xbo</rhs_eq_var>
      <rhs_eq_var>xgdo</rhs_eq_var>
      <rhs_eq_var>xgdpn</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>xbo</name>
    <equation_type>Identity</equation_type>
    <sector>Aggregate Output Identities</sector>
    <definition>Business output, adjusted for measurement error, cw  2012$</definition>
    <description>The estimated coefficient on XGAP2 is consistent with the
observation that value added outside of the business sector has little
or no cyclical variation and thus that movements in the business
sector output gap fully account for movements in the GDP gap.

</description>
    <standard_equation>
      <eviews_equation>log(xbo)  - xbo_aerr = log(xbt)
          + y_xbo(1)*xgap2/100</eviews_equation>
      <python_equation>log(xbo)  - xbo_aerr = log(xbt)
          + y_xbo_1*xgap2/100</python_equation>
      <coeff>
        <cf_name>y_xbo(1)</cf_name>
        <cf_value>1.324705489432872</cf_value>
        <t_stat>102.7488510283304</t_stat>
      </coeff>
      <rhs_eq_var>xbt</rhs_eq_var>
      <rhs_eq_var>xgap2</rhs_eq_var>
      <estimation_statistics>
        <adjusted_r_squared>0.9999069850201962</adjusted_r_squared>
        <date>08/30/18   Time: 10:02 </date>
        <durbin_watson>0.0005423173285536976</durbin_watson>
        <method>Least Squares (Gauss-Newton / Marquardt steps)</method>
        <r_squared>0.9999069850201962</r_squared>
        <sample_end>2017Q4</sample_end>
        <sample_start>1965Q1</sample_start>
        <se_of_regression>0.004743840037890664</se_of_regression>
      </estimation_statistics>
    </standard_equation>
  </variable>
  <variable>
    <name>xbt</name>
    <equation_type>Identity</equation_type>
    <sector>Aggregate Output Identities</sector>
    <definition>Potential business output, cw 2012$</definition>
    <description>The specification of potential business output (XBT) is based on a
two-factor Cobb-Douglas production function. In addition to measures of factor inputs, the
equation also contains trend multi-factor productivity (MFPT). Potential labor input depends
on trend employment (LEPPOT), trend hours per worker (QLWW), and trend labor quality (LQUALT).
Capital input is measured by capital services (KS). In addition, the equation posseses an
explicit error term (XBTR).

</description>
    <standard_equation>
      <eviews_equation>log(xbt) - xbt_aerr = y_xbt(1) * (log(leppot) + log(qlww) + log(lqualt))
                    + y_xbt(2) * log(ks)
                    + log(mfpt) + log(xbtr)
</eviews_equation>
      <python_equation>log(xbt) - xbt_aerr = y_xbt_1 * (log(leppot) + log(qlww) + log(lqualt))
                    + y_xbt_2 * log(ks)
                    + log(mfpt) + log(xbtr)
</python_equation>
      <coeff>
        <cf_name>y_xbt(1)</cf_name>
        <cf_value>.725</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_xbt(2)</cf_name>
        <cf_value>.275</cf_value>
      </coeff>
      <rhs_eq_var>ks</rhs_eq_var>
      <rhs_eq_var>leppot</rhs_eq_var>
      <rhs_eq_var>lqualt</rhs_eq_var>
      <rhs_eq_var>mfpt</rhs_eq_var>
      <rhs_eq_var>qlww</rhs_eq_var>
      <rhs_eq_var>xbtr</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>xbtr</name>
    <equation_type>Behavioral</equation_type>
    <sector>Aggregate Output Identities</sector>
    <definition>Residual Factor (Potential business output)</definition>
    <standard_equation>
      <eviews_equation>log(xbtr) - xbtr_aerr = y_xbtr(1) * log(xbtr(-1)) </eviews_equation>
      <python_equation>log(xbtr) - xbtr_aerr = y_xbtr_1 * log(xbtr(-1)) </python_equation>
      <coeff>
        <cf_name>y_xbtr(1)</cf_name>
        <cf_value>0.95</cf_value>
      </coeff>
      <rhs_eq_var>xbtr</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>xfs</name>
    <equation_type>Behavioral</equation_type>
    <sector>Aggregate Output Identities</sector>
    <definition>Final sales of gross domestic product, cw 2012$</definition>
    <description>Real final sales of gross domestic product is approximated by a fixed-weighted aggregation of its components.

</description>
    <standard_equation>
      <eviews_equation>log(xfs)  - xfs_aerr =  log(xfs(-1))
          + y_xfs(1)*log(ecnia/ecnia(-1))
          + y_xfs(2)*log(eh/eh(-1))
          + y_xfs(3)*log(ebfi/ebfi(-1))
          + y_xfs(4)*log(egfe/egfe(-1))
          + y_xfs(5)*log(egfl/egfl(-1))
          + y_xfs(6)*log(egse/egse(-1))
          + y_xfs(7)*log(egsl/egsl(-1))
          + y_xfs(8)*log(ex/ex(-1))
          + y_xfs(9)*log(emo/emo(-1))
          + y_xfs(10)*log(emp/emp(-1))</eviews_equation>
      <python_equation>log(xfs)  - xfs_aerr =  log(xfs(-1))
          + y_xfs_1*log(ecnia/ecnia(-1))
          + y_xfs_2*log(eh/eh(-1))
          + y_xfs_3*log(ebfi/ebfi(-1))
          + y_xfs_4*log(egfe/egfe(-1))
          + y_xfs_5*log(egfl/egfl(-1))
          + y_xfs_6*log(egse/egse(-1))
          + y_xfs_7*log(egsl/egsl(-1))
          + y_xfs_8*log(ex/ex(-1))
          + y_xfs_9*log(emo/emo(-1))
          + y_xfs_10*log(emp/emp(-1))</python_equation>
      <coeff>
        <cf_name>y_xfs(1)</cf_name>
        <cf_value>0.6849</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_xfs(2)</cf_name>
        <cf_value>0.0386</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_xfs(3)</cf_name>
        <cf_value>0.1324</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_xfs(4)</cf_name>
        <cf_value>0.0429</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_xfs(5)</cf_name>
        <cf_value>0.0223</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_xfs(6)</cf_name>
        <cf_value>0.0395</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_xfs(7)</cf_name>
        <cf_value>0.0691</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_xfs(8)</cf_name>
        <cf_value>0.1203</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_xfs(9)</cf_name>
        <cf_value>-0.1399</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_xfs(10)</cf_name>
        <cf_value>-0.0101</cf_value>
      </coeff>
      <rhs_eq_var>ebfi</rhs_eq_var>
      <rhs_eq_var>ecnia</rhs_eq_var>
      <rhs_eq_var>egfe</rhs_eq_var>
      <rhs_eq_var>egfl</rhs_eq_var>
      <rhs_eq_var>egse</rhs_eq_var>
      <rhs_eq_var>egsl</rhs_eq_var>
      <rhs_eq_var>eh</rhs_eq_var>
      <rhs_eq_var>emo</rhs_eq_var>
      <rhs_eq_var>emp</rhs_eq_var>
      <rhs_eq_var>ex</rhs_eq_var>
      <rhs_eq_var>xfs</rhs_eq_var>
      <estimation_statistics>
        <adjusted_r_squared>0.9999573093861014</adjusted_r_squared>
        <date>08/30/18   Time: 09:59 </date>
        <durbin_watson>1.837000600283748</durbin_watson>
        <method>Least Squares (Gauss-Newton / Marquardt steps)</method>
        <r_squared>0.9999765201623558</r_squared>
        <sample_end>2017Q4</sample_end>
        <sample_start>2012Q4</sample_start>
        <se_of_regression>0.0002389985882700067</se_of_regression>
      </estimation_statistics>
    </standard_equation>
  </variable>
  <variable>
    <name>xfsn</name>
    <equation_type>Identity</equation_type>
    <sector>Nominal Income</sector>
    <definition>Final sales of gross domestic product, current $</definition>
    <standard_equation>
      <eviews_equation>xfsn - xfsn_aerr = xgdpn - ein </eviews_equation>
      <python_equation>xfsn - xfsn_aerr = xgdpn - ein </python_equation>
      <rhs_eq_var>ein</rhs_eq_var>
      <rhs_eq_var>xgdpn</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>xgap</name>
    <equation_type>Identity</equation_type>
    <sector>Aggregate Output Identities</sector>
    <definition>Output gap for  business plus oil imports  (100*(actual/potential -1)</definition>
    <standard_equation>
      <eviews_equation>xgap - xgap_aerr = 100*(xbo/xbt -1) </eviews_equation>
      <python_equation>xgap - xgap_aerr = 100*(xbo/xbt -1) </python_equation>
      <rhs_eq_var>xbo</rhs_eq_var>
      <rhs_eq_var>xbt</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>xgap2</name>
    <equation_type>Identity</equation_type>
    <sector>Aggregate Output Identities</sector>
    <definition>Output gap for GDP (100*(actual/potential -1)</definition>
    <standard_equation>
      <eviews_equation>xgap2 - xgap2_aerr = 100 * (xgdo/xgdpt -1) </eviews_equation>
      <python_equation>xgap2 - xgap2_aerr = 100 * (xgdo/xgdpt -1) </python_equation>
      <rhs_eq_var>xgdo</rhs_eq_var>
      <rhs_eq_var>xgdpt</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>xgdi</name>
    <equation_type>Identity</equation_type>
    <sector>Aggregate Output Identities</sector>
    <definition>Gross domestic income, cw 2012$</definition>
    <description>Gross domestic income is modeled with an identity as the product of
gross domestic product adjusted for measurement error (XGDO) and a
discrepancy factor (MEI) whose logarithm follows an AR(1) process.
</description>
    <standard_equation>
      <eviews_equation>xgdi - xgdi_aerr = xgdo*mei </eviews_equation>
      <python_equation>xgdi - xgdi_aerr = xgdo*mei </python_equation>
      <rhs_eq_var>mei</rhs_eq_var>
      <rhs_eq_var>xgdo</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>xgdin</name>
    <equation_type>Identity</equation_type>
    <sector>Nominal Income</sector>
    <definition>Gross domestic income, current $</definition>
    <standard_equation>
      <eviews_equation>xgdin - xgdin_aerr = xgdi *(pgdp/100) </eviews_equation>
      <python_equation>xgdin - xgdin_aerr = xgdi *(pgdp/100) </python_equation>
      <rhs_eq_var>pgdp</rhs_eq_var>
      <rhs_eq_var>xgdi</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>xgdo</name>
    <equation_type>Identity</equation_type>
    <sector>Aggregate Output Identities</sector>
    <definition>Gross domestic product, adjusted for measurement error, cw 2012$</definition>
    <description>XGDO is real GDP adjusted for measurement error.  In simulation
XGDO equals the ratio of real gross domestic product (XGDP) to a
discrepancy factor (MEP) whose logarithm follows an AR(1) process.  The
historical values of XGDO are estimated as latent variables in the
reduced-form state-space model documented &lt;a
href="latent_note.pdf"&gt;here&lt;/a&gt;.

</description>
    <standard_equation>
      <eviews_equation>xgdo - xgdo_aerr = xgdp/mep </eviews_equation>
      <python_equation>xgdo - xgdo_aerr = xgdp/mep </python_equation>
      <rhs_eq_var>mep</rhs_eq_var>
      <rhs_eq_var>xgdp</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>xgdp</name>
    <equation_type>Behavioral</equation_type>
    <sector>Aggregate Output Identities</sector>
    <definition>GDP, cw 2012$</definition>
    <description>Real gross domestic product (XGDP) is approximated by a fixed-weighted aggregation of its components.

</description>
    <standard_equation>
      <eviews_equation>log(xgdp)  - xgdp_aerr =  log(xgdp(-1))
          + y_xgdp(1)*log(xfs/xfs(-1))
          + y_xgdp(2)*(log(ki) - log(ki(-1)))
          + y_xgdp(3)*(log(ki(-1))- log(ki(-2)))</eviews_equation>
      <python_equation>log(xgdp)  - xgdp_aerr =  log(xgdp(-1))
          + y_xgdp_1*log(xfs/xfs(-1))
          + y_xgdp_2*(log(ki) - log(ki(-1)))
          + y_xgdp_3*(log(ki(-1))- log(ki(-2)))</python_equation>
      <coeff>
        <cf_name>y_xgdp(1)</cf_name>
        <cf_value>0.9985</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_xgdp(2)</cf_name>
        <cf_value>0.6264</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_xgdp(3)</cf_name>
        <cf_value>-0.6249</cf_value>
      </coeff>
      <rhs_eq_var>ki</rhs_eq_var>
      <rhs_eq_var>xfs</rhs_eq_var>
      <rhs_eq_var>xgdp</rhs_eq_var>
      <estimation_statistics>
        <adjusted_r_squared>0.9999684003268542</adjusted_r_squared>
        <date>08/30/18   Time: 09:59 </date>
        <durbin_watson>2.398144450082855</durbin_watson>
        <method>Least Squares (Gauss-Newton / Marquardt steps)</method>
        <r_squared>0.9999715602941688</r_squared>
        <sample_end>2017Q4</sample_end>
        <sample_start>2012Q4</sample_start>
        <se_of_regression>0.0001992916462909462</se_of_regression>
      </estimation_statistics>
    </standard_equation>
  </variable>
  <variable>
    <name>xgdpn</name>
    <equation_type>Identity</equation_type>
    <sector>Nominal Income</sector>
    <definition>GDP, current $</definition>
    <standard_equation>
      <eviews_equation>xgdpn - xgdpn_aerr = xpn + ein - emn + egfln + egsln </eviews_equation>
      <python_equation>xgdpn - xgdpn_aerr = xpn + ein - emn + egfln + egsln </python_equation>
      <rhs_eq_var>egfln</rhs_eq_var>
      <rhs_eq_var>egsln</rhs_eq_var>
      <rhs_eq_var>ein</rhs_eq_var>
      <rhs_eq_var>emn</rhs_eq_var>
      <rhs_eq_var>xpn</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>xgdpt</name>
    <equation_type>Identity</equation_type>
    <sector>Aggregate Output Identities</sector>
    <definition>Potential GDP, cw 2012$</definition>
    <description> The difference between the logs of potential GDP and business
sector output -- log(UXBT) -- is a stochastic trend that is modeled as
a random walk with drift.  The drift component follows as AR(1)
process.

</description>
    <standard_equation>
      <eviews_equation>log(xgdpt) - xgdpt_aerr = log(xbt) + log(uxbt) </eviews_equation>
      <python_equation>log(xgdpt) - xgdpt_aerr = log(xbt) + log(uxbt) </python_equation>
      <rhs_eq_var>uxbt</rhs_eq_var>
      <rhs_eq_var>xbt</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>xgdptn</name>
    <equation_type>Identity</equation_type>
    <sector>Aggregate Output Identities</sector>
    <definition>Potential GDP, current $</definition>
    <standard_equation>
      <eviews_equation>xgdptn - xgdptn_aerr = .01*pgdp*xgdpt </eviews_equation>
      <python_equation>xgdptn - xgdptn_aerr = .01*pgdp*xgdpt </python_equation>
      <rhs_eq_var>pgdp</rhs_eq_var>
      <rhs_eq_var>xgdpt</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>xp</name>
    <equation_type>Behavioral</equation_type>
    <sector>Aggregate Output Identities</sector>
    <definition>Final sales plus imports less government labor, cw 2012$</definition>
    <description> Real domestic final purchases, excluding government compensation
but including exports, is approximated by a fixed-weighted aggregation of its components.

</description>
    <standard_equation>
      <eviews_equation>log(xp) - xp_aerr = log(xp(-1)) + y_xp(1)*log(ecnia/ecnia(-1))+ y_xp(2)*log(eh/eh(-1))
       + (y_xp(3))*log(ebfi/ebfi(-1))
       + (y_xp(4))*log(egfe/egfe(-1))
       + (y_xp(5))*log(egse/egse(-1))+ y_xp(6)*log(ex/ex(-1))
  </eviews_equation>
      <python_equation>log(xp) - xp_aerr = log(xp(-1)) + y_xp_1*log(ecnia/ecnia(-1))+ y_xp_2*log(eh/eh(-1))
       + (y_xp_3)*log(ebfi/ebfi(-1))
       + (y_xp_4)*log(egfe/egfe(-1))
       + (y_xp_5)*log(egse/egse(-1))+ y_xp_6*log(ex/ex(-1))
  </python_equation>
      <coeff>
        <cf_name>y_xp(1)</cf_name>
        <cf_value>0.6526679404</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_xp(2)</cf_name>
        <cf_value>0.0361108836</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_xp(3)</cf_name>
        <cf_value>0.11825695358</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_xp(4)</cf_name>
        <cf_value>0.04216893278</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_xp(5)</cf_name>
        <cf_value>0.0365822346</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_xp(6)</cf_name>
        <cf_value>0.114213055</cf_value>
      </coeff>
      <rhs_eq_var>ebfi</rhs_eq_var>
      <rhs_eq_var>ecnia</rhs_eq_var>
      <rhs_eq_var>egfe</rhs_eq_var>
      <rhs_eq_var>egse</rhs_eq_var>
      <rhs_eq_var>eh</rhs_eq_var>
      <rhs_eq_var>ex</rhs_eq_var>
      <rhs_eq_var>xp</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>xpn</name>
    <equation_type>Identity</equation_type>
    <sector>Nominal Income</sector>
    <definition>Final sales plus imports less government labor, current $</definition>
    <standard_equation>
      <eviews_equation>xpn - xpn_aerr = .01 * pxp * xp </eviews_equation>
      <python_equation>xpn - xpn_aerr = .01 * pxp * xp </python_equation>
      <rhs_eq_var>pxp</rhs_eq_var>
      <rhs_eq_var>xp</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>ydn</name>
    <equation_type>Identity</equation_type>
    <sector>Nominal Income</sector>
    <definition>Disposable income</definition>
    <standard_equation>
      <eviews_equation>ydn - ydn_aerr = uyd * (ypn - tpn)
	 </eviews_equation>
      <python_equation>ydn - ydn_aerr = uyd * (ypn - tpn)
	 </python_equation>
      <rhs_eq_var>tpn</rhs_eq_var>
      <rhs_eq_var>uyd</rhs_eq_var>
      <rhs_eq_var>ypn</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>yh</name>
    <equation_type>Identity</equation_type>
    <sector>Nominal Income</sector>
    <definition>Income, household, total (real after-tax)</definition>
    <standard_equation>
      <eviews_equation>yh - yh_aerr = yhl + yht + yhp </eviews_equation>
      <python_equation>yh - yh_aerr = yhl + yht + yhp </python_equation>
      <rhs_eq_var>yhl</rhs_eq_var>
      <rhs_eq_var>yhp</rhs_eq_var>
      <rhs_eq_var>yht</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>yhgap</name>
    <equation_type>Identity</equation_type>
    <sector>Nominal Income</sector>
    <definition>Income, household, total, ratio to XGDP, cyclical component (real after-tax)</definition>
    <description>YHGAP is the percentage deviation of the actual from the trend
ratio of household income to GDP (YHSRH and ZYHST, respectively).
</description>
    <standard_equation>
      <eviews_equation>yhgap - yhgap_aerr = 100*log(yhshr/zyhst)
	 </eviews_equation>
      <python_equation>yhgap - yhgap_aerr = 100*log(yhshr/zyhst)
	 </python_equation>
      <rhs_eq_var>yhshr</rhs_eq_var>
      <rhs_eq_var>zyhst</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>yhibn</name>
    <equation_type>Identity</equation_type>
    <sector>Nominal Income</sector>
    <definition>Consumer interest payments to business</definition>
    <standard_equation>
      <eviews_equation>yhibn - yhibn_aerr = uyhibn*xgdpn
	 </eviews_equation>
      <python_equation>yhibn - yhibn_aerr = uyhibn*xgdpn
	 </python_equation>
      <rhs_eq_var>uyhibn</rhs_eq_var>
      <rhs_eq_var>xgdpn</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>yhl</name>
    <equation_type>Identity</equation_type>
    <sector>Nominal Income</sector>
    <definition>Income, household, labor compensation (real after-tax)</definition>
    <standard_equation>
      <eviews_equation>yhl - yhl_aerr = (1-tryh)*yhln/(.01*pcnia) </eviews_equation>
      <python_equation>yhl - yhl_aerr = (1-tryh)*yhln/(.01*pcnia) </python_equation>
      <rhs_eq_var>pcnia</rhs_eq_var>
      <rhs_eq_var>tryh</rhs_eq_var>
      <rhs_eq_var>yhln</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>yhln</name>
    <equation_type>Identity</equation_type>
    <sector>Nominal Income</sector>
    <definition>Income, household, labor compensation</definition>
    <standard_equation>
      <eviews_equation>yhln - yhln_aerr = uyhln * (yniln) </eviews_equation>
      <python_equation>yhln - yhln_aerr = uyhln * (yniln) </python_equation>
      <rhs_eq_var>uyhln</rhs_eq_var>
      <rhs_eq_var>yniln</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>yhp</name>
    <equation_type>Identity</equation_type>
    <sector>Nominal Income</sector>
    <definition>Income, household, property (real after-tax)</definition>
    <standard_equation>
      <eviews_equation>yhp - yhp_aerr = ((1-tryh)*yhptn+yhpntn)/(.01*pcnia) </eviews_equation>
      <python_equation>yhp - yhp_aerr = ((1-tryh)*yhptn+yhpntn)/(.01*pcnia) </python_equation>
      <rhs_eq_var>pcnia</rhs_eq_var>
      <rhs_eq_var>tryh</rhs_eq_var>
      <rhs_eq_var>yhpntn</rhs_eq_var>
      <rhs_eq_var>yhptn</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>yhpcd</name>
    <equation_type>Behavioral</equation_type>
    <sector>Household Expenditures</sector>
    <definition>Imputed income of the stock of consumer durables, 2012$</definition>
    <standard_equation>
      <eviews_equation>log(yhpcd) - yhpcd_aerr = log(y_yhpcd(1)) + log(kcd(-1)) </eviews_equation>
      <python_equation>log(yhpcd) - yhpcd_aerr = log(y_yhpcd_1) + log(kcd(-1)) </python_equation>
      <coeff>
        <cf_name>y_yhpcd(1)</cf_name>
        <cf_value>0.053750000000000000E+00</cf_value>
      </coeff>
      <rhs_eq_var>kcd</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>yhpgap</name>
    <equation_type>Identity</equation_type>
    <sector>Nominal Income</sector>
    <definition>Income, household, property, ratio to YH, cyclical component (real after-tax)</definition>
    <description>YHPGAP is the percentage deviation of the actual from the trend
ratio of household property income to total household income (YHPSHR
and ZYHPST, respectively).
</description>
    <standard_equation>
      <eviews_equation>yhpgap - yhpgap_aerr = 100*log(yhpshr/zyhpst)
	 </eviews_equation>
      <python_equation>yhpgap - yhpgap_aerr = 100*log(yhpshr/zyhpst)
	 </python_equation>
      <rhs_eq_var>yhpshr</rhs_eq_var>
      <rhs_eq_var>zyhpst</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>yhpntn</name>
    <equation_type>Identity</equation_type>
    <sector>Nominal Income</sector>
    <definition>Income, household, property, non-taxable component</definition>
    <description>Household non-taxable property income in FRB/US includes several
items not included in the NIPA definition of personal income:
imputed income from the stock of consumer durables, less consumer
interest payments to business; corporate retained earnings; and
inflation losses on the stock of government debt.
</description>
    <standard_equation>
      <eviews_equation>yhpntn - yhpntn_aerr = .01*pcnia*pcdr*yhpcd
                     - yhibn + ynicpn - tcin - ynidn
                     - .01 * zpi10 *gfdbtn
	 </eviews_equation>
      <python_equation>yhpntn - yhpntn_aerr = .01*pcnia*pcdr*yhpcd
                     - yhibn + ynicpn - tcin - ynidn
                     - .01 * zpi10 *gfdbtn
	 </python_equation>
      <rhs_eq_var>gfdbtn</rhs_eq_var>
      <rhs_eq_var>pcdr</rhs_eq_var>
      <rhs_eq_var>pcnia</rhs_eq_var>
      <rhs_eq_var>tcin</rhs_eq_var>
      <rhs_eq_var>yhibn</rhs_eq_var>
      <rhs_eq_var>yhpcd</rhs_eq_var>
      <rhs_eq_var>ynicpn</rhs_eq_var>
      <rhs_eq_var>ynidn</rhs_eq_var>
      <rhs_eq_var>zpi10</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>yhpshr</name>
    <equation_type>Identity</equation_type>
    <sector>Nominal Income</sector>
    <definition>Income, household, property, ratio to YH (real after-tax)</definition>
    <standard_equation>
      <eviews_equation>yhpshr - yhpshr_aerr = yhp/yh </eviews_equation>
      <python_equation>yhpshr - yhpshr_aerr = yhp/yh </python_equation>
      <rhs_eq_var>yh</rhs_eq_var>
      <rhs_eq_var>yhp</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>yhptn</name>
    <equation_type>Identity</equation_type>
    <sector>Nominal Income</sector>
    <definition>Income, household, property, taxable component</definition>
    <description>Household taxable property income in FRB/US includes interest and
rental income, dividends, and self-employed income.  The
multiplicative factor UYHPTN adjusts for the difference between
total dividends (YNIDN) and personal dividend income, which
reflects dividends paid to state and local governments.

</description>
    <standard_equation>
      <eviews_equation>yhptn - yhptn_aerr = uyhptn*(ynirn+gfintn+ynidn+yhibn)
	 </eviews_equation>
      <python_equation>yhptn - yhptn_aerr = uyhptn*(ynirn+gfintn+ynidn+yhibn)
	 </python_equation>
      <rhs_eq_var>gfintn</rhs_eq_var>
      <rhs_eq_var>uyhptn</rhs_eq_var>
      <rhs_eq_var>yhibn</rhs_eq_var>
      <rhs_eq_var>ynidn</rhs_eq_var>
      <rhs_eq_var>ynirn</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>yhshr</name>
    <equation_type>Identity</equation_type>
    <sector>Nominal Income</sector>
    <definition>Income, household, total, ratio to XGDP (real after-tax)</definition>
    <standard_equation>
      <eviews_equation>yhshr - yhshr_aerr = yh/xgdp </eviews_equation>
      <python_equation>yhshr - yhshr_aerr = yh/xgdp </python_equation>
      <rhs_eq_var>xgdp</rhs_eq_var>
      <rhs_eq_var>yh</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>yhsn</name>
    <equation_type>Identity</equation_type>
    <sector>Nominal Income</sector>
    <definition>Personal saving</definition>
    <standard_equation>
      <eviews_equation>yhsn - yhsn_aerr = yhln + yhtn + yhptn - tpn - ecnian - yhibn
                 + uyhsn * xgdptn
	 </eviews_equation>
      <python_equation>yhsn - yhsn_aerr = yhln + yhtn + yhptn - tpn - ecnian - yhibn
                 + uyhsn * xgdptn
	 </python_equation>
      <rhs_eq_var>ecnian</rhs_eq_var>
      <rhs_eq_var>tpn</rhs_eq_var>
      <rhs_eq_var>uyhsn</rhs_eq_var>
      <rhs_eq_var>xgdptn</rhs_eq_var>
      <rhs_eq_var>yhibn</rhs_eq_var>
      <rhs_eq_var>yhln</rhs_eq_var>
      <rhs_eq_var>yhptn</rhs_eq_var>
      <rhs_eq_var>yhtn</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>yht</name>
    <equation_type>Identity</equation_type>
    <sector>Nominal Income</sector>
    <definition>Income, household, transfer (real after-tax), net basis</definition>
    <standard_equation>
      <eviews_equation>yht - yht_aerr = yhtn/(.01*pcnia) </eviews_equation>
      <python_equation>yht - yht_aerr = yhtn/(.01*pcnia) </python_equation>
      <rhs_eq_var>pcnia</rhs_eq_var>
      <rhs_eq_var>yhtn</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>yhtgap</name>
    <equation_type>Identity</equation_type>
    <sector>Nominal Income</sector>
    <definition>Income, household, transfer, ratio to YH, cyclical component (real after-tax)</definition>
    <description>YHTGAP is the percentage deviation of the actual from the trend
ratio of household transfer income to total household income (YHTSHR
and ZYTHST, respectively).
</description>
    <standard_equation>
      <eviews_equation>yhtgap - yhtgap_aerr = 100*log(yhtshr/zyhtst)
	 </eviews_equation>
      <python_equation>yhtgap - yhtgap_aerr = 100*log(yhtshr/zyhtst)
	 </python_equation>
      <rhs_eq_var>yhtshr</rhs_eq_var>
      <rhs_eq_var>zyhtst</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>yhtn</name>
    <equation_type>Identity</equation_type>
    <sector>Nominal Income</sector>
    <definition>Income, household, transfer payments. net basis</definition>
    <description>The exogenous conversion factor (UYHTN) in the identity for
transfer payments to persons (YHTN) reflects the omission of
business transfer payments from the equation.
</description>
    <standard_equation>
      <eviews_equation>yhtn - yhtn_aerr = uyhtn*gtn
	 </eviews_equation>
      <python_equation>yhtn - yhtn_aerr = uyhtn*gtn
	 </python_equation>
      <rhs_eq_var>gtn</rhs_eq_var>
      <rhs_eq_var>uyhtn</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>yhtshr</name>
    <equation_type>Identity</equation_type>
    <sector>Nominal Income</sector>
    <definition>Income, household, transfer, ratio to YH (real after-tax)</definition>
    <standard_equation>
      <eviews_equation>yhtshr - yhtshr_aerr = yht/yh </eviews_equation>
      <python_equation>yhtshr - yhtshr_aerr = yht/yh </python_equation>
      <rhs_eq_var>yh</rhs_eq_var>
      <rhs_eq_var>yht</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>ykbfin</name>
    <equation_type>Identity</equation_type>
    <sector>Nominal Income</sector>
    <definition>Income from stock of BFI</definition>
    <standard_equation>
      <eviews_equation>ykbfin - ykbfin_aerr = .01*rtbfi*pxb* ( kbfi +  kbfi(-1)) /2 </eviews_equation>
      <python_equation>ykbfin - ykbfin_aerr = .01*rtbfi*pxb* ( kbfi +  kbfi(-1)) /2 </python_equation>
      <rhs_eq_var>kbfi</rhs_eq_var>
      <rhs_eq_var>pxb</rhs_eq_var>
      <rhs_eq_var>rtbfi</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>ykin</name>
    <equation_type>Identity</equation_type>
    <sector>Nominal Income</sector>
    <definition>Income from stock of inventories</definition>
    <standard_equation>
      <eviews_equation>ykin - ykin_aerr = .01*rtinv*pxb* (ki + ki(-1)) /2 </eviews_equation>
      <python_equation>ykin - ykin_aerr = .01*rtinv*pxb* (ki + ki(-1)) /2 </python_equation>
      <rhs_eq_var>ki</rhs_eq_var>
      <rhs_eq_var>pxb</rhs_eq_var>
      <rhs_eq_var>rtinv</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>ymsdn</name>
    <equation_type>Exogenous</equation_type>
    <definition>Microsoft one-time dividend payout in 2004Q4</definition>
    <exogenous_projection>7</exogenous_projection>
  </variable>
  <variable>
    <name>ynicpn</name>
    <equation_type>Identity</equation_type>
    <sector>Nominal Income</sector>
    <definition>Corporate profits (national income component)</definition>
    <description>Corporate profits (YNICPN) are the residual component of national
income (YNIN - YNILN - YNIIN - YNISEN).  To mitigate numerical
problems in simulations, the max function places a positive lower
bound on profits.
</description>
    <standard_equation>
      <eviews_equation>ynicpn - ynicpn_aerr = @recode( (ynin-yniln-ynirn+uynicpnr*xgdpn)&gt;(tcin+.01*xgdpn), (ynin-yniln-ynirn+uynicpnr*xgdpn), (tcin+.01*xgdpn))
	 </eviews_equation>
      <python_equation>ynicpn - ynicpn_aerr = max(( (ynin-yniln-ynirn+uynicpnr*xgdpn)),( (tcin+.01*xgdpn)))
	 </python_equation>
      <rhs_eq_var>tcin</rhs_eq_var>
      <rhs_eq_var>uynicpnr</rhs_eq_var>
      <rhs_eq_var>xgdpn</rhs_eq_var>
      <rhs_eq_var>yniln</rhs_eq_var>
      <rhs_eq_var>ynin</rhs_eq_var>
      <rhs_eq_var>ynirn</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>ynidn</name>
    <equation_type>Behavioral</equation_type>
    <sector>Nominal Income</sector>
    <definition>Dividends (national income component)</definition>
    <description>Dividends are modeled using the polynomial adjustment cost (PAC)
framework.  Thus growth in real dividends depends on the three
standard PAC terms -- the degree to which dividends were out of
equilibrium last period, lagged dividend growth, and expected growth
of desired dividents.  To translate the general PAC specification,
whose structure is shown below in the PAC Overview section, associate
log((YNIDN-YMSDN)/PXB) with y, log(QYNIDN/PXB) with y*, and ZYNID
with the expected weighted sum of future &amp;Delta;y*.  The order of
adjustment costs (m) is 2.  The equation adjusts dividends for the
one-time Microsoft cash payout of late 2004 (YMSDN).

PAC Overview: Let y denote the decision variable and y* its desired
level in the absence of adjustment frictions.  The decision rule
derived from the PAC Euler equation has the following form.

(1) &amp;Delta;y&lt;sub&gt;t&lt;/sub&gt; = a&lt;sub&gt;0&lt;/sub&gt;(y*&lt;sub&gt;t-1&lt;/sub&gt; -
      y&lt;sub&gt;t-1&lt;/sub&gt;) + &amp;sum;&lt;sub&gt;i=1,m-1&lt;/sub&gt;
      a&lt;sub&gt;i&lt;/sub&gt;&amp;Delta;y&lt;sub&gt;t-i&lt;/sub&gt; +
      E&lt;sub&gt;t-1&lt;/sub&gt;&amp;sum;&lt;sub&gt;i=0,&amp;infin;&lt;/sub&gt;d&lt;sub&gt;i&lt;/sub&gt;&amp;Delta;y*&lt;sub&gt;t+i&lt;/sub&gt;

 The order of adjustment costs is given by parameter m.  The
forward weights, d&lt;sub&gt;i&lt;/sub&gt; {i=0,&amp;infin;}, are functions of the
estimated values of a&lt;sub&gt;i&lt;/sub&gt; {i=0,m-1} and a fixed discount
factor (0.98).  Estimation imposes the growth neutrality restriction
&amp;sum;&lt;sub&gt;i=1,m-1&lt;/sub&gt;a&lt;sub&gt;i&lt;/sub&gt; +
&amp;sum;&lt;sub&gt;i=0,&amp;infin;&lt;/sub&gt;d&lt;sub&gt;i&lt;/sub&gt; = 1.  For more information,
see &lt;a href="pac_basics.pdf"&gt;PAC Basics&lt;/a&gt;.
</description>
    <standard_equation>
      <eviews_equation>dlog((ynidn-ymsdn)/pxb)  - ynidn_aerr =
            y_ynidn(1) * log(qynidn(-1)/(ynidn(-1)-ymsdn(-1)))
          + y_ynidn(2) * dlog((ynidn(-1)-ymsdn(-1))/pxb(-1))
          + y_ynidn(3) * zynid</eviews_equation>
      <python_equation>(log((ynidn-ymsdn)/pxb) - log((ynidn(-1)-ymsdn(-1))/pxb(-1)))  - ynidn_aerr =
            y_ynidn_1 * log(qynidn(-1)/(ynidn(-1)-ymsdn(-1)))
          + y_ynidn_2 * (log((ynidn(-1)-ymsdn(-1))/pxb(-1)) - log((ynidn(-2)-ymsdn(-2))/pxb(-2)))
          + y_ynidn_3 * zynid</python_equation>
      <coeff>
        <cf_name>y_ynidn(1)</cf_name>
        <cf_value>0.1072695065113163</cf_value>
        <t_stat>5.908232672201109</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_ynidn(2)</cf_name>
        <cf_value>-0.2095634314107719</cf_value>
        <t_stat>-3.14267687987399</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_ynidn(3)</cf_name>
        <cf_value>1</cf_value>
      </coeff>
      <rhs_eq_var>pxb</rhs_eq_var>
      <rhs_eq_var>qynidn</rhs_eq_var>
      <rhs_eq_var>ymsdn</rhs_eq_var>
      <rhs_eq_var>ynidn</rhs_eq_var>
      <rhs_eq_var>zynid</rhs_eq_var>
      <estimation_statistics>
        <adjusted_r_squared>0.06032612919807434</adjusted_r_squared>
        <date>08/30/18   Time: 10:03 </date>
        <durbin_watson>1.666454076766968</durbin_watson>
        <method>Least Squares</method>
        <r_squared>0.06480076909065246</r_squared>
        <sample_end>2017Q4</sample_end>
        <sample_start>1965Q2</sample_start>
        <se_of_regression>0.03990373015403748</se_of_regression>
      </estimation_statistics>
    </standard_equation>
    <kfcalc>1</kfcalc>
    <stochastic_type>IN</stochastic_type>
  </variable>
  <variable>
    <name>yniln</name>
    <equation_type>Identity</equation_type>
    <sector>Nominal Income</sector>
    <definition>Labor income (national income component)</definition>
    <description>The exogenous conversion factor (UYL) in the identity for labor
income reflects: (1) the omission of labor income in the farm and
household and institutions sectors from the equation; and (2) the use
of a measure of aggregate hours that includes not only hours of
employees but also hours of the self-employed.
</description>
    <standard_equation>
      <eviews_equation>yniln - yniln_aerr = 0.01 *  uyl * (pl*lhp + pgfl*egfl + pgsl*egsl) </eviews_equation>
      <python_equation>yniln - yniln_aerr = 0.01 *  uyl * (pl*lhp + pgfl*egfl + pgsl*egsl) </python_equation>
      <rhs_eq_var>egfl</rhs_eq_var>
      <rhs_eq_var>egsl</rhs_eq_var>
      <rhs_eq_var>lhp</rhs_eq_var>
      <rhs_eq_var>pgfl</rhs_eq_var>
      <rhs_eq_var>pgsl</rhs_eq_var>
      <rhs_eq_var>pl</rhs_eq_var>
      <rhs_eq_var>uyl</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>ynin</name>
    <equation_type>Identity</equation_type>
    <sector>Nominal Income</sector>
    <definition>National income</definition>
    <description>The exogenous conversion factor (UYNI) in the identity for
national income (YNIN) reflects the omission of the statistical
discrepancy and business transfer payments from the equation.
</description>
    <standard_equation>
      <eviews_equation>ynin - ynin_aerr = uyni*(xgdin+fynin-jccan) </eviews_equation>
      <python_equation>ynin - ynin_aerr = uyni*(xgdin+fynin-jccan) </python_equation>
      <rhs_eq_var>fynin</rhs_eq_var>
      <rhs_eq_var>jccan</rhs_eq_var>
      <rhs_eq_var>uyni</rhs_eq_var>
      <rhs_eq_var>xgdin</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>ynirn</name>
    <equation_type>Behavioral</equation_type>
    <sector>Government</sector>
    <definition>Net interest, rental and proprietors' incomes (national income components)</definition>
    <description>The share of net interest, rental income and proprietor's of nominal GDP
varies with the change in the triple B corporate bond rate.</description>
    <standard_equation>
      <eviews_equation>ynirn/xgdpn - ynirn_aerr = y_ynirn(1)
	 + y_ynirn(2)*(ynirn(-1)/xgdpn(-1))
	 + y_ynirn(3)*0.01*d(rbbb)
	 </eviews_equation>
      <python_equation>ynirn/xgdpn - ynirn_aerr = y_ynirn_1
	 + y_ynirn_2*(ynirn(-1)/xgdpn(-1))
	 + y_ynirn_3*0.01*(rbbb - (rbbb(-1)))
	 </python_equation>
      <coeff>
        <cf_name>y_ynirn(1)</cf_name>
        <cf_value>0.007593</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_ynirn(2)</cf_name>
        <cf_value>0.944044</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_ynirn(3)</cf_name>
        <cf_value>0.074817</cf_value>
      </coeff>
      <rhs_eq_var>rbbb</rhs_eq_var>
      <rhs_eq_var>xgdpn</rhs_eq_var>
      <rhs_eq_var>ynirn</rhs_eq_var>
    </standard_equation>
    <stochastic_type>GV</stochastic_type>
  </variable>
  <variable>
    <name>ypn</name>
    <equation_type>Identity</equation_type>
    <sector>Nominal Income</sector>
    <definition>Personal income</definition>
    <description>The exogenous conversion factor (UYP) used in the personal income
identity reflects the ommission of a miscellaneous set of adjustments,
such as the difference between total and personal dividend payments,
and the omission of business transfers payments to households.
</description>
    <standard_equation>
      <eviews_equation>ypn - ypn_aerr = uyp * (yhln + yhtn + yhptn) </eviews_equation>
      <python_equation>ypn - ypn_aerr = uyp * (yhln + yhtn + yhptn) </python_equation>
      <rhs_eq_var>uyp</rhs_eq_var>
      <rhs_eq_var>yhln</rhs_eq_var>
      <rhs_eq_var>yhptn</rhs_eq_var>
      <rhs_eq_var>yhtn</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>zdivgr</name>
    <equation_type>Identity</equation_type>
    <sector>Expectations</sector>
    <definition>Expected growth rate of real dividends, for WPSN eq. (VAR exp.)</definition>
    <description>ZDIVGR is a weighted average of growth rates of future after-tax
corporate profits.  The weights sum to one and decline geometrically
at a rate based on the infinite maturity of corporate equity and the
average historical level of the nominal rate of interest.  The
equation shown below is the reduced-form representation of this
expectational computation based on a small-scale VAR model.

</description>
    <standard_equation>
      <eviews_equation>zdivgr  - zdivgr_aerr =
           y_zdivgr(1)
          + y_zdivgr(2)*picnia
          + y_zdivgr(3)*picnia(-1)
          + y_zdivgr(4)*picnia(-2)
          + y_zdivgr(5)*picnia(-3)
          + y_zdivgr(6)*rff
          + y_zdivgr(7)*rff(-1)
          + y_zdivgr(8)*rff(-2)
          + y_zdivgr(9)*rff(-3)
          + y_zdivgr(10)*rtr
          + y_zdivgr(11)*ptr
          + y_zdivgr(12)*xgap
          + y_zdivgr(13)*xgap(-1)
          + y_zdivgr(14)*xgap(-2)
          + y_zdivgr(15)*xgap(-3)
          + y_zdivgr(16)*hgynid
          + y_zdivgr(17)*hgynid(-1)
          + y_zdivgr(18)*hgynid(-2)
          + y_zdivgr(19)*hgynid(-3)
          + y_zdivgr(20)*hxbt</eviews_equation>
      <python_equation>zdivgr  - zdivgr_aerr =
           y_zdivgr_1
          + y_zdivgr_2*picnia
          + y_zdivgr_3*picnia(-1)
          + y_zdivgr_4*picnia(-2)
          + y_zdivgr_5*picnia(-3)
          + y_zdivgr_6*rff
          + y_zdivgr_7*rff(-1)
          + y_zdivgr_8*rff(-2)
          + y_zdivgr_9*rff(-3)
          + y_zdivgr_10*rtr
          + y_zdivgr_11*ptr
          + y_zdivgr_12*xgap
          + y_zdivgr_13*xgap(-1)
          + y_zdivgr_14*xgap(-2)
          + y_zdivgr_15*xgap(-3)
          + y_zdivgr_16*hgynid
          + y_zdivgr_17*hgynid(-1)
          + y_zdivgr_18*hgynid(-2)
          + y_zdivgr_19*hgynid(-3)
          + y_zdivgr_20*hxbt</python_equation>
      <coeff>
        <cf_name>y_zdivgr(1)</cf_name>
        <cf_value>1.453758371220758e-14</cf_value>
        <t_stat>1.660474870568601</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zdivgr(2)</cf_name>
        <cf_value>-0.03432097699759745</cf_value>
        <t_stat>-48724985328778.53</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zdivgr(3)</cf_name>
        <cf_value>0.01503760188801399</cf_value>
        <t_stat>19407913877046.83</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zdivgr(4)</cf_name>
        <cf_value>0.008139233986467266</cf_value>
        <t_stat>10530569232428.41</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zdivgr(5)</cf_name>
        <cf_value>0.02806260424571279</cf_value>
        <t_stat>39277370309054.5</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zdivgr(6)</cf_name>
        <cf_value>-0.1147631155931414</cf_value>
        <t_stat>-93729833655062.26</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zdivgr(7)</cf_name>
        <cf_value>0.02378759550862853</cf_value>
        <t_stat>14094280489317.41</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zdivgr(8)</cf_name>
        <cf_value>-0.08000091281298219</cf_value>
        <t_stat>-47711759787397.93</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zdivgr(9)</cf_name>
        <cf_value>0.05291584088244318</cf_value>
        <t_stat>42478727222167.15</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zdivgr(10)</cf_name>
        <cf_value>0.1180605920154127</cf_value>
        <t_stat>44174069683861.81</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zdivgr(11)</cf_name>
        <cf_value>-0.0169184631226911</cf_value>
        <t_stat>-7073915781260.909</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zdivgr(12)</cf_name>
        <cf_value>-0.3193168668820861</cf_value>
        <t_stat>-190994496428330</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zdivgr(13)</cf_name>
        <cf_value>0.1900611332314869</cf_value>
        <t_stat>65928707749384.32</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zdivgr(14)</cf_name>
        <cf_value>0.05865254915210798</cf_value>
        <t_stat>20436466465038.53</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zdivgr(15)</cf_name>
        <cf_value>0.05204047323627287</cf_value>
        <t_stat>29132806255196.96</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zdivgr(16)</cf_name>
        <cf_value>0.01513617207696648</cf_value>
        <t_stat>297104460008889</t_stat>
        <distributed_lag_group>4</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zdivgr(17)</cf_name>
        <cf_value>0.002907781394121129</cf_value>
        <t_stat>57072723370390.99</t_stat>
        <distributed_lag_group>4</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zdivgr(18)</cf_name>
        <cf_value>0.001820586788429011</cf_value>
        <t_stat>36160120274873.61</t_stat>
        <distributed_lag_group>4</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zdivgr(19)</cf_name>
        <cf_value>-0.000832768187365904</cf_value>
        <t_stat>-17736610879362.07</t_stat>
        <distributed_lag_group>4</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zdivgr(20)</cf_name>
        <cf_value>0.9809682279278705</cf_value>
        <t_stat>481143671129519.6</t_stat>
      </coeff>
      <rhs_eq_var>hgynid</rhs_eq_var>
      <rhs_eq_var>hxbt</rhs_eq_var>
      <rhs_eq_var>picnia</rhs_eq_var>
      <rhs_eq_var>ptr</rhs_eq_var>
      <rhs_eq_var>rff</rhs_eq_var>
      <rhs_eq_var>rtr</rhs_eq_var>
      <rhs_eq_var>xgap</rhs_eq_var>
    </standard_equation>
    <mce_equation>
      <mce_group>mcap</mce_group>
      <mce_description>ZDIVGR is a weighted average of growth rates of future after-tax
corporate profits.  The weights sum to one and decline geometrically
at a rate based on the infinite maturity of corporate equity and the
average historical level of the nominal rate of interest.
</mce_description>
      <eviews_equation>zdivgr - zdivgr_aerr = y_zdivgr(1) * hgynid(1)
                     + y_zdivgr(2) * zdivgr(1)
</eviews_equation>
      <python_equation>zdivgr - zdivgr_aerr = y_zdivgr_1 * hgynid(1)
                     + y_zdivgr_2 * zdivgr(1)
</python_equation>
      <coeff>
        <cf_name>y_zdivgr(1)</cf_name>
        <cf_value>0.009757264257434617</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zdivgr(2)</cf_name>
        <cf_value>0.9902427357425654</cf_value>
      </coeff>
      <rhs_eq_var>hgynid</rhs_eq_var>
      <rhs_eq_var>zdivgr</rhs_eq_var>
    </mce_equation>
  </variable>
  <variable>
    <name>zebfi</name>
    <equation_type>Identity</equation_type>
    <sector>Expectations</sector>
    <definition>Expected growth rate of business output EBFI (VAR exp.)</definition>
    <description> The weighted average growth rate of expected future output for
BFI, ZEBFI, is computed from forecasts of the small-scale VAR
model used in the estimation of the equipment (EBFI) PAC equation.  The
forward weights are those implied by the estimated PAC
coefficients. The equation shown below is the reduced-form
representation of this expectational computation.
</description>
    <standard_equation>
      <eviews_equation>zebfi  - zebfi_aerr =
           y_zebfi(1)
          + y_zebfi(2)*picnia(-1)
          + y_zebfi(3)*picnia(-2)
          + y_zebfi(4)*picnia(-3)
          + y_zebfi(5)*picnia(-4)
          + y_zebfi(6)*rff(-1)
          + y_zebfi(7)*rff(-2)
          + y_zebfi(8)*rff(-3)
          + y_zebfi(9)*rff(-4)
          + y_zebfi(10)*rtr(-1)
          + y_zebfi(11)*ptr(-1)
          + y_zebfi(12)*xgap(-1)
          + y_zebfi(13)*xgap(-2)
          + y_zebfi(14)*xgap(-3)
          + y_zebfi(15)*xgap(-4)
          + y_zebfi(16)*dlog(qebfi(-1))
          + y_zebfi(17)*dlog(qebfi(-2))
          + y_zebfi(18)*dlog(qebfi(-3))
          + y_zebfi(19)*dlog(qebfi(-4))
          + y_zebfi(20)*hxbt(-1)/400
          + y_zebfi(21)*hgpbfir(-1)/400</eviews_equation>
      <python_equation>zebfi  - zebfi_aerr =
           y_zebfi_1
          + y_zebfi_2*picnia(-1)
          + y_zebfi_3*picnia(-2)
          + y_zebfi_4*picnia(-3)
          + y_zebfi_5*picnia(-4)
          + y_zebfi_6*rff(-1)
          + y_zebfi_7*rff(-2)
          + y_zebfi_8*rff(-3)
          + y_zebfi_9*rff(-4)
          + y_zebfi_10*rtr(-1)
          + y_zebfi_11*ptr(-1)
          + y_zebfi_12*xgap(-1)
          + y_zebfi_13*xgap(-2)
          + y_zebfi_14*xgap(-3)
          + y_zebfi_15*xgap(-4)
          + y_zebfi_16*(log(qebfi(-1)) - log(qebfi(-2)))
          + y_zebfi_17*(log(qebfi(-2)) - log(qebfi(-3)))
          + y_zebfi_18*(log(qebfi(-3)) - log(qebfi(-4)))
          + y_zebfi_19*(log(qebfi(-4)) - log(qebfi(-5)))
          + y_zebfi_20*hxbt(-1)/400
          + y_zebfi_21*hgpbfir(-1)/400</python_equation>
      <coeff>
        <cf_name>y_zebfi(1)</cf_name>
        <cf_value>-1.836241195103586e-16</cf_value>
        <t_stat>-7.690076218323741</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zebfi(2)</cf_name>
        <cf_value>-0.0004311442119548698</cf_value>
        <t_stat>-320206848445540.6</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zebfi(3)</cf_name>
        <cf_value>-0.0005071417360301063</cf_value>
        <t_stat>-353077628504199.2</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zebfi(4)</cf_name>
        <cf_value>-3.881819160880394e-05</cf_value>
        <t_stat>-26256646603762.47</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zebfi(5)</cf_name>
        <cf_value>0.0001679875754395107</cf_value>
        <t_stat>115277170083979.5</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zebfi(6)</cf_name>
        <cf_value>-0.0009752514829426216</cf_value>
        <t_stat>-390592430755039</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zebfi(7)</cf_name>
        <cf_value>0.0004172696850180997</cf_value>
        <t_stat>129716164513429.8</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zebfi(8)</cf_name>
        <cf_value>9.804022481480238e-06</cf_value>
        <t_stat>3144326760867.87</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zebfi(9)</cf_name>
        <cf_value>0.0004025448938499502</cf_value>
        <t_stat>171769141640141</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zebfi(10)</cf_name>
        <cf_value>0.0001456328815931833</cf_value>
        <t_stat>23432782253918.05</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zebfi(11)</cf_name>
        <cf_value>0.0008091165641542619</cf_value>
        <t_stat>155152147190294.5</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zebfi(12)</cf_name>
        <cf_value>0.0006914817407124366</cf_value>
        <t_stat>216118443781045.9</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zebfi(13)</cf_name>
        <cf_value>-0.001524629901125206</cf_value>
        <t_stat>-284178282543195.7</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zebfi(14)</cf_name>
        <cf_value>0.0001821021224146923</cf_value>
        <t_stat>33669345477756.99</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zebfi(15)</cf_name>
        <cf_value>0.0001709602428972692</cf_value>
        <t_stat>51628647230980.14</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zebfi(16)</cf_name>
        <cf_value>0.01429456576547675</cf_value>
        <t_stat>190798984072385.3</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zebfi(17)</cf_name>
        <cf_value>0.01004233676573099</cf_value>
        <t_stat>135460773436413.1</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zebfi(18)</cf_name>
        <cf_value>0.005011839434648968</cf_value>
        <t_stat>74374706769186.19</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zebfi(19)</cf_name>
        <cf_value>0.003887436951496095</cf_value>
        <t_stat>58285988898562.91</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zebfi(20)</cf_name>
        <cf_value>0.1422818153960116</cf_value>
        <t_stat>67782170710475.25</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zebfi(21)</cf_name>
        <cf_value>-0.1422818153960531</cf_value>
        <t_stat>-29921689340197.61</t_stat>
      </coeff>
      <rhs_eq_var>hgpbfir</rhs_eq_var>
      <rhs_eq_var>hxbt</rhs_eq_var>
      <rhs_eq_var>picnia</rhs_eq_var>
      <rhs_eq_var>ptr</rhs_eq_var>
      <rhs_eq_var>qebfi</rhs_eq_var>
      <rhs_eq_var>rff</rhs_eq_var>
      <rhs_eq_var>rtr</rhs_eq_var>
      <rhs_eq_var>xgap</rhs_eq_var>
    </standard_equation>
    <mce_equation>
      <mce_group>mcother</mce_group>
      <mce_description> ZEBFI is a weighted average of future growth rates of business output.
The pattern of the weights is a function of the PAC adjustment
coefficients in the estimated equipment investment (EPD) equation.
The sum of the weights equals one minus the sum of the coefficients on
lagged growth of actual investment in the EPD equation.
</mce_description>
      <eviews_equation>zebfi - zebfi_aerr =
           y_zebfi(1) * d( log(xb), 0, 1 )
         + y_zebfi(2) * d( log(xb(1)), 0, 1 )
         + y_zebfi(3) * d( log(xb(2)), 0, 1 )
         + y_zebfi(4) * zebfi(1)
         + y_zebfi(5) * zebfi(2)
         + y_zebfi(6) * zebfi(3)
</eviews_equation>
      <python_equation>zebfi - zebfi_aerr =
           y_zebfi_1 * ( log(xb) - ( log(xb(-1))))
         + y_zebfi_2 * ( log(xb(1)) - ( log(xb)))
         + y_zebfi_3 * ( log(xb(2)) - ( log(xb(1))))
         + y_zebfi_4 * zebfi(1)
         + y_zebfi_5 * zebfi(2)
         + y_zebfi_6 * zebfi(3)
</python_equation>
      <coeff>
        <cf_name>y_zebfi(1)</cf_name>
        <cf_value>0.06074976222164443</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zebfi(2)</cf_name>
        <cf_value>-0.0301184063377007</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zebfi(3)</cf_name>
        <cf_value>-0.01727992769482984</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zebfi(4)</cf_name>
        <cf_value>1.419709462067156</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zebfi(5)</cf_name>
        <cf_value>-0.2113338089461142</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zebfi(6)</cf_name>
        <cf_value>-0.2844443675645073</cf_value>
      </coeff>
      <rhs_eq_var>xb</rhs_eq_var>
      <rhs_eq_var>zebfi</rhs_eq_var>
    </mce_equation>
  </variable>
  <variable>
    <name>zecd</name>
    <equation_type>Identity</equation_type>
    <sector>Expectations</sector>
    <definition>Expected growth rate of target durable consumption, for ECD eq. (VAR exp.)</definition>
    <description> The weighted average growth rate of expected future target
spending on consumer durables, ZECD, is computed from forecasts of the
small-scale VAR model used in the estimation of the consumer durables
(ECD) PAC equation.  The forward weights are those implied by the
estimated PAC coefficients. The equation shown below is the
reduced-form representation of this expectational computation.
</description>
    <standard_equation>
      <eviews_equation>zecd  - zecd_aerr =
           y_zecd(1)*picnia(-1)
          + y_zecd(2)*picnia(-2)
          + y_zecd(3)*picnia(-3)
          + y_zecd(4)*picnia(-4)
          + y_zecd(5)*rff(-1)
          + y_zecd(6)*rff(-2)
          + y_zecd(7)*rff(-3)
          + y_zecd(8)*rff(-4)
          + y_zecd(9)*xgap2(-1)
          + y_zecd(10)*xgap2(-2)
          + y_zecd(11)*xgap2(-3)
          + y_zecd(12)*xgap2(-4)
          + y_zecd(13)*ptr(-1)
          + y_zecd(14)*rtr(-1)
          + y_zecd(15)*yhgap(-1)
          + y_zecd(16)*yhgap(-2)
          + y_zecd(17)*yhgap(-3)
          + y_zecd(18)*yhgap(-4)
          + y_zecd(19)*yhtgap(-1)
          + y_zecd(20)*yhtgap(-2)
          + y_zecd(21)*yhtgap(-3)
          + y_zecd(22)*yhtgap(-4)
          + y_zecd(23)*yhpgap(-1)
          + y_zecd(24)*yhpgap(-2)
          + y_zecd(25)*yhpgap(-3)
          + y_zecd(26)*yhpgap(-4)
          + y_zecd(27)*hggdpt(-1)/400
          + y_zecd(28)*hgpcdr(-1)/400
          + y_zecd(29)*dlog(qecd(-1))
          + y_zecd(30)*dlog(qecd(-2))
          + y_zecd(31)*dlog(qecd(-3))
          + y_zecd(32)*dlog(qecd(-4))</eviews_equation>
      <python_equation>zecd  - zecd_aerr =
           y_zecd_1*picnia(-1)
          + y_zecd_2*picnia(-2)
          + y_zecd_3*picnia(-3)
          + y_zecd_4*picnia(-4)
          + y_zecd_5*rff(-1)
          + y_zecd_6*rff(-2)
          + y_zecd_7*rff(-3)
          + y_zecd_8*rff(-4)
          + y_zecd_9*xgap2(-1)
          + y_zecd_10*xgap2(-2)
          + y_zecd_11*xgap2(-3)
          + y_zecd_12*xgap2(-4)
          + y_zecd_13*ptr(-1)
          + y_zecd_14*rtr(-1)
          + y_zecd_15*yhgap(-1)
          + y_zecd_16*yhgap(-2)
          + y_zecd_17*yhgap(-3)
          + y_zecd_18*yhgap(-4)
          + y_zecd_19*yhtgap(-1)
          + y_zecd_20*yhtgap(-2)
          + y_zecd_21*yhtgap(-3)
          + y_zecd_22*yhtgap(-4)
          + y_zecd_23*yhpgap(-1)
          + y_zecd_24*yhpgap(-2)
          + y_zecd_25*yhpgap(-3)
          + y_zecd_26*yhpgap(-4)
          + y_zecd_27*hggdpt(-1)/400
          + y_zecd_28*hgpcdr(-1)/400
          + y_zecd_29*(log(qecd(-1)) - log(qecd(-2)))
          + y_zecd_30*(log(qecd(-2)) - log(qecd(-3)))
          + y_zecd_31*(log(qecd(-3)) - log(qecd(-4)))
          + y_zecd_32*(log(qecd(-4)) - log(qecd(-5)))</python_equation>
      <coeff>
        <cf_name>y_zecd(1)</cf_name>
        <cf_value>-0.0004244330449108246</cf_value>
        <t_stat>-76483653849891.18</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zecd(2)</cf_name>
        <cf_value>-0.000566112732916264</cf_value>
        <t_stat>-94838186067618.24</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zecd(3)</cf_name>
        <cf_value>-0.0004278354154853733</cf_value>
        <t_stat>-72212503875948.88</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zecd(4)</cf_name>
        <cf_value>4.275450618659433e-06</cf_value>
        <t_stat>771270288949.849</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zecd(5)</cf_name>
        <cf_value>-0.001333637468405136</cf_value>
        <t_stat>-138987252349557.1</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zecd(6)</cf_name>
        <cf_value>0.001785102754320539</cf_value>
        <t_stat>125725623069420.9</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zecd(7)</cf_name>
        <cf_value>-0.0002714744059753036</cf_value>
        <t_stat>-17222628523270.1</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zecd(8)</cf_name>
        <cf_value>0.0004596118643773856</cf_value>
        <t_stat>40071071869676.56</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zecd(9)</cf_name>
        <cf_value>0.0004286088490690454</cf_value>
        <t_stat>27107892827001.08</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zecd(10)</cf_name>
        <cf_value>-0.001112480888047013</cf_value>
        <t_stat>-42134951097191.46</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zecd(11)</cf_name>
        <cf_value>3.611331309391688e-05</cf_value>
        <t_stat>1304160365577.422</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zecd(12)</cf_name>
        <cf_value>7.975907057934714e-05</cf_value>
        <t_stat>4215740180329.646</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zecd(13)</cf_name>
        <cf_value>0.001414105742693884</cf_value>
        <t_stat>60854825918550.22</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zecd(14)</cf_name>
        <cf_value>-0.0006396027443177932</cf_value>
        <t_stat>-28330121768063.43</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zecd(15)</cf_name>
        <cf_value>-0.0001084142645104688</cf_value>
        <t_stat>-12149554933672.04</t_stat>
        <distributed_lag_group>4</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zecd(16)</cf_name>
        <cf_value>0.0002103631242011464</cf_value>
        <t_stat>19536743659262.91</t_stat>
        <distributed_lag_group>4</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zecd(17)</cf_name>
        <cf_value>0.0001780616641343914</cf_value>
        <t_stat>16022900609336.77</t_stat>
        <distributed_lag_group>4</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zecd(18)</cf_name>
        <cf_value>0.0001469127491672944</cf_value>
        <t_stat>15427132820762.18</t_stat>
        <distributed_lag_group>4</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zecd(19)</cf_name>
        <cf_value>-0.0001398804267539158</cf_value>
        <t_stat>-34267046626488.63</t_stat>
        <distributed_lag_group>5</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zecd(20)</cf_name>
        <cf_value>-3.380075732963865e-05</cf_value>
        <t_stat>-7334743944164.851</t_stat>
        <distributed_lag_group>5</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zecd(21)</cf_name>
        <cf_value>0.0001669757937064113</cf_value>
        <t_stat>35373980501884.69</t_stat>
        <distributed_lag_group>5</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zecd(22)</cf_name>
        <cf_value>0.0001135069368207403</cf_value>
        <t_stat>28093678674898.05</t_stat>
        <distributed_lag_group>5</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zecd(23)</cf_name>
        <cf_value>0.0001241231278850025</cf_value>
        <t_stat>20000644123801.06</t_stat>
        <distributed_lag_group>6</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zecd(24)</cf_name>
        <cf_value>-0.0002035919714857632</cf_value>
        <t_stat>-27182839410765.55</t_stat>
        <distributed_lag_group>6</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zecd(25)</cf_name>
        <cf_value>5.798918819304864e-05</cf_value>
        <t_stat>7943716981572.065</t_stat>
        <distributed_lag_group>6</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zecd(26)</cf_name>
        <cf_value>0.0001142807758711503</cf_value>
        <t_stat>18818760701144.66</t_stat>
        <distributed_lag_group>6</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zecd(27)</cf_name>
        <cf_value>1.020354953788767</cf_value>
        <t_stat>132326801278756.1</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zecd(28)</cf_name>
        <cf_value>-0.752244722798112</cf_value>
        <t_stat>-193627783552012.3</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zecd(29)</cf_name>
        <cf_value>0.030859810575484</cf_value>
        <t_stat>38896101935495.72</t_stat>
        <distributed_lag_group>7</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zecd(30)</cf_name>
        <cf_value>0.0288465643523214</cf_value>
        <t_stat>36444930648840.07</t_stat>
        <distributed_lag_group>7</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zecd(31)</cf_name>
        <cf_value>-0.007704793774557718</cf_value>
        <t_stat>-10699578343323.7</t_stat>
        <distributed_lag_group>7</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zecd(32)</cf_name>
        <cf_value>-0.01236375512939394</cf_value>
        <t_stat>-18083667017464.91</t_stat>
        <distributed_lag_group>7</distributed_lag_group>
      </coeff>
      <rhs_eq_var>hggdpt</rhs_eq_var>
      <rhs_eq_var>hgpcdr</rhs_eq_var>
      <rhs_eq_var>picnia</rhs_eq_var>
      <rhs_eq_var>ptr</rhs_eq_var>
      <rhs_eq_var>qecd</rhs_eq_var>
      <rhs_eq_var>rff</rhs_eq_var>
      <rhs_eq_var>rtr</rhs_eq_var>
      <rhs_eq_var>xgap2</rhs_eq_var>
      <rhs_eq_var>yhgap</rhs_eq_var>
      <rhs_eq_var>yhpgap</rhs_eq_var>
      <rhs_eq_var>yhtgap</rhs_eq_var>
    </standard_equation>
    <mce_equation>
      <mce_group>mcother</mce_group>
      <mce_description> ZECD is a weighted average of future growth rates of the target
level of investment in consumer durables.  The pattern of the weights
is a function of the PAC adjustment coefficients in the estimated
consumer durables (ECD) equation.  The sum of the weights equals one
minus the sum of the coefficients on lagged growth of actual investment
in consumer durables in the ECD equation.
</mce_description>
      <eviews_equation>zecd - zecd_aerr =
           y_zecd(1) * d( log(qecd), 0, 1 )
         + y_zecd(2) * d( log(qecd(1)), 0, 1 )
         + y_zecd(3) * zecd(1)
         + y_zecd(4) * zecd(2)
</eviews_equation>
      <python_equation>zecd - zecd_aerr =
           y_zecd_1 * ( log(qecd) - ( log(qecd(-1))))
         + y_zecd_2 * ( log(qecd(1)) - ( log(qecd)))
         + y_zecd_3 * zecd(1)
         + y_zecd_4 * zecd(2)
</python_equation>
      <coeff>
        <cf_name>y_zecd(1)</cf_name>
        <cf_value>0.17459411013677</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zecd(2)</cf_name>
        <cf_value>0.01005960032016498</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zecd(3)</cf_name>
        <cf_value>0.7681801340474574</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zecd(4)</cf_name>
        <cf_value>0.05761706573196929</cf_value>
      </coeff>
      <rhs_eq_var>qecd</rhs_eq_var>
      <rhs_eq_var>zecd</rhs_eq_var>
    </mce_equation>
  </variable>
  <variable>
    <name>zeco</name>
    <equation_type>Identity</equation_type>
    <sector>Expectations</sector>
    <definition>Expected growth rate of target nondurables and nonhousing services, for ECO eq (VAR</definition>
    <description> The weighted average growth rate of expected future target
consumption, ZECO, is computed from forecasts of the small-scale VAR
model used in the estimation of the consumption (ECO) PAC equation.
The forward weights are those implied by the estimated PAC
coefficients. The equation shown below is the reduced-form
representation of this expectational computation.
</description>
    <standard_equation>
      <eviews_equation>zeco  - zeco_aerr =
           y_zeco(1)*picnia(-1)
          + y_zeco(2)*picnia(-2)
          + y_zeco(3)*picnia(-3)
          + y_zeco(4)*picnia(-4)
          + y_zeco(5)*rff(-1)
          + y_zeco(6)*rff(-2)
          + y_zeco(7)*rff(-3)
          + y_zeco(8)*rff(-4)
          + y_zeco(9)*xgap2(-1)
          + y_zeco(10)*xgap2(-2)
          + y_zeco(11)*xgap2(-3)
          + y_zeco(12)*xgap2(-4)
          + y_zeco(13)*ptr(-1)
          + y_zeco(14)*rtr(-1)
          + y_zeco(15)*yhgap(-1)
          + y_zeco(16)*yhgap(-2)
          + y_zeco(17)*yhgap(-3)
          + y_zeco(18)*yhgap(-4)
          + y_zeco(19)*yhtgap(-1)
          + y_zeco(20)*yhtgap(-2)
          + y_zeco(21)*yhtgap(-3)
          + y_zeco(22)*yhtgap(-4)
          + y_zeco(23)*yhpgap(-1)
          + y_zeco(24)*yhpgap(-2)
          + y_zeco(25)*yhpgap(-3)
          + y_zeco(26)*yhpgap(-4)
          + y_zeco(27)*hggdpt(-1)/400
          + y_zeco(28)*dlog(qeco(-1))
          + y_zeco(29)*dlog(qeco(-2))
          + y_zeco(30)*dlog(qeco(-3))
          + y_zeco(31)*dlog(qeco(-4))</eviews_equation>
      <python_equation>zeco  - zeco_aerr =
           y_zeco_1*picnia(-1)
          + y_zeco_2*picnia(-2)
          + y_zeco_3*picnia(-3)
          + y_zeco_4*picnia(-4)
          + y_zeco_5*rff(-1)
          + y_zeco_6*rff(-2)
          + y_zeco_7*rff(-3)
          + y_zeco_8*rff(-4)
          + y_zeco_9*xgap2(-1)
          + y_zeco_10*xgap2(-2)
          + y_zeco_11*xgap2(-3)
          + y_zeco_12*xgap2(-4)
          + y_zeco_13*ptr(-1)
          + y_zeco_14*rtr(-1)
          + y_zeco_15*yhgap(-1)
          + y_zeco_16*yhgap(-2)
          + y_zeco_17*yhgap(-3)
          + y_zeco_18*yhgap(-4)
          + y_zeco_19*yhtgap(-1)
          + y_zeco_20*yhtgap(-2)
          + y_zeco_21*yhtgap(-3)
          + y_zeco_22*yhtgap(-4)
          + y_zeco_23*yhpgap(-1)
          + y_zeco_24*yhpgap(-2)
          + y_zeco_25*yhpgap(-3)
          + y_zeco_26*yhpgap(-4)
          + y_zeco_27*hggdpt(-1)/400
          + y_zeco_28*(log(qeco(-1)) - log(qeco(-2)))
          + y_zeco_29*(log(qeco(-2)) - log(qeco(-3)))
          + y_zeco_30*(log(qeco(-3)) - log(qeco(-4)))
          + y_zeco_31*(log(qeco(-4)) - log(qeco(-5)))</python_equation>
      <coeff>
        <cf_name>y_zeco(1)</cf_name>
        <cf_value>-7.52202049495858e-05</cf_value>
        <t_stat>-49626912295403.81</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeco(2)</cf_name>
        <cf_value>-7.944069331813561e-05</cf_value>
        <t_stat>-46106883509962.97</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeco(3)</cf_name>
        <cf_value>-2.059316996140204e-05</cf_value>
        <t_stat>-12423454964908.89</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeco(4)</cf_name>
        <cf_value>0.0001004397794984203</cf_value>
        <t_stat>67399125271377.72</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeco(5)</cf_name>
        <cf_value>2.128321856982191e-05</cf_value>
        <t_stat>8335535477874.349</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeco(6)</cf_name>
        <cf_value>1.703531535880844e-05</cf_value>
        <t_stat>4779096669368.486</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeco(7)</cf_name>
        <cf_value>5.501237638104223e-05</cf_value>
        <t_stat>15284405623048.26</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeco(8)</cf_name>
        <cf_value>3.68085672111148e-05</cf_value>
        <t_stat>14929479838984.49</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeco(9)</cf_name>
        <cf_value>-0.0006301710369219651</cf_value>
        <t_stat>-140925343194848.4</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeco(10)</cf_name>
        <cf_value>0.0002738755865138929</cf_value>
        <t_stat>39487177099204.14</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeco(11)</cf_name>
        <cf_value>0.0001330197561306166</cf_value>
        <t_stat>18656041722703.5</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeco(12)</cf_name>
        <cf_value>-3.466191405309875e-05</cf_value>
        <t_stat>-7149882648393.449</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeco(13)</cf_name>
        <cf_value>7.481428873071481e-05</cf_value>
        <t_stat>14978364966714.62</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zeco(14)</cf_name>
        <cf_value>-0.0001301394775207934</cf_value>
        <t_stat>-30205301306840.91</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zeco(15)</cf_name>
        <cf_value>-0.000574849476125713</cf_value>
        <t_stat>-207265020466117.4</t_stat>
        <distributed_lag_group>4</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeco(16)</cf_name>
        <cf_value>0.000315791553755267</cf_value>
        <t_stat>88996215754600.11</t_stat>
        <distributed_lag_group>4</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeco(17)</cf_name>
        <cf_value>0.0003970054362973829</cf_value>
        <t_stat>110314620979165.2</t_stat>
        <distributed_lag_group>4</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeco(18)</cf_name>
        <cf_value>2.606365933680952e-05</cf_value>
        <t_stat>8719150083625.59</t_stat>
        <distributed_lag_group>4</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeco(19)</cf_name>
        <cf_value>-6.065913885267499e-05</cf_value>
        <t_stat>-56878653788572.08</t_stat>
        <distributed_lag_group>5</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeco(20)</cf_name>
        <cf_value>-5.861516974911094e-06</cf_value>
        <t_stat>-4811581497270.7</t_stat>
        <distributed_lag_group>5</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeco(21)</cf_name>
        <cf_value>4.608692992415466e-05</cf_value>
        <t_stat>36247211861987.73</t_stat>
        <distributed_lag_group>5</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeco(22)</cf_name>
        <cf_value>-3.675339093791547e-05</cf_value>
        <t_stat>-34344177066835.96</t_stat>
        <distributed_lag_group>5</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeco(23)</cf_name>
        <cf_value>0.0002055017720241992</cf_value>
        <t_stat>125363250551404.6</t_stat>
        <distributed_lag_group>6</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeco(24)</cf_name>
        <cf_value>-0.0002409377143989024</cf_value>
        <t_stat>-121445836401119.7</t_stat>
        <distributed_lag_group>6</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeco(25)</cf_name>
        <cf_value>-0.0001318122876593039</cf_value>
        <t_stat>-69432528942050.39</t_stat>
        <distributed_lag_group>6</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeco(26)</cf_name>
        <cf_value>-8.998120362836395e-05</cf_value>
        <t_stat>-57482353754056.11</t_stat>
        <distributed_lag_group>6</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeco(27)</cf_name>
        <cf_value>0.4694132786802296</cf_value>
        <t_stat>248194456522938.6</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zeco(28)</cf_name>
        <cf_value>0.07322397247249938</cf_value>
        <t_stat>147980576129697.3</t_stat>
        <distributed_lag_group>7</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeco(29)</cf_name>
        <cf_value>0.02932374759217591</cf_value>
        <t_stat>56997268767217.48</t_stat>
        <distributed_lag_group>7</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeco(30)</cf_name>
        <cf_value>0.00714849213690236</cf_value>
        <t_stat>14168349526675.16</t_stat>
        <distributed_lag_group>7</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeco(31)</cf_name>
        <cf_value>0.00907784707291976</cf_value>
        <t_stat>23236249717367.88</t_stat>
        <distributed_lag_group>7</distributed_lag_group>
      </coeff>
      <rhs_eq_var>hggdpt</rhs_eq_var>
      <rhs_eq_var>picnia</rhs_eq_var>
      <rhs_eq_var>ptr</rhs_eq_var>
      <rhs_eq_var>qeco</rhs_eq_var>
      <rhs_eq_var>rff</rhs_eq_var>
      <rhs_eq_var>rtr</rhs_eq_var>
      <rhs_eq_var>xgap2</rhs_eq_var>
      <rhs_eq_var>yhgap</rhs_eq_var>
      <rhs_eq_var>yhpgap</rhs_eq_var>
      <rhs_eq_var>yhtgap</rhs_eq_var>
    </standard_equation>
    <mce_equation>
      <mce_group>mcother</mce_group>
      <mce_description> ZECO is a weighted average of future growth rates of the target
level of consumption.  The pattern of the weights is a function
of the PAC adjustment coefficients in the estimated consumption (ECO)
equation.  The sum of the weights equals one minus the sum of the
coefficients on lagged growth of actual consumption in the ECO
equation.
</mce_description>
      <eviews_equation>zeco - zeco_aerr =
            y_zeco(1) * d( log(qec/pcor), 0, 1 )
          + y_zeco(2) * d( log(qec(1)/pcor(1)), 0, 1 )
          + y_zeco(3) * zeco(1)
          + y_zeco(4) * zeco(2)
</eviews_equation>
      <python_equation>zeco - zeco_aerr =
            y_zeco_1 * ( log(qec/pcor) - ( log(qec(-1)/pcor(-1))))
          + y_zeco_2 * ( log(qec(1)/pcor(1)) - ( log(qec/pcor)))
          + y_zeco_3 * zeco(1)
          + y_zeco_4 * zeco(2)
</python_equation>
      <coeff>
        <cf_name>y_zeco(1)</cf_name>
        <cf_value>0.1626713350753838</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zeco(2)</cf_name>
        <cf_value>-0.06433730696063324</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zeco(3)</cf_name>
        <cf_value>1.228323403283527</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zeco(4)</cf_name>
        <cf_value>-0.3955048806282838</cf_value>
      </coeff>
      <rhs_eq_var>pcor</rhs_eq_var>
      <rhs_eq_var>qec</rhs_eq_var>
      <rhs_eq_var>zeco</rhs_eq_var>
    </mce_equation>
  </variable>
  <variable>
    <name>zeh</name>
    <equation_type>Identity</equation_type>
    <sector>Expectations</sector>
    <definition>Expected growth rate of target residential investment, for EH eq. (VAR exp.)</definition>
    <description> The weighted average growth rate of expected future target housing
investment, ZEH, is computed from forecasts of the small-scale VAR
model used in the estimation of the housing (EH) PAC equation.  The
forward weights are those implied by the estimated PAC
coefficients. The equation shown below is the reduced-form
representation of this expectational computation.
</description>
    <standard_equation>
      <eviews_equation>zeh  - zeh_aerr =
           y_zeh(1)*picnia(-1)
          + y_zeh(2)*picnia(-2)
          + y_zeh(3)*picnia(-3)
          + y_zeh(4)*picnia(-4)
          + y_zeh(5)*rff(-1)
          + y_zeh(6)*rff(-2)
          + y_zeh(7)*rff(-3)
          + y_zeh(8)*rff(-4)
          + y_zeh(9)*xgap2(-1)
          + y_zeh(10)*xgap2(-2)
          + y_zeh(11)*xgap2(-3)
          + y_zeh(12)*xgap2(-4)
          + y_zeh(13)*ptr(-1)
          + y_zeh(14)*rtr(-1)
          + y_zeh(15)*yhgap(-1)
          + y_zeh(16)*yhgap(-2)
          + y_zeh(17)*yhgap(-3)
          + y_zeh(18)*yhgap(-4)
          + y_zeh(19)*yhtgap(-1)
          + y_zeh(20)*yhtgap(-2)
          + y_zeh(21)*yhtgap(-3)
          + y_zeh(22)*yhtgap(-4)
          + y_zeh(23)*yhpgap(-1)
          + y_zeh(24)*yhpgap(-2)
          + y_zeh(25)*yhpgap(-3)
          + y_zeh(26)*yhpgap(-4)
          + y_zeh(27)*hggdpt(-1)/400
          + y_zeh(28)*dlog(qeh(-1))
          + y_zeh(29)*dlog(qeh(-2))
          + y_zeh(30)*dlog(qeh(-3))
          + y_zeh(31)*dlog(qeh(-4))</eviews_equation>
      <python_equation>zeh  - zeh_aerr =
           y_zeh_1*picnia(-1)
          + y_zeh_2*picnia(-2)
          + y_zeh_3*picnia(-3)
          + y_zeh_4*picnia(-4)
          + y_zeh_5*rff(-1)
          + y_zeh_6*rff(-2)
          + y_zeh_7*rff(-3)
          + y_zeh_8*rff(-4)
          + y_zeh_9*xgap2(-1)
          + y_zeh_10*xgap2(-2)
          + y_zeh_11*xgap2(-3)
          + y_zeh_12*xgap2(-4)
          + y_zeh_13*ptr(-1)
          + y_zeh_14*rtr(-1)
          + y_zeh_15*yhgap(-1)
          + y_zeh_16*yhgap(-2)
          + y_zeh_17*yhgap(-3)
          + y_zeh_18*yhgap(-4)
          + y_zeh_19*yhtgap(-1)
          + y_zeh_20*yhtgap(-2)
          + y_zeh_21*yhtgap(-3)
          + y_zeh_22*yhtgap(-4)
          + y_zeh_23*yhpgap(-1)
          + y_zeh_24*yhpgap(-2)
          + y_zeh_25*yhpgap(-3)
          + y_zeh_26*yhpgap(-4)
          + y_zeh_27*hggdpt(-1)/400
          + y_zeh_28*(log(qeh(-1)) - log(qeh(-2)))
          + y_zeh_29*(log(qeh(-2)) - log(qeh(-3)))
          + y_zeh_30*(log(qeh(-3)) - log(qeh(-4)))
          + y_zeh_31*(log(qeh(-4)) - log(qeh(-5)))</python_equation>
      <coeff>
        <cf_name>y_zeh(1)</cf_name>
        <cf_value>-7.825906447294479e-05</cf_value>
        <t_stat>-95611657279976.2</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeh(2)</cf_name>
        <cf_value>-5.221776500989767e-05</cf_value>
        <t_stat>-58649418819027.06</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeh(3)</cf_name>
        <cf_value>-5.11617748264036e-05</cf_value>
        <t_stat>-59003989735032.55</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeh(4)</cf_name>
        <cf_value>1.061188019850692e-05</cf_value>
        <t_stat>13579924105850.76</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeh(5)</cf_name>
        <cf_value>0.0001524702142702607</cf_value>
        <t_stat>111916524988684.8</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeh(6)</cf_name>
        <cf_value>0.0001154619164109844</cf_value>
        <t_stat>63056120562777.48</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeh(7)</cf_name>
        <cf_value>6.94775905299206e-05</cf_value>
        <t_stat>37219316432843.25</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeh(8)</cf_name>
        <cf_value>6.915284271997218e-06</cf_value>
        <t_stat>5078571951135.108</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeh(9)</cf_name>
        <cf_value>0.0005016959759548423</cf_value>
        <t_stat>221698024529408.8</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeh(10)</cf_name>
        <cf_value>-0.0005314894632374061</cf_value>
        <t_stat>-130006118137890.2</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeh(11)</cf_name>
        <cf_value>-0.0001527167228830226</cf_value>
        <t_stat>-35809595669001.72</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeh(12)</cf_name>
        <cf_value>4.422297252718166e-05</cf_value>
        <t_stat>15336771672963.09</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeh(13)</cf_name>
        <cf_value>0.0001710267241107452</cf_value>
        <t_stat>60358923307459.16</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zeh(14)</cf_name>
        <cf_value>-0.0003443250054832286</cf_value>
        <t_stat>-127538174889467.4</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zeh(15)</cf_name>
        <cf_value>5.547462567554765e-05</cf_value>
        <t_stat>40682268174235.35</t_stat>
        <distributed_lag_group>4</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeh(16)</cf_name>
        <cf_value>4.078231691046518e-05</cf_value>
        <t_stat>25574858129104.23</t_stat>
        <distributed_lag_group>4</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeh(17)</cf_name>
        <cf_value>-3.078619404779462e-05</cf_value>
        <t_stat>-18546822097638.74</t_stat>
        <distributed_lag_group>4</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeh(18)</cf_name>
        <cf_value>-4.584642539780123e-06</cf_value>
        <t_stat>-3216031243086.713</t_stat>
        <distributed_lag_group>4</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeh(19)</cf_name>
        <cf_value>7.136415206693365e-06</cf_value>
        <t_stat>11570933553992.94</t_stat>
        <distributed_lag_group>5</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeh(20)</cf_name>
        <cf_value>1.470739436481251e-05</cf_value>
        <t_stat>21649068595181.82</t_stat>
        <distributed_lag_group>5</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeh(21)</cf_name>
        <cf_value>3.830847423082347e-05</cf_value>
        <t_stat>53692428195525.96</t_stat>
        <distributed_lag_group>5</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeh(22)</cf_name>
        <cf_value>3.271967551086854e-05</cf_value>
        <t_stat>52600670574971.56</t_stat>
        <distributed_lag_group>5</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeh(23)</cf_name>
        <cf_value>-6.992854917184709e-05</cf_value>
        <t_stat>-71538350135352.49</t_stat>
        <distributed_lag_group>6</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeh(24)</cf_name>
        <cf_value>4.550096611877513e-07</cf_value>
        <t_stat>407126944126.876</t_stat>
        <distributed_lag_group>6</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeh(25)</cf_name>
        <cf_value>5.504613762415508e-05</cf_value>
        <t_stat>50716694166119.3</t_stat>
        <distributed_lag_group>6</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeh(26)</cf_name>
        <cf_value>2.864192627076078e-05</cf_value>
        <t_stat>31875642669627.08</t_stat>
        <distributed_lag_group>6</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeh(27)</cf_name>
        <cf_value>0.4277729262319505</cf_value>
        <t_stat>394684640489598</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zeh(28)</cf_name>
        <cf_value>0.004266303023854793</cf_value>
        <t_stat>84994630633063.64</t_stat>
        <distributed_lag_group>7</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeh(29)</cf_name>
        <cf_value>-0.001472171716551593</cf_value>
        <t_stat>-27836563257150.64</t_stat>
        <distributed_lag_group>7</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeh(30)</cf_name>
        <cf_value>-0.003348261838736116</cf_value>
        <t_stat>-68019626420579.15</t_stat>
        <distributed_lag_group>7</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zeh(31)</cf_name>
        <cf_value>-0.004008022551322911</cf_value>
        <t_stat>-87072809126637.45</t_stat>
        <distributed_lag_group>7</distributed_lag_group>
      </coeff>
      <rhs_eq_var>hggdpt</rhs_eq_var>
      <rhs_eq_var>picnia</rhs_eq_var>
      <rhs_eq_var>ptr</rhs_eq_var>
      <rhs_eq_var>qeh</rhs_eq_var>
      <rhs_eq_var>rff</rhs_eq_var>
      <rhs_eq_var>rtr</rhs_eq_var>
      <rhs_eq_var>xgap2</rhs_eq_var>
      <rhs_eq_var>yhgap</rhs_eq_var>
      <rhs_eq_var>yhpgap</rhs_eq_var>
      <rhs_eq_var>yhtgap</rhs_eq_var>
    </standard_equation>
    <mce_equation>
      <mce_group>mcother</mce_group>
      <mce_description> ZEH is a weighted average of future growth rates of the target
level of housing investment.  The pattern of the weights is a function
of the PAC adjustment coefficients in the estimated housing (EH)
equation.  The sum of the weights equals one minus the sum of the
coefficients on lagged growth of actual housing investment in the EH
equation.
</mce_description>
      <eviews_equation>zeh - zeh_aerr =
            y_zeh(1) * d( log(qeh), 0, 1 )
          + y_zeh(2) * d( log(qeh(1)), 0, 1 )
          + y_zeh(3) * d( log(qeh(2)), 0, 1 )
          + y_zeh(4) * zeh(1)
          + y_zeh(5) * zeh(2)
          + y_zeh(6) * zeh(3)
</eviews_equation>
      <python_equation>zeh - zeh_aerr =
            y_zeh_1 * ( log(qeh) - ( log(qeh(-1))))
          + y_zeh_2 * ( log(qeh(1)) - ( log(qeh)))
          + y_zeh_3 * ( log(qeh(2)) - ( log(qeh(1))))
          + y_zeh_4 * zeh(1)
          + y_zeh_5 * zeh(2)
          + y_zeh_6 * zeh(3)
</python_equation>
      <coeff>
        <cf_name>y_zeh(1)</cf_name>
        <cf_value>0.02014882514643192</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zeh(2)</cf_name>
        <cf_value>-0.007094184828575167</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zeh(3)</cf_name>
        <cf_value>-0.003907725104706547</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zeh(4)</cf_name>
        <cf_value>1.330476111084459</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zeh(5)</cf_name>
        <cf_value>-0.1581461797752957</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zeh(6)</cf_name>
        <cf_value>-0.1939430749091865</cf_value>
      </coeff>
      <rhs_eq_var>qeh</rhs_eq_var>
      <rhs_eq_var>zeh</rhs_eq_var>
    </mce_equation>
  </variable>
  <variable>
    <name>zgap05</name>
    <equation_type>Identity</equation_type>
    <sector>Expectations</sector>
    <definition>Expected output gap, for RG5 eq. (VAR exp.)</definition>
    <description>ZGAP05 is a weighted average of expected future output gaps.  The
weights sum to one and decline geometrically at a rate based on the
average duration of a five-year bond.  The equation shown below is the
reduced-form representation of this expectational computation based on
the core part of the expectations VAR.
</description>
    <standard_equation>
      <eviews_equation>zgap05  - zgap05_aerr =
           y_zgap05(1)
          + y_zgap05(2)*picnia
          + y_zgap05(3)*picnia(-1)
          + y_zgap05(4)*picnia(-2)
          + y_zgap05(5)*picnia(-3)
          + y_zgap05(6)*rff
          + y_zgap05(7)*rff(-1)
          + y_zgap05(8)*rff(-2)
          + y_zgap05(9)*rff(-3)
          + y_zgap05(10)*rtr
          + y_zgap05(11)*ptr
          + y_zgap05(12)*xgap
          + y_zgap05(13)*xgap(-1)
          + y_zgap05(14)*xgap(-2)
          + y_zgap05(15)*xgap(-3)</eviews_equation>
      <python_equation>zgap05  - zgap05_aerr =
           y_zgap05_1
          + y_zgap05_2*picnia
          + y_zgap05_3*picnia(-1)
          + y_zgap05_4*picnia(-2)
          + y_zgap05_5*picnia(-3)
          + y_zgap05_6*rff
          + y_zgap05_7*rff(-1)
          + y_zgap05_8*rff(-2)
          + y_zgap05_9*rff(-3)
          + y_zgap05_10*rtr
          + y_zgap05_11*ptr
          + y_zgap05_12*xgap
          + y_zgap05_13*xgap(-1)
          + y_zgap05_14*xgap(-2)
          + y_zgap05_15*xgap(-3)</python_equation>
      <coeff>
        <cf_name>y_zgap05(1)</cf_name>
        <cf_value>1.680034256141885e-14</cf_value>
        <t_stat>3.13238676508743</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zgap05(2)</cf_name>
        <cf_value>-0.135018393340065</cf_value>
        <t_stat>-225537547137231.8</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zgap05(3)</cf_name>
        <cf_value>-0.033843245261391</cf_value>
        <t_stat>-51409221123854.58</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zgap05(4)</cf_name>
        <cf_value>-0.0391222647986449</cf_value>
        <t_stat>-59642088369866.18</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zgap05(5)</cf_name>
        <cf_value>0.0173522186659534</cf_value>
        <t_stat>28803538440394.08</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zgap05(6)</cf_name>
        <cf_value>-0.3753303057576422</cf_value>
        <t_stat>-362667964211570</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zgap05(7)</cf_name>
        <cf_value>0.09700115982970414</cf_value>
        <t_stat>68277017487194.92</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zgap05(8)</cf_name>
        <cf_value>0.07393662149900409</cf_value>
        <t_stat>51881216769234.5</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zgap05(9)</cf_name>
        <cf_value>0.02583604947764563</cf_value>
        <t_stat>24784720021749.41</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zgap05(10)</cf_name>
        <cf_value>0.1785564749514165</cf_value>
        <t_stat>80685294984955.11</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zgap05(11)</cf_name>
        <cf_value>0.190631684734112</cf_value>
        <t_stat>95594785391953.76</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zgap05(12)</cf_name>
        <cf_value>0.8244238037691351</cf_value>
        <t_stat>661081190909772.5</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zgap05(13)</cf_name>
        <cf_value>-0.2862444942364248</cf_value>
        <t_stat>-131153166179950.7</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zgap05(14)</cf_name>
        <cf_value>-0.06697780461567028</cf_value>
        <t_stat>-30929337421280.53</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zgap05(15)</cf_name>
        <cf_value>-0.08505399389084824</cf_value>
        <t_stat>-64599583381168.84</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <rhs_eq_var>picnia</rhs_eq_var>
      <rhs_eq_var>ptr</rhs_eq_var>
      <rhs_eq_var>rff</rhs_eq_var>
      <rhs_eq_var>rtr</rhs_eq_var>
      <rhs_eq_var>xgap</rhs_eq_var>
    </standard_equation>
    <mce_equation>
      <mce_group>mcap</mce_group>
      <mce_description> ZGAP05 is a weighted average of future output gaps.  The weights
sum to one and decline geometrically at a rate based on the average
duration of a five-year bond.
</mce_description>
      <eviews_equation>zgap05 - zgap05_aerr =
              y_zgap05(1) * xgap
            + y_zgap05(2) * zgap05(1)
</eviews_equation>
      <python_equation>zgap05 - zgap05_aerr =
              y_zgap05_1 * xgap
            + y_zgap05_2 * zgap05(1)
</python_equation>
      <coeff>
        <cf_name>y_zgap05(1)</cf_name>
        <cf_value>0.05479365264340726</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zgap05(2)</cf_name>
        <cf_value>0.9452063473565927</cf_value>
      </coeff>
      <rhs_eq_var>xgap</rhs_eq_var>
      <rhs_eq_var>zgap05</rhs_eq_var>
    </mce_equation>
  </variable>
  <variable>
    <name>zgap10</name>
    <equation_type>Identity</equation_type>
    <sector>Expectations</sector>
    <definition>Expected output gap, for RG10 eq. (VAR exp.)</definition>
    <description>ZGAP10 is a weighted average of expected future output gaps.  The
weights sum to one and decline geometrically at a rate based on the
average duration of a ten-year bond.  The equation shown below is the
reduced-form representation of this expectational computation based on
the core part of the expectations VAR.
</description>
    <standard_equation>
      <eviews_equation>zgap10  - zgap10_aerr =
           y_zgap10(1)
          + y_zgap10(2)*picnia
          + y_zgap10(3)*picnia(-1)
          + y_zgap10(4)*picnia(-2)
          + y_zgap10(5)*picnia(-3)
          + y_zgap10(6)*rff
          + y_zgap10(7)*rff(-1)
          + y_zgap10(8)*rff(-2)
          + y_zgap10(9)*rff(-3)
          + y_zgap10(10)*rtr
          + y_zgap10(11)*ptr
          + y_zgap10(12)*xgap
          + y_zgap10(13)*xgap(-1)
          + y_zgap10(14)*xgap(-2)
          + y_zgap10(15)*xgap(-3)</eviews_equation>
      <python_equation>zgap10  - zgap10_aerr =
           y_zgap10_1
          + y_zgap10_2*picnia
          + y_zgap10_3*picnia(-1)
          + y_zgap10_4*picnia(-2)
          + y_zgap10_5*picnia(-3)
          + y_zgap10_6*rff
          + y_zgap10_7*rff(-1)
          + y_zgap10_8*rff(-2)
          + y_zgap10_9*rff(-3)
          + y_zgap10_10*rtr
          + y_zgap10_11*ptr
          + y_zgap10_12*xgap
          + y_zgap10_13*xgap(-1)
          + y_zgap10_14*xgap(-2)
          + y_zgap10_15*xgap(-3)</python_equation>
      <coeff>
        <cf_name>y_zgap10(1)</cf_name>
        <cf_value>-1.72233727697999e-15</cf_value>
        <t_stat>-0.6735526902562512</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zgap10(2)</cf_name>
        <cf_value>-0.07186017182762352</cf_value>
        <t_stat>-251773663431233.2</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zgap10(3)</cf_name>
        <cf_value>-0.0175779452476843</cf_value>
        <t_stat>-56005832980788.28</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zgap10(4)</cf_name>
        <cf_value>-0.02011214475127172</cf_value>
        <t_stat>-64310719784657.65</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zgap10(5)</cf_name>
        <cf_value>0.00932019093665923</cf_value>
        <t_stat>32449781092749.76</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zgap10(6)</cf_name>
        <cf_value>-0.1947856648478703</cf_value>
        <t_stat>-394774129508043.8</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zgap10(7)</cf_name>
        <cf_value>0.05145463389633801</cf_value>
        <t_stat>75965821356972.6</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zgap10(8)</cf_name>
        <cf_value>0.03639872748995771</cf_value>
        <t_stat>53571386022511.3</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zgap10(9)</cf_name>
        <cf_value>0.01608667022522785</cf_value>
        <t_stat>32368323008614.7</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zgap10(10)</cf_name>
        <cf_value>0.09084563323655222</cf_value>
        <t_stat>86103137071094.52</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zgap10(11)</cf_name>
        <cf_value>0.1002300708898616</cf_value>
        <t_stat>105422493648269.6</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zgap10(12)</cf_name>
        <cf_value>0.4164381390044698</cf_value>
        <t_stat>700407690042432.4</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zgap10(13)</cf_name>
        <cf_value>-0.1384702815508384</cf_value>
        <t_stat>-133074346871721.2</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zgap10(14)</cf_name>
        <cf_value>-0.03509009429541885</cf_value>
        <t_stat>-33987590282750.88</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zgap10(15)</cf_name>
        <cf_value>-0.04485907444527642</cf_value>
        <t_stat>-71463033091275.98</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <rhs_eq_var>picnia</rhs_eq_var>
      <rhs_eq_var>ptr</rhs_eq_var>
      <rhs_eq_var>rff</rhs_eq_var>
      <rhs_eq_var>rtr</rhs_eq_var>
      <rhs_eq_var>xgap</rhs_eq_var>
    </standard_equation>
    <mce_equation>
      <mce_group>mcap</mce_group>
      <mce_description> ZGAP10 is a weighted average of future output gaps.  The weights
sum to one and decline geometrically at a rate based on the average
duration of a ten-year bond.
</mce_description>
      <eviews_equation>zgap10 - zgap10_aerr =
              y_zgap10(1) * xgap
            + y_zgap10(2) * zgap10(1)
</eviews_equation>
      <python_equation>zgap10 - zgap10_aerr =
              y_zgap10_1 * xgap
            + y_zgap10_2 * zgap10(1)
</python_equation>
      <coeff>
        <cf_name>y_zgap10(1)</cf_name>
        <cf_value>0.03007455810944507</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zgap10(2)</cf_name>
        <cf_value>0.969925441890555</cf_value>
      </coeff>
      <rhs_eq_var>xgap</rhs_eq_var>
      <rhs_eq_var>zgap10</rhs_eq_var>
    </mce_equation>
  </variable>
  <variable>
    <name>zgap30</name>
    <equation_type>Identity</equation_type>
    <sector>Expectations</sector>
    <definition>Expected output gap, for RG30 eq. (VAR exp.)</definition>
    <description>ZGAP30 is a weighted average of expected future output gaps.  The
weights sum to one and decline geometrically at a rate based on the
average duration of a thirty-year bond.  The equation shown below is the
reduced-form representation of this expectational computation based on
the core part of the expectations VAR.
</description>
    <standard_equation>
      <eviews_equation>zgap30  - zgap30_aerr =
           y_zgap30(1)
          + y_zgap30(2)*picnia
          + y_zgap30(3)*picnia(-1)
          + y_zgap30(4)*picnia(-2)
          + y_zgap30(5)*picnia(-3)
          + y_zgap30(6)*rff
          + y_zgap30(7)*rff(-1)
          + y_zgap30(8)*rff(-2)
          + y_zgap30(9)*rff(-3)
          + y_zgap30(10)*rtr
          + y_zgap30(11)*ptr
          + y_zgap30(12)*xgap
          + y_zgap30(13)*xgap(-1)
          + y_zgap30(14)*xgap(-2)
          + y_zgap30(15)*xgap(-3)</eviews_equation>
      <python_equation>zgap30  - zgap30_aerr =
           y_zgap30_1
          + y_zgap30_2*picnia
          + y_zgap30_3*picnia(-1)
          + y_zgap30_4*picnia(-2)
          + y_zgap30_5*picnia(-3)
          + y_zgap30_6*rff
          + y_zgap30_7*rff(-1)
          + y_zgap30_8*rff(-2)
          + y_zgap30_9*rff(-3)
          + y_zgap30_10*rtr
          + y_zgap30_11*ptr
          + y_zgap30_12*xgap
          + y_zgap30_13*xgap(-1)
          + y_zgap30_14*xgap(-2)
          + y_zgap30_15*xgap(-3)</python_equation>
      <coeff>
        <cf_name>y_zgap30(1)</cf_name>
        <cf_value>1.233586304082598e-14</cf_value>
        <t_stat>6.624030172169992</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zgap30(2)</cf_name>
        <cf_value>-0.03828909910973519</cf_value>
        <t_stat>-184202951672628.2</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zgap30(3)</cf_name>
        <cf_value>-0.009397163294017394</cf_value>
        <t_stat>-41111310060487.69</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zgap30(4)</cf_name>
        <cf_value>-0.01076603951015025</cf_value>
        <t_stat>-47269427534806.69</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zgap30(5)</cf_name>
        <cf_value>0.004952700162140002</cf_value>
        <t_stat>23677093405447.68</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zgap30(6)</cf_name>
        <cf_value>-0.1039011522662461</cf_value>
        <t_stat>-289142176347015.3</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zgap30(7)</cf_name>
        <cf_value>0.02741531710257839</cf_value>
        <t_stat>55575887669694.18</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zgap30(8)</cf_name>
        <cf_value>0.01963869374286508</cf_value>
        <t_stat>39687950156534.94</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zgap30(9)</cf_name>
        <cf_value>0.008399118041939091</cf_value>
        <t_stat>23205296103812.97</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zgap30(10)</cf_name>
        <cf_value>0.04844802337909579</cf_value>
        <t_stat>63050766479994.02</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zgap30(11)</cf_name>
        <cf_value>0.05349960175170328</cf_value>
        <t_stat>77265422817041</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zgap30(12)</cf_name>
        <cf_value>0.2233011674563412</cf_value>
        <t_stat>515692471754453.6</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zgap30(13)</cf_name>
        <cf_value>-0.07470857907468762</cf_value>
        <t_stat>-98584271974539.05</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zgap30(14)</cf_name>
        <cf_value>-0.0187522007846854</cf_value>
        <t_stat>-24939484512109.39</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zgap30(15)</cf_name>
        <cf_value>-0.02392742740702374</cf_value>
        <t_stat>-52339134006941.06</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <rhs_eq_var>picnia</rhs_eq_var>
      <rhs_eq_var>ptr</rhs_eq_var>
      <rhs_eq_var>rff</rhs_eq_var>
      <rhs_eq_var>rtr</rhs_eq_var>
      <rhs_eq_var>xgap</rhs_eq_var>
    </standard_equation>
    <mce_equation>
      <mce_group>mcap</mce_group>
      <mce_description> ZGAP30 is a weighted average of future output gaps.  The weights
sum to one and decline geometrically at a rate based on the average
duration of a thirty-year bond.
</mce_description>
      <eviews_equation>zgap30 - zgap30_aerr =
              y_zgap30(1) * xgap
            + y_zgap30(2) * zgap30(1)
</eviews_equation>
      <python_equation>zgap30 - zgap30_aerr =
              y_zgap30_1 * xgap
            + y_zgap30_2 * zgap30(1)
</python_equation>
      <coeff>
        <cf_name>y_zgap30(1)</cf_name>
        <cf_value>0.01410658898201937</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zgap30(2)</cf_name>
        <cf_value>0.9858934110179807</cf_value>
      </coeff>
      <rhs_eq_var>xgap</rhs_eq_var>
      <rhs_eq_var>zgap30</rhs_eq_var>
    </mce_equation>
  </variable>
  <variable>
    <name>zgapc2</name>
    <equation_type>Identity</equation_type>
    <sector>Expectations</sector>
    <definition>Expected output gap, for ECD eq. (VAR exp.)</definition>
    <description> The weighted average of expected future output gaps, ZGAPC2, is
computed from forecasts of the small-scale VAR model used in the
estimation of the consumer durables (ECD) PAC equation.  The forward
weights are those implied by the estimated PAC coefficients. The
equation shown below is the reduced-form representation of this
expectational computation.

</description>
    <standard_equation>
      <eviews_equation>zgapc2  - zgapc2_aerr =
           y_zgapc2(1)*picnia(-1)
          + y_zgapc2(2)*picnia(-2)
          + y_zgapc2(3)*picnia(-3)
          + y_zgapc2(4)*picnia(-4)
          + y_zgapc2(5)*rff(-1)
          + y_zgapc2(6)*rff(-2)
          + y_zgapc2(7)*rff(-3)
          + y_zgapc2(8)*rff(-4)
          + y_zgapc2(9)*xgap2(-1)
          + y_zgapc2(10)*xgap2(-2)
          + y_zgapc2(11)*xgap2(-3)
          + y_zgapc2(12)*xgap2(-4)
          + y_zgapc2(13)*ptr(-1)
          + y_zgapc2(14)*rtr(-1)</eviews_equation>
      <python_equation>zgapc2  - zgapc2_aerr =
           y_zgapc2_1*picnia(-1)
          + y_zgapc2_2*picnia(-2)
          + y_zgapc2_3*picnia(-3)
          + y_zgapc2_4*picnia(-4)
          + y_zgapc2_5*rff(-1)
          + y_zgapc2_6*rff(-2)
          + y_zgapc2_7*rff(-3)
          + y_zgapc2_8*rff(-4)
          + y_zgapc2_9*xgap2(-1)
          + y_zgapc2_10*xgap2(-2)
          + y_zgapc2_11*xgap2(-3)
          + y_zgapc2_12*xgap2(-4)
          + y_zgapc2_13*ptr(-1)
          + y_zgapc2_14*rtr(-1)</python_equation>
      <coeff>
        <cf_name>y_zgapc2(1)</cf_name>
        <cf_value>-0.01418483319860699</cf_value>
        <t_stat>-183511281610292.6</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zgapc2(2)</cf_name>
        <cf_value>-0.00438957847118337</cf_value>
        <t_stat>-51995058875822.93</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zgapc2(3)</cf_name>
        <cf_value>-0.006089864990632572</cf_value>
        <t_stat>-72174310903146.3</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zgapc2(4)</cf_name>
        <cf_value>0.001274535866759684</cf_value>
        <t_stat>16499742111984.5</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zgapc2(5)</cf_name>
        <cf_value>-0.0426889990257948</cf_value>
        <t_stat>-324669628130673.6</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zgapc2(6)</cf_name>
        <cf_value>0.007759946050458921</cf_value>
        <t_stat>42862336182312.45</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zgapc2(7)</cf_name>
        <cf_value>0.01912856687923288</cf_value>
        <t_stat>105347903177845.2</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zgapc2(8)</cf_name>
        <cf_value>-0.002207952775923244</cf_value>
        <t_stat>-16602950151871.78</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zgapc2(9)</cf_name>
        <cf_value>0.1943845369683129</cf_value>
        <t_stat>886746637602129.1</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zgapc2(10)</cf_name>
        <cf_value>-0.07640072342643054</cf_value>
        <t_stat>-199113358767933.1</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zgapc2(11)</cf_name>
        <cf_value>-0.01132460234847898</cf_value>
        <t_stat>-29753158106850.01</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zgapc2(12)</cf_name>
        <cf_value>-0.01555183396619014</cf_value>
        <t_stat>-67658699891014.55</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zgapc2(13)</cf_name>
        <cf_value>0.02338974079366426</cf_value>
        <t_stat>104699003743847.8</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zgapc2(14)</cf_name>
        <cf_value>0.01800843887202016</cf_value>
        <t_stat>165510326897816.2</t_stat>
      </coeff>
      <rhs_eq_var>picnia</rhs_eq_var>
      <rhs_eq_var>ptr</rhs_eq_var>
      <rhs_eq_var>rff</rhs_eq_var>
      <rhs_eq_var>rtr</rhs_eq_var>
      <rhs_eq_var>xgap2</rhs_eq_var>
    </standard_equation>
    <mce_equation>
      <mce_group>mcother</mce_group>
      <mce_description> ZGAPC2 is a weighted average of future output gaps.  The pattern
of the weights is a function of the PAC adjustment coefficients in the
estimated consumer durables (ECD) equation.
</mce_description>
      <eviews_equation>zgapc2 - zgapc2_aerr =
              y_zgapc2(1) * xgap2
            + y_zgapc2(2) * zgapc2(1)
            + y_zgapc2(3) * zgapc2(2)
</eviews_equation>
      <python_equation>zgapc2 - zgapc2_aerr =
              y_zgapc2_1 * xgap2
            + y_zgapc2_2 * zgapc2(1)
            + y_zgapc2_3 * zgapc2(2)
</python_equation>
      <coeff>
        <cf_name>y_zgapc2(1)</cf_name>
        <cf_value>0.02720175689759672</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zgapc2(2)</cf_name>
        <cf_value>0.7681801340474574</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zgapc2(3)</cf_name>
        <cf_value>0.05761706573196929</cf_value>
      </coeff>
      <rhs_eq_var>xgap2</rhs_eq_var>
      <rhs_eq_var>zgapc2</rhs_eq_var>
    </mce_equation>
  </variable>
  <variable>
    <name>zlhp</name>
    <equation_type>Identity</equation_type>
    <sector>Expectations</sector>
    <definition>Expected growth rate of target aggregate hours (VAR exp.)</definition>
    <description> The weighted average growth rate of expected future target
hours, ZLHP, is computed from forecasts of the small-scale VAR
model used in the estimation of the hours (LHP) PAC equation.
The forward weights are those implied by the estimated PAC
coefficients. The equation shown below is the reduced-form
representation of this expectational computation.
</description>
    <standard_equation>
      <eviews_equation>zlhp  - zlhp_aerr =
           y_zlhp(1)*picnia(-1)
          + y_zlhp(2)*picnia(-2)
          + y_zlhp(3)*picnia(-3)
          + y_zlhp(4)*picnia(-4)
          + y_zlhp(5)*rff(-1)
          + y_zlhp(6)*rff(-2)
          + y_zlhp(7)*rff(-3)
          + y_zlhp(8)*rff(-4)
          + y_zlhp(9)*rtr(-1)
          + y_zlhp(10)*ptr(-1)
          + y_zlhp(11)*xgap(-1)
          + y_zlhp(12)*xgap(-2)
          + y_zlhp(13)*xgap(-3)
          + y_zlhp(14)*xgap(-4)
          + y_zlhp(15)*(dlog(xbo(-1))-dlog(lprdt(-1)))
          + y_zlhp(16)*(hlept(-1)+hqlww(-1))/400</eviews_equation>
      <python_equation>zlhp  - zlhp_aerr =
           y_zlhp_1*picnia(-1)
          + y_zlhp_2*picnia(-2)
          + y_zlhp_3*picnia(-3)
          + y_zlhp_4*picnia(-4)
          + y_zlhp_5*rff(-1)
          + y_zlhp_6*rff(-2)
          + y_zlhp_7*rff(-3)
          + y_zlhp_8*rff(-4)
          + y_zlhp_9*rtr(-1)
          + y_zlhp_10*ptr(-1)
          + y_zlhp_11*xgap(-1)
          + y_zlhp_12*xgap(-2)
          + y_zlhp_13*xgap(-3)
          + y_zlhp_14*xgap(-4)
          + y_zlhp_15*((log(xbo(-1)) - log(xbo(-2)))-(log(lprdt(-1)) - log(lprdt(-2))))
          + y_zlhp_16*(hlept(-1)+hqlww(-1))/400</python_equation>
      <coeff>
        <cf_name>y_zlhp(1)</cf_name>
        <cf_value>-0.0002023213774340967</cf_value>
        <t_stat>-13852183262242.01</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zlhp(2)</cf_name>
        <cf_value>-6.547091555559659e-05</cf_value>
        <t_stat>-4113974099414.071</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zlhp(3)</cf_name>
        <cf_value>-0.0001720246830139474</cf_value>
        <t_stat>-10811709366629.95</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zlhp(4)</cf_name>
        <cf_value>3.13937564958239e-05</cf_value>
        <t_stat>2133535272458.823</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zlhp(5)</cf_name>
        <cf_value>-0.001047476022547437</cf_value>
        <t_stat>-41025999500683.03</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zlhp(6)</cf_name>
        <cf_value>0.0002598839064585707</cf_value>
        <t_stat>7538625027151.906</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zlhp(7)</cf_name>
        <cf_value>0.0005079095801600575</cf_value>
        <t_stat>14763615974640.51</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zlhp(8)</cf_name>
        <cf_value>-4.19862687487686e-05</cf_value>
        <t_stat>-1663985914805.097</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zlhp(9)</cf_name>
        <cf_value>0.0003216688046775128</cf_value>
        <t_stat>11401215516722.34</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zlhp(10)</cf_name>
        <cf_value>0.0004084232195080358</cf_value>
        <t_stat>9184882988091.534</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zlhp(11)</cf_name>
        <cf_value>-0.005754964729358652</cf_value>
        <t_stat>-33237678485053.67</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zlhp(12)</cf_name>
        <cf_value>0.005816827692544119</cf_value>
        <t_stat>32225542986977.03</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zlhp(13)</cf_name>
        <cf_value>-0.0002034859294983795</cf_value>
        <t_stat>-3883443611180.43</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zlhp(14)</cf_name>
        <cf_value>-0.0002715434817101584</cf_value>
        <t_stat>-8536288099493.929</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zlhp(15)</cf_name>
        <cf_value>0.6857946901749924</cf_value>
        <t_stat>40540039103487.41</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zlhp(16)</cf_name>
        <cf_value>0.1113240674326222</cf_value>
        <t_stat>3130854335557.618</t_stat>
      </coeff>
      <rhs_eq_var>hlept</rhs_eq_var>
      <rhs_eq_var>hqlww</rhs_eq_var>
      <rhs_eq_var>lprdt</rhs_eq_var>
      <rhs_eq_var>picnia</rhs_eq_var>
      <rhs_eq_var>ptr</rhs_eq_var>
      <rhs_eq_var>rff</rhs_eq_var>
      <rhs_eq_var>rtr</rhs_eq_var>
      <rhs_eq_var>xbo</rhs_eq_var>
      <rhs_eq_var>xgap</rhs_eq_var>
    </standard_equation>
    <mce_equation>
      <mce_group>mcother</mce_group>
      <mce_description> ZLHP is a weighted average of future growth rates of the target
level of hours.  The pattern of the weights is a function of the PAC
adjustment coefficients in the estimated hours (LHP) equation.  The
sum of the weights equals one minus the sum of the coefficients on
lagged growth of actual hours in the LHP equation.
</mce_description>
      <eviews_equation>zlhp - zlhp_aerr =
            y_zlhp(1) * d( log(qlhp), 0, 1 )
          + y_zlhp(2) * d( log(qlhp(1)), 0, 1 )
          + y_zlhp(3) * zlhp(1)
          + y_zlhp(4) * zlhp(2)
</eviews_equation>
      <python_equation>zlhp - zlhp_aerr =
            y_zlhp_1 * ( log(qlhp) - ( log(qlhp(-1))))
          + y_zlhp_2 * ( log(qlhp(1)) - ( log(qlhp)))
          + y_zlhp_3 * zlhp(1)
          + y_zlhp_4 * zlhp(2)
</python_equation>
      <coeff>
        <cf_name>y_zlhp(1)</cf_name>
        <cf_value>0.2121303706720161</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zlhp(2)</cf_name>
        <cf_value>-0.04133299713432281</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zlhp(3)</cf_name>
        <cf_value>0.9805787292172398</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zlhp(4)</cf_name>
        <cf_value>-0.1948471451936957</cf_value>
      </coeff>
      <rhs_eq_var>qlhp</rhs_eq_var>
      <rhs_eq_var>zlhp</rhs_eq_var>
    </mce_equation>
  </variable>
  <variable>
    <name>zpi10</name>
    <equation_type>Identity</equation_type>
    <sector>Expectations</sector>
    <definition>Expected cons. price infl., for RCCH, RRMET, and YHPNTN eqs. (10-yr mat.) (VAR exp.)</definition>
    <description>ZPI10 is a weighted average of future PCE price inflation.  The
weights sum to one and decline geometrically at a rate based on the
average duration of a ten-year bond.  The equation shown below is the
reduced-form representation of this expectational computation based on
the core part of the expectations VAR.
</description>
    <standard_equation>
      <eviews_equation>zpi10  - zpi10_aerr =
           y_zpi10(1)*picnia(-1)
          + y_zpi10(2)*picnia(-2)
          + y_zpi10(3)*picnia(-3)
          + y_zpi10(4)*picnia(-4)
          + y_zpi10(5)*rff(-1)
          + y_zpi10(6)*rff(-2)
          + y_zpi10(7)*rff(-3)
          + y_zpi10(8)*rff(-4)
          + y_zpi10(9)*rtr(-1)
          + y_zpi10(10)*ptr(-1)
          + y_zpi10(11)*xgap(-1)
          + y_zpi10(12)*xgap(-2)
          + y_zpi10(13)*xgap(-3)
          + y_zpi10(14)*xgap(-4)</eviews_equation>
      <python_equation>zpi10  - zpi10_aerr =
           y_zpi10_1*picnia(-1)
          + y_zpi10_2*picnia(-2)
          + y_zpi10_3*picnia(-3)
          + y_zpi10_4*picnia(-4)
          + y_zpi10_5*rff(-1)
          + y_zpi10_6*rff(-2)
          + y_zpi10_7*rff(-3)
          + y_zpi10_8*rff(-4)
          + y_zpi10_9*rtr(-1)
          + y_zpi10_10*ptr(-1)
          + y_zpi10_11*xgap(-1)
          + y_zpi10_12*xgap(-2)
          + y_zpi10_13*xgap(-3)
          + y_zpi10_14*xgap(-4)</python_equation>
      <coeff>
        <cf_name>y_zpi10(1)</cf_name>
        <cf_value>0.04357427172865281</cf_value>
        <t_stat>25581022077846.05</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zpi10(2)</cf_name>
        <cf_value>0.01313050267242623</cf_value>
        <t_stat>7018258649786.388</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zpi10(3)</cf_name>
        <cf_value>0.01553540483390203</cf_value>
        <t_stat>8308495386989.58</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zpi10(4)</cf_name>
        <cf_value>0.001463442508125493</cf_value>
        <t_stat>855683684257.6231</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zpi10(5)</cf_name>
        <cf_value>-0.1039822705900788</cf_value>
        <t_stat>-35596944123395.03</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zpi10(6)</cf_name>
        <cf_value>-0.01432543074446008</cf_value>
        <t_stat>-3550052775245.763</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zpi10(7)</cf_name>
        <cf_value>-0.02962517842600198</cf_value>
        <t_stat>-7310687451558.709</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zpi10(8)</cf_name>
        <cf_value>-0.007038183618428771</cf_value>
        <t_stat>-2388398287173.612</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zpi10(9)</cf_name>
        <cf_value>0.154971063378944</cf_value>
        <t_stat>64809640708192.54</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zpi10(10)</cf_name>
        <cf_value>0.9262963782569012</cf_value>
        <t_stat>189546297693701.4</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zpi10(11)</cf_name>
        <cf_value>0.06032284838878826</cf_value>
        <t_stat>17009212814890.9</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zpi10(12)</cf_name>
        <cf_value>-0.01019384116585764</cf_value>
        <t_stat>-1641397658677.163</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zpi10(13)</cf_name>
        <cf_value>0.02546215714985389</cf_value>
        <t_stat>4133493689133.451</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zpi10(14)</cf_name>
        <cf_value>0.02470109220233158</cf_value>
        <t_stat>6598174923072.22</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <rhs_eq_var>picnia</rhs_eq_var>
      <rhs_eq_var>ptr</rhs_eq_var>
      <rhs_eq_var>rff</rhs_eq_var>
      <rhs_eq_var>rtr</rhs_eq_var>
      <rhs_eq_var>xgap</rhs_eq_var>
    </standard_equation>
    <mce_equation>
      <mce_group>mcap</mce_group>
      <mce_description>ZPI10 a weighted average of future PCE price inflation.  The weights
sum to one and decline geometrically at a rate based on the average
duration of a ten-year bond.
</mce_description>
      <eviews_equation>zpi10 - zpi10_aerr =
             y_zpi10(1) * picnia
           + y_zpi10(2) * zpi10(1)
</eviews_equation>
      <python_equation>zpi10 - zpi10_aerr =
             y_zpi10_1 * picnia
           + y_zpi10_2 * zpi10(1)
</python_equation>
      <coeff>
        <cf_name>y_zpi10(1)</cf_name>
        <cf_value>0.03007455810944507</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zpi10(2)</cf_name>
        <cf_value>0.969925441890555</cf_value>
      </coeff>
      <rhs_eq_var>picnia</rhs_eq_var>
      <rhs_eq_var>zpi10</rhs_eq_var>
    </mce_equation>
  </variable>
  <variable>
    <name>zpi10f</name>
    <equation_type>Identity</equation_type>
    <sector>Expectations</sector>
    <definition>Expected cons. price infl., for FPXR eq. (10-yr mat.) (VAR exp.)</definition>
    <standard_equation>
      <eviews_equation>zpi10f-zpi10f_aerr = zpi10 </eviews_equation>
      <python_equation>zpi10f-zpi10f_aerr = zpi10 </python_equation>
      <rhs_eq_var>zpi10</rhs_eq_var>
    </standard_equation>
    <mce_equation>
      <mce_group>mcap</mce_group>
      <mce_description/>
      <eviews_equation>zpi10f - zpi10f_aerr =
             y_zpi10f(1) * picnia
           + y_zpi10f(2) * zpi10f(1)
</eviews_equation>
      <python_equation>zpi10f - zpi10f_aerr =
             y_zpi10f_1 * picnia
           + y_zpi10f_2 * zpi10f(1)
</python_equation>
      <coeff>
        <cf_name>y_zpi10f(1)</cf_name>
        <cf_value>0.03007455810944507</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zpi10f(2)</cf_name>
        <cf_value>0.969925441890555</cf_value>
      </coeff>
      <rhs_eq_var>picnia</rhs_eq_var>
      <rhs_eq_var>zpi10f</rhs_eq_var>
    </mce_equation>
  </variable>
  <variable>
    <name>zpi5</name>
    <equation_type>Identity</equation_type>
    <sector>Expectations</sector>
    <definition>Expected cons. price infl., for RCCD eq. (5-yr mat.) (VAR exp.)</definition>
    <description>ZPI5 is a weighted average of future PCE price inflation.  The
weights sum to one and decline geometrically at a rate based on the
average duration of a five-year bond.  The equation shown below is the
reduced-form representation of this expectational computation based on
the core part of the expectations VAR.
</description>
    <standard_equation>
      <eviews_equation>zpi5  - zpi5_aerr =
           y_zpi5(1)*picnia(-1)
          + y_zpi5(2)*picnia(-2)
          + y_zpi5(3)*picnia(-3)
          + y_zpi5(4)*picnia(-4)
          + y_zpi5(5)*rff(-1)
          + y_zpi5(6)*rff(-2)
          + y_zpi5(7)*rff(-3)
          + y_zpi5(8)*rff(-4)
          + y_zpi5(9)*rtr(-1)
          + y_zpi5(10)*ptr(-1)
          + y_zpi5(11)*xgap(-1)
          + y_zpi5(12)*xgap(-2)
          + y_zpi5(13)*xgap(-3)
          + y_zpi5(14)*xgap(-4)</eviews_equation>
      <python_equation>zpi5  - zpi5_aerr =
           y_zpi5_1*picnia(-1)
          + y_zpi5_2*picnia(-2)
          + y_zpi5_3*picnia(-3)
          + y_zpi5_4*picnia(-4)
          + y_zpi5_5*rff(-1)
          + y_zpi5_6*rff(-2)
          + y_zpi5_7*rff(-3)
          + y_zpi5_8*rff(-4)
          + y_zpi5_9*rtr(-1)
          + y_zpi5_10*ptr(-1)
          + y_zpi5_11*xgap(-1)
          + y_zpi5_12*xgap(-2)
          + y_zpi5_13*xgap(-3)
          + y_zpi5_14*xgap(-4)</python_equation>
      <coeff>
        <cf_name>y_zpi5(1)</cf_name>
        <cf_value>0.08178762749631196</cf_value>
        <t_stat>74344487059693.85</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zpi5(2)</cf_name>
        <cf_value>0.02218684188675673</cf_value>
        <t_stat>18361870048742.15</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zpi5(3)</cf_name>
        <cf_value>0.02501945218256163</cf_value>
        <t_stat>20718151682702.81</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zpi5(4)</cf_name>
        <cf_value>-9.007062448078559e-05</cf_value>
        <t_stat>-81544404058.8857</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zpi5(5)</cf_name>
        <cf_value>-0.1456765471759016</cf_value>
        <t_stat>-77217629199387.48</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zpi5(6)</cf_name>
        <cf_value>-0.03113773606787808</cf_value>
        <t_stat>-11947789347514.41</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zpi5(7)</cf_name>
        <cf_value>-0.02949319295743922</cf_value>
        <t_stat>-11269183185568.2</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zpi5(8)</cf_name>
        <cf_value>-0.0275798582145864</cf_value>
        <t_stat>-14491441607625.02</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zpi5(9)</cf_name>
        <cf_value>0.2338873344157305</cf_value>
        <t_stat>151449941153792.1</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zpi5(10)</cf_name>
        <cf_value>0.8710961490588724</cf_value>
        <t_stat>275997302660806.2</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zpi5(11)</cf_name>
        <cf_value>0.174192252057006</cf_value>
        <t_stat>76050944579879.58</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zpi5(12)</cf_name>
        <cf_value>-0.07184023126885179</cf_value>
        <t_stat>-17910886129947.65</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zpi5(13)</cf_name>
        <cf_value>0.04066371951581198</cf_value>
        <t_stat>10221216553467.47</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zpi5(14)</cf_name>
        <cf_value>0.04494462398507848</cf_value>
        <t_stat>18589119674318.56</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <rhs_eq_var>picnia</rhs_eq_var>
      <rhs_eq_var>ptr</rhs_eq_var>
      <rhs_eq_var>rff</rhs_eq_var>
      <rhs_eq_var>rtr</rhs_eq_var>
      <rhs_eq_var>xgap</rhs_eq_var>
    </standard_equation>
    <mce_equation>
      <mce_group>mcother</mce_group>
      <mce_description>ZPI5 a weighted average of future PCE price inflation.  The weights
sum to one and decline geometrically at a rate based on the average
duration of a five-year bond.
</mce_description>
      <eviews_equation>zpi5 - zpi5_aerr =
            y_zpi5(1) * picnia
          + y_zpi5(2) * zpi5(1)
</eviews_equation>
      <python_equation>zpi5 - zpi5_aerr =
            y_zpi5_1 * picnia
          + y_zpi5_2 * zpi5(1)
</python_equation>
      <coeff>
        <cf_name>y_zpi5(1)</cf_name>
        <cf_value>0.05479365264340726</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zpi5(2)</cf_name>
        <cf_value>0.9452063473565927</cf_value>
      </coeff>
      <rhs_eq_var>picnia</rhs_eq_var>
      <rhs_eq_var>zpi5</rhs_eq_var>
    </mce_equation>
  </variable>
  <variable>
    <name>zpib5</name>
    <equation_type>Identity</equation_type>
    <sector>Expectations</sector>
    <definition>Expected output price infl., for RPD eq. (5-yr mat.) (VAR exp.)</definition>
    <description>ZPI5 is a weighted average of future business sector price
inflation.  The weights sum to one and decline geometrically at a rate
based on the average duration of a five-year bond.  The equation shown
below is the reduced-form representation of this expectational
computation based on a small-scale VAR model.
</description>
    <standard_equation>
      <eviews_equation>zpib5  - zpib5_aerr =
           y_zpib5(1)
          + y_zpib5(2)*picnia(-1)
          + y_zpib5(3)*picnia(-2)
          + y_zpib5(4)*picnia(-3)
          + y_zpib5(5)*picnia(-4)
          + y_zpib5(6)*rff(-1)
          + y_zpib5(7)*rff(-2)
          + y_zpib5(8)*rff(-3)
          + y_zpib5(9)*rff(-4)
          + y_zpib5(10)*rtr(-1)
          + y_zpib5(11)*ptr(-1)
          + y_zpib5(12)*xgap(-1)
          + y_zpib5(13)*xgap(-2)
          + y_zpib5(14)*xgap(-3)
          + y_zpib5(15)*xgap(-4)
          + y_zpib5(16)*400*dlog(pxb(-1))
          + y_zpib5(17)*400*dlog(pxb(-2))
          + y_zpib5(18)*400*dlog(pxb(-3))
          + y_zpib5(19)*400*dlog(pxb(-4))</eviews_equation>
      <python_equation>zpib5  - zpib5_aerr =
           y_zpib5_1
          + y_zpib5_2*picnia(-1)
          + y_zpib5_3*picnia(-2)
          + y_zpib5_4*picnia(-3)
          + y_zpib5_5*picnia(-4)
          + y_zpib5_6*rff(-1)
          + y_zpib5_7*rff(-2)
          + y_zpib5_8*rff(-3)
          + y_zpib5_9*rff(-4)
          + y_zpib5_10*rtr(-1)
          + y_zpib5_11*ptr(-1)
          + y_zpib5_12*xgap(-1)
          + y_zpib5_13*xgap(-2)
          + y_zpib5_14*xgap(-3)
          + y_zpib5_15*xgap(-4)
          + y_zpib5_16*400*(log(pxb(-1)) - log(pxb(-2)))
          + y_zpib5_17*400*(log(pxb(-2)) - log(pxb(-3)))
          + y_zpib5_18*400*(log(pxb(-3)) - log(pxb(-4)))
          + y_zpib5_19*400*(log(pxb(-4)) - log(pxb(-5)))</python_equation>
      <coeff>
        <cf_name>y_zpib5(1)</cf_name>
        <cf_value>-1.26476978296206e-13</cf_value>
        <t_stat>-7.683403574672241</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zpib5(2)</cf_name>
        <cf_value>0.09034003814843484</cf_value>
        <t_stat>34392274456529.41</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zpib5(3)</cf_name>
        <cf_value>0.03168080238087264</cf_value>
        <t_stat>11162726930000.75</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zpib5(4)</cf_name>
        <cf_value>0.02770787918164321</cf_value>
        <t_stat>9958273727502.344</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zpib5(5)</cf_name>
        <cf_value>-0.01510178193123456</cf_value>
        <t_stat>-5515639366297.929</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zpib5(6)</cf_name>
        <cf_value>-0.1969518961104264</cf_value>
        <t_stat>-62604508571114.16</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zpib5(7)</cf_name>
        <cf_value>-0.05959604539330121</cf_value>
        <t_stat>-13635517988663.41</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zpib5(8)</cf_name>
        <cf_value>-0.04862163727886338</cf_value>
        <t_stat>-11137165658609.11</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zpib5(9)</cf_name>
        <cf_value>-0.03073950807678016</cf_value>
        <t_stat>-9690751648350.959</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zpib5(10)</cf_name>
        <cf_value>0.335909086859382</cf_value>
        <t_stat>49264303130607.26</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zpib5(11)</cf_name>
        <cf_value>0.7000747567151794</cf_value>
        <t_stat>115459764873131.9</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zpib5(12)</cf_name>
        <cf_value>0.1468903171096267</cf_value>
        <t_stat>37946443497785.82</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zpib5(13)</cf_name>
        <cf_value>-0.03885798005146663</cf_value>
        <t_stat>-5725835529903.006</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zpib5(14)</cf_name>
        <cf_value>0.05539395398596192</cf_value>
        <t_stat>8379743264899.978</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zpib5(15)</cf_name>
        <cf_value>0.04005203158941733</cf_value>
        <t_stat>10042742832237.08</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zpib5(16)</cf_name>
        <cf_value>0.07826113766639138</cf_value>
        <t_stat>24933113266351.02</t_stat>
        <distributed_lag_group>4</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zpib5(17)</cf_name>
        <cf_value>0.03750285709064176</cf_value>
        <t_stat>11547360724411.54</t_stat>
        <distributed_lag_group>4</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zpib5(18)</cf_name>
        <cf_value>0.01611932032188939</cf_value>
        <t_stat>5165441240342.243</t_stat>
        <distributed_lag_group>4</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zpib5(19)</cf_name>
        <cf_value>0.0334149904260995</cf_value>
        <t_stat>11927548801603.49</t_stat>
        <distributed_lag_group>4</distributed_lag_group>
      </coeff>
      <rhs_eq_var>picnia</rhs_eq_var>
      <rhs_eq_var>ptr</rhs_eq_var>
      <rhs_eq_var>pxb</rhs_eq_var>
      <rhs_eq_var>rff</rhs_eq_var>
      <rhs_eq_var>rtr</rhs_eq_var>
      <rhs_eq_var>xgap</rhs_eq_var>
    </standard_equation>
    <mce_equation>
      <mce_group>mcap</mce_group>
      <mce_description>ZPI5 a weighted average of future business sector price inflation.
The weights sum to one and decline geometrically at a rate based on
the average duration of a five-year bond.
</mce_description>
      <eviews_equation>zpib5 - zpib5_aerr =
             y_zpib5(1) * 400 * d( log(pxb), 0, 1 )
           + y_zpib5(2) * zpib5(1)
</eviews_equation>
      <python_equation>zpib5 - zpib5_aerr =
             y_zpib5_1 * 400 * ( log(pxb) - ( log(pxb(-1))))
           + y_zpib5_2 * zpib5(1)
</python_equation>
      <coeff>
        <cf_name>y_zpib5(1)</cf_name>
        <cf_value>0.05479365264340726</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zpib5(2)</cf_name>
        <cf_value>0.9452063473565927</cf_value>
      </coeff>
      <rhs_eq_var>pxb</rhs_eq_var>
      <rhs_eq_var>zpib5</rhs_eq_var>
    </mce_equation>
  </variable>
  <variable>
    <name>zpic30</name>
    <equation_type>Identity</equation_type>
    <sector>Expectations</sector>
    <definition>Expected cons. price infl., for REQ eq. (30-yr mat.) (VAR exp.)</definition>
    <description>ZPIC30 is a weighted average of future PCE price inflation.  The
weights sum to one and decline geometrically at a rate based on the
average duration of a thirty-year bond.  The equation shown below is the
reduced-form representation of this expectational computation based on
the core part of the expectations VAR.
</description>
    <standard_equation>
      <eviews_equation>zpic30  - zpic30_aerr =
           y_zpic30(1)
          + y_zpic30(2)*picnia
          + y_zpic30(3)*picnia(-1)
          + y_zpic30(4)*picnia(-2)
          + y_zpic30(5)*picnia(-3)
          + y_zpic30(6)*rff
          + y_zpic30(7)*rff(-1)
          + y_zpic30(8)*rff(-2)
          + y_zpic30(9)*rff(-3)
          + y_zpic30(10)*rtr
          + y_zpic30(11)*ptr
          + y_zpic30(12)*xgap
          + y_zpic30(13)*xgap(-1)
          + y_zpic30(14)*xgap(-2)
          + y_zpic30(15)*xgap(-3)</eviews_equation>
      <python_equation>zpic30  - zpic30_aerr =
           y_zpic30_1
          + y_zpic30_2*picnia
          + y_zpic30_3*picnia(-1)
          + y_zpic30_4*picnia(-2)
          + y_zpic30_5*picnia(-3)
          + y_zpic30_6*rff
          + y_zpic30_7*rff(-1)
          + y_zpic30_8*rff(-2)
          + y_zpic30_9*rff(-3)
          + y_zpic30_10*rtr
          + y_zpic30_11*ptr
          + y_zpic30_12*xgap
          + y_zpic30_13*xgap(-1)
          + y_zpic30_14*xgap(-2)
          + y_zpic30_15*xgap(-3)</python_equation>
      <coeff>
        <cf_name>y_zpic30(1)</cf_name>
        <cf_value>1.044280285832078e-13</cf_value>
        <t_stat>8.828724269558528</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zpic30(2)</cf_name>
        <cf_value>0.04015650846972114</cf_value>
        <t_stat>30416237654149.4</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zpic30(3)</cf_name>
        <cf_value>0.006934744993613762</cf_value>
        <t_stat>4776647021764.445</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zpic30(4)</cf_name>
        <cf_value>0.008188906123754725</cf_value>
        <t_stat>5660807375569.69</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zpic30(5)</cf_name>
        <cf_value>0.0007885180169860036</cf_value>
        <t_stat>593507324804.0675</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zpic30(6)</cf_name>
        <cf_value>-0.05503875125078834</cf_value>
        <t_stat>-24115027675954.86</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zpic30(7)</cf_name>
        <cf_value>-0.007557417372706724</cf_value>
        <t_stat>-2412096360020.614</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zpic30(8)</cf_name>
        <cf_value>-0.015808419274298</cf_value>
        <t_stat>-5029937955937.705</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zpic30(9)</cf_name>
        <cf_value>-0.00357920111984304</cf_value>
        <t_stat>-1556924824600.783</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zpic30(10)</cf_name>
        <cf_value>0.08198378901761255</cf_value>
        <t_stat>16798496169736.65</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zpic30(11)</cf_name>
        <cf_value>0.943931322395943</cf_value>
        <t_stat>214636286092698.4</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zpic30(12)</cf_name>
        <cf_value>0.03119549195915805</cf_value>
        <t_stat>11342786247061.99</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zpic30(13)</cf_name>
        <cf_value>-0.004756369295027224</cf_value>
        <t_stat>-988190865805.5089</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zpic30(14)</cf_name>
        <cf_value>0.01348922660681493</cf_value>
        <t_stat>2824557302251.415</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zpic30(15)</cf_name>
        <cf_value>0.01299481953814399</cf_value>
        <t_stat>4475369411695.433</t_stat>
      </coeff>
      <rhs_eq_var>picnia</rhs_eq_var>
      <rhs_eq_var>ptr</rhs_eq_var>
      <rhs_eq_var>rff</rhs_eq_var>
      <rhs_eq_var>rtr</rhs_eq_var>
      <rhs_eq_var>xgap</rhs_eq_var>
    </standard_equation>
    <mce_equation>
      <mce_group>mcap</mce_group>
      <mce_description>ZPIC30 a weighted average of future PCE price inflation.  The weights
sum to one and decline geometrically at a rate based on the average
duration of a thirty-year bond.
</mce_description>
      <eviews_equation>zpic30 - zpic30_aerr =
              y_zpic30(1) * picnia
            + y_zpic30(2) * zpic30(1)
</eviews_equation>
      <python_equation>zpic30 - zpic30_aerr =
              y_zpic30_1 * picnia
            + y_zpic30_2 * zpic30(1)
</python_equation>
      <coeff>
        <cf_name>y_zpic30(1)</cf_name>
        <cf_value>0.01410658898201937</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zpic30(2)</cf_name>
        <cf_value>0.9858934110179807</cf_value>
      </coeff>
      <rhs_eq_var>picnia</rhs_eq_var>
      <rhs_eq_var>zpic30</rhs_eq_var>
    </mce_equation>
  </variable>
  <variable>
    <name>zpic58</name>
    <equation_type>Identity</equation_type>
    <sector>Expectations</sector>
    <definition>Expected 4-qtr consumer price inflation (8 qtrs. in the future) (VAR exp.)</definition>
    <description>ZPIC58 is the expected four-quarter rate of PCE price inflation
measured eight quarters in the future.  The equation shown below is
the reduced-form representation of this expectational computation
based on the core part of the expectations VAR.
</description>
    <standard_equation>
      <eviews_equation>zpic58  - zpic58_aerr =
           y_zpic58(1)*picnia
          + y_zpic58(2)*picnia(-1)
          + y_zpic58(3)*picnia(-2)
          + y_zpic58(4)*picnia(-3)
          + y_zpic58(5)*rff
          + y_zpic58(6)*rff(-1)
          + y_zpic58(7)*rff(-2)
          + y_zpic58(8)*rff(-3)
          + y_zpic58(9)*rtr
          + y_zpic58(10)*ptr
          + y_zpic58(11)*xgap
          + y_zpic58(12)*xgap(-1)
          + y_zpic58(13)*xgap(-2)
          + y_zpic58(14)*xgap(-3)</eviews_equation>
      <python_equation>zpic58  - zpic58_aerr =
           y_zpic58_1*picnia
          + y_zpic58_2*picnia(-1)
          + y_zpic58_3*picnia(-2)
          + y_zpic58_4*picnia(-3)
          + y_zpic58_5*rff
          + y_zpic58_6*rff(-1)
          + y_zpic58_7*rff(-2)
          + y_zpic58_8*rff(-3)
          + y_zpic58_9*rtr
          + y_zpic58_10*ptr
          + y_zpic58_11*xgap
          + y_zpic58_12*xgap(-1)
          + y_zpic58_13*xgap(-2)
          + y_zpic58_14*xgap(-3)</python_equation>
      <coeff>
        <cf_name>y_zpic58(1)</cf_name>
        <cf_value>0.3593365920920064</cf_value>
        <t_stat>314355563406393</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zpic58(2)</cf_name>
        <cf_value>0.05403868424326922</cf_value>
        <t_stat>43024631474895.63</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zpic58(3)</cf_name>
        <cf_value>0.06039898003529536</cf_value>
        <t_stat>48215412127386.94</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zpic58(4)</cf_name>
        <cf_value>-0.01698560834120338</cf_value>
        <t_stat>-14803313924485.12</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zpic58(5)</cf_name>
        <cf_value>0.05517476076748708</cf_value>
        <t_stat>28156843778881.76</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zpic58(6)</cf_name>
        <cf_value>-0.1153492438678267</cf_value>
        <t_stat>-42578442816375.41</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zpic58(7)</cf_name>
        <cf_value>-0.004952391392669846</cf_value>
        <t_stat>-1820346076968.111</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zpic58(8)</cf_name>
        <cf_value>-0.1104437552716417</cf_value>
        <t_stat>-55829099087420.48</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zpic58(9)</cf_name>
        <cf_value>0.1755706297646033</cf_value>
        <t_stat>109427301097439.8</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zpic58(10)</cf_name>
        <cf_value>0.5432113519706085</cf_value>
        <t_stat>166146844821212.5</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zpic58(11)</cf_name>
        <cf_value>0.1617613655842677</cf_value>
        <t_stat>67946735569054.18</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zpic58(12)</cf_name>
        <cf_value>-0.1753961497534604</cf_value>
        <t_stat>-42079000636876.04</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zpic58(13)</cf_name>
        <cf_value>0.08374788806947355</cf_value>
        <t_stat>20266222352301</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zpic58(14)</cf_name>
        <cf_value>0.1284899640287538</cf_value>
        <t_stat>51128459683956.72</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <rhs_eq_var>picnia</rhs_eq_var>
      <rhs_eq_var>ptr</rhs_eq_var>
      <rhs_eq_var>rff</rhs_eq_var>
      <rhs_eq_var>rtr</rhs_eq_var>
      <rhs_eq_var>xgap</rhs_eq_var>
    </standard_equation>
    <mce_equation>
      <mce_group>mcap</mce_group>
      <mce_description>ZPIC58 is the expected four-quarter rate of PCE price inflation
measured eight quarters in the future.
</mce_description>
      <eviews_equation>zpic58 - zpic58_aerr = pic4(8) </eviews_equation>
      <python_equation>zpic58 - zpic58_aerr = pic4(8) </python_equation>
      <rhs_eq_var>pic4</rhs_eq_var>
    </mce_equation>
  </variable>
  <variable>
    <name>zpicxfe</name>
    <equation_type>Identity</equation_type>
    <sector>Expectations</sector>
    <definition>Expected value of picxfe in the next quarter (VAR exp.)</definition>
    <description>The equation shown below for the expectation of core PCE price
inflation one quarter in the future is the reduced-form representation
of this expectation in the small linear model used to jointly
estimate the PICXFE and PIECI equations.
</description>
    <standard_equation>
      <eviews_equation>zpicxfe-zpicxfe_aerr =  ( y_zpicxfe(1) *  picxfe(-1) +  y_zpicxfe(2) *  picxfe(-2) +  y_zpicxfe(3) *  picxfe(-3) +  y_zpicxfe(4) *  picxfe(-4))
                 +  ( y_zpicxfe(5) *  pieci(-1) +  y_zpicxfe(6) *  pieci(-2) +  y_zpicxfe(7) *  pieci(-3) +  y_zpicxfe(8) *  pieci(-4))
                 +  ( y_zpicxfe(9) *  rff(-1) +  y_zpicxfe(10) *  rff(-2) +  y_zpicxfe(11) *  rff(-3) +  y_zpicxfe(12) *  rff(-4))
                 +  ( y_zpicxfe(13) *  xgap2(-1) +  y_zpicxfe(14) *  xgap2(-2) +  y_zpicxfe(15) *  xgap2(-3) +  y_zpicxfe(16) *  xgap2(-4))
                 + y_zpicxfe(17) * rtr(-1)
                 + y_zpicxfe(18) * ptr(-1)
                 + y_zpicxfe(19) * log(qpcnia(-1)/pcnia(-1))
                 + y_zpicxfe(20) * log(qpl(-1)/pl(-1))
                 + y_zpicxfe(21) * (hlprdt(-1) - 400*huqpct(-1))
                 +  ( y_zpicxfe(22) * (lur(-1) - lurnat(-1)) +  y_zpicxfe(23) * (lur(-2) - lurnat(-2)))
</eviews_equation>
      <python_equation>zpicxfe-zpicxfe_aerr =  ( y_zpicxfe_1 *  picxfe(-1) +  y_zpicxfe_2 *  picxfe(-2) +  y_zpicxfe_3 *  picxfe(-3) +  y_zpicxfe_4 *  picxfe(-4))
                 +  ( y_zpicxfe_5 *  pieci(-1) +  y_zpicxfe_6 *  pieci(-2) +  y_zpicxfe_7 *  pieci(-3) +  y_zpicxfe_8 *  pieci(-4))
                 +  ( y_zpicxfe_9 *  rff(-1) +  y_zpicxfe_10 *  rff(-2) +  y_zpicxfe_11 *  rff(-3) +  y_zpicxfe_12 *  rff(-4))
                 +  ( y_zpicxfe_13 *  xgap2(-1) +  y_zpicxfe_14 *  xgap2(-2) +  y_zpicxfe_15 *  xgap2(-3) +  y_zpicxfe_16 *  xgap2(-4))
                 + y_zpicxfe_17 * rtr(-1)
                 + y_zpicxfe_18 * ptr(-1)
                 + y_zpicxfe_19 * log(qpcnia(-1)/pcnia(-1))
                 + y_zpicxfe_20 * log(qpl(-1)/pl(-1))
                 + y_zpicxfe_21 * (hlprdt(-1) - 400*huqpct(-1))
                 +  ( y_zpicxfe_22 * (lur(-1) - lurnat(-1)) +  y_zpicxfe_23 * (lur(-2) - lurnat(-2)))
</python_equation>
      <coeff>
        <cf_name>y_zpicxfe(1)</cf_name>
        <cf_value>0.380818884672</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zpicxfe(2)</cf_name>
        <cf_value>0.00113182715476</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zpicxfe(3)</cf_name>
        <cf_value>0.00146351917605</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zpicxfe(4)</cf_name>
        <cf_value>0.00225729733693</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zpicxfe(5)</cf_name>
        <cf_value>0.0460967342223</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zpicxfe(6)</cf_name>
        <cf_value>0.0338772671906</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zpicxfe(7)</cf_name>
        <cf_value>0.0228924215171</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zpicxfe(8)</cf_name>
        <cf_value>0.0112105032823</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zpicxfe(9)</cf_name>
        <cf_value>-0.0140156100481</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zpicxfe(10)</cf_name>
        <cf_value>0.0011222896601</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zpicxfe(11)</cf_name>
        <cf_value>0.00760121840982</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zpicxfe(12)</cf_name>
        <cf_value>-0.00299260406007</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zpicxfe(13)</cf_name>
        <cf_value>0.0470383710002</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zpicxfe(14)</cf_name>
        <cf_value>-0.0278318348119</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zpicxfe(15)</cf_name>
        <cf_value>-0.00506170904133</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zpicxfe(16)</cf_name>
        <cf_value>-0.00225028901719</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zpicxfe(17)</cf_name>
        <cf_value>0.00828470603822</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zpicxfe(18)</cf_name>
        <cf_value>0.500251545448</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zpicxfe(19)</cf_name>
        <cf_value>11.937795061</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zpicxfe(20)</cf_name>
        <cf_value>6.84395376806e-05</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zpicxfe(21)</cf_name>
        <cf_value>-0.114076926212</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zpicxfe(22)</cf_name>
        <cf_value>-0.00383816812034</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zpicxfe(23)</cf_name>
        <cf_value>-0.000695300677346</cf_value>
      </coeff>
      <rhs_eq_var>hlprdt</rhs_eq_var>
      <rhs_eq_var>huqpct</rhs_eq_var>
      <rhs_eq_var>lur</rhs_eq_var>
      <rhs_eq_var>lurnat</rhs_eq_var>
      <rhs_eq_var>pcnia</rhs_eq_var>
      <rhs_eq_var>picxfe</rhs_eq_var>
      <rhs_eq_var>pieci</rhs_eq_var>
      <rhs_eq_var>pl</rhs_eq_var>
      <rhs_eq_var>ptr</rhs_eq_var>
      <rhs_eq_var>qpcnia</rhs_eq_var>
      <rhs_eq_var>qpl</rhs_eq_var>
      <rhs_eq_var>rff</rhs_eq_var>
      <rhs_eq_var>rtr</rhs_eq_var>
      <rhs_eq_var>xgap2</rhs_eq_var>
    </standard_equation>
    <mce_equation>
      <mce_group>mcwp</mce_group>
      <mce_description/>
      <eviews_equation>zpicxfe - zpicxfe_aerr = picxfe(1) </eviews_equation>
      <python_equation>zpicxfe - zpicxfe_aerr = picxfe(1) </python_equation>
      <rhs_eq_var>picxfe</rhs_eq_var>
    </mce_equation>
  </variable>
  <variable>
    <name>zpieci</name>
    <equation_type>Identity</equation_type>
    <sector>Expectations</sector>
    <definition>Expected value of pieci in the next quarter (VAR exp.)</definition>
    <description>The equation shown below for the expectation of the rate of growth
of ECI hourly compensation one quarter in the future is the
reduced-form representation of this expectation in the small linear
model used to jointly estimate the PICXFE and PIECI equations.

</description>
    <standard_equation>
      <eviews_equation>zpieci-zpieci_aerr =  ( y_zpieci(1) *  picxfe(-1) +  y_zpieci(2) *  picxfe(-2) +  y_zpieci(3) *  picxfe(-3) +  y_zpieci(4) *  picxfe(-4))
                 +  ( y_zpieci(5) *  pieci(-1) +  y_zpieci(6) *  pieci(-2) +  y_zpieci(7) *  pieci(-3) +  y_zpieci(8) *  pieci(-4))
                 +  ( y_zpieci(9) *  rff(-1) +  y_zpieci(10) *  rff(-2) +  y_zpieci(11) *  rff(-3) +  y_zpieci(12) *  rff(-4))
                 +  ( y_zpieci(13) *  xgap2(-1) +  y_zpieci(14) *  xgap2(-2) +  y_zpieci(15) *  xgap2(-3) +  y_zpieci(16) *  xgap2(-4))
                 + y_zpieci(17) * rtr(-1)
                 + y_zpieci(18) * ptr(-1)
                 + y_zpieci(19) * log(qpcnia(-1)/pcnia(-1))
                 + y_zpieci(20) * log(qpl(-1)/pl(-1))
                 + y_zpieci(21) * (hlprdt(-1) - 400*huqpct(-1))
                 +  ( y_zpieci(22) * (lur(-1) - lurnat(-1)) +  y_zpieci(23) * (lur(-2) - lurnat(-2)))
</eviews_equation>
      <python_equation>zpieci-zpieci_aerr =  ( y_zpieci_1 *  picxfe(-1) +  y_zpieci_2 *  picxfe(-2) +  y_zpieci_3 *  picxfe(-3) +  y_zpieci_4 *  picxfe(-4))
                 +  ( y_zpieci_5 *  pieci(-1) +  y_zpieci_6 *  pieci(-2) +  y_zpieci_7 *  pieci(-3) +  y_zpieci_8 *  pieci(-4))
                 +  ( y_zpieci_9 *  rff(-1) +  y_zpieci_10 *  rff(-2) +  y_zpieci_11 *  rff(-3) +  y_zpieci_12 *  rff(-4))
                 +  ( y_zpieci_13 *  xgap2(-1) +  y_zpieci_14 *  xgap2(-2) +  y_zpieci_15 *  xgap2(-3) +  y_zpieci_16 *  xgap2(-4))
                 + y_zpieci_17 * rtr(-1)
                 + y_zpieci_18 * ptr(-1)
                 + y_zpieci_19 * log(qpcnia(-1)/pcnia(-1))
                 + y_zpieci_20 * log(qpl(-1)/pl(-1))
                 + y_zpieci_21 * (hlprdt(-1) - 400*huqpct(-1))
                 +  ( y_zpieci_22 * (lur(-1) - lurnat(-1)) +  y_zpieci_23 * (lur(-2) - lurnat(-2)))
</python_equation>
      <coeff>
        <cf_name>y_zpieci(1)</cf_name>
        <cf_value>-0.026022539351</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zpieci(2)</cf_name>
        <cf_value>0.00320414216918</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zpieci(3)</cf_name>
        <cf_value>0.00402676215955</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zpieci(4)</cf_name>
        <cf_value>0.00650489050087</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zpieci(5)</cf_name>
        <cf_value>0.202430424141</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zpieci(6)</cf_name>
        <cf_value>0.196252633802</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zpieci(7)</cf_name>
        <cf_value>0.195837958296</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zpieci(8)</cf_name>
        <cf_value>0.0246831983934</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zpieci(9)</cf_name>
        <cf_value>-0.0328787076454</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zpieci(10)</cf_name>
        <cf_value>0.00135903909754</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zpieci(11)</cf_name>
        <cf_value>0.0229838005541</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zpieci(12)</cf_name>
        <cf_value>-0.00862383586105</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zpieci(13)</cf_name>
        <cf_value>0.148708914616</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zpieci(14)</cf_name>
        <cf_value>-0.0777266665551</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zpieci(15)</cf_name>
        <cf_value>-0.0137748704693</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zpieci(16)</cf_name>
        <cf_value>-0.00648469451174</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zpieci(17)</cf_name>
        <cf_value>0.0171597038548</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zpieci(18)</cf_name>
        <cf_value>0.393082529889</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zpieci(19)</cf_name>
        <cf_value>-4.49541220961</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zpieci(20)</cf_name>
        <cf_value>0.000154587412169</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zpieci(21)</cf_name>
        <cf_value>0.380795785368</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zpieci(22)</cf_name>
        <cf_value>-0.0172443115476</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zpieci(23)</cf_name>
        <cf_value>-0.00416159167724</cf_value>
      </coeff>
      <rhs_eq_var>hlprdt</rhs_eq_var>
      <rhs_eq_var>huqpct</rhs_eq_var>
      <rhs_eq_var>lur</rhs_eq_var>
      <rhs_eq_var>lurnat</rhs_eq_var>
      <rhs_eq_var>pcnia</rhs_eq_var>
      <rhs_eq_var>picxfe</rhs_eq_var>
      <rhs_eq_var>pieci</rhs_eq_var>
      <rhs_eq_var>pl</rhs_eq_var>
      <rhs_eq_var>ptr</rhs_eq_var>
      <rhs_eq_var>qpcnia</rhs_eq_var>
      <rhs_eq_var>qpl</rhs_eq_var>
      <rhs_eq_var>rff</rhs_eq_var>
      <rhs_eq_var>rtr</rhs_eq_var>
      <rhs_eq_var>xgap2</rhs_eq_var>
    </standard_equation>
    <mce_equation>
      <mce_group>mcwp</mce_group>
      <mce_description/>
      <eviews_equation>zpieci - zpieci_aerr = pieci(1) </eviews_equation>
      <python_equation>zpieci - zpieci_aerr = pieci(1) </python_equation>
      <rhs_eq_var>pieci</rhs_eq_var>
    </mce_equation>
  </variable>
  <variable>
    <name>zrff10</name>
    <equation_type>Identity</equation_type>
    <sector>Expectations</sector>
    <definition>Expected federal funds rate, for RG10 eq. (10-yr mat.) (VAR exp.)</definition>
    <description>ZRFF10 is a weighted average of future federal funds rates.  The
weights sum to one and decline geometrically at a rate based on the
average duration of a ten-year bond.  The equation shown below is the
reduced-form representation of this expectational computation based on
the core part of the expectations VAR.
</description>
    <standard_equation>
      <eviews_equation>zrff10  - zrff10_aerr =
           y_zrff10(1)
          + y_zrff10(2)*picnia
          + y_zrff10(3)*picnia(-1)
          + y_zrff10(4)*picnia(-2)
          + y_zrff10(5)*picnia(-3)
          + y_zrff10(6)*rff
          + y_zrff10(7)*rff(-1)
          + y_zrff10(8)*rff(-2)
          + y_zrff10(9)*rff(-3)
          + y_zrff10(10)*rtr
          + y_zrff10(11)*ptr
          + y_zrff10(12)*xgap
          + y_zrff10(13)*xgap(-1)
          + y_zrff10(14)*xgap(-2)
          + y_zrff10(15)*xgap(-3)</eviews_equation>
      <python_equation>zrff10  - zrff10_aerr =
           y_zrff10_1
          + y_zrff10_2*picnia
          + y_zrff10_3*picnia(-1)
          + y_zrff10_4*picnia(-2)
          + y_zrff10_5*picnia(-3)
          + y_zrff10_6*rff
          + y_zrff10_7*rff(-1)
          + y_zrff10_8*rff(-2)
          + y_zrff10_9*rff(-3)
          + y_zrff10_10*rtr
          + y_zrff10_11*ptr
          + y_zrff10_12*xgap
          + y_zrff10_13*xgap(-1)
          + y_zrff10_14*xgap(-2)
          + y_zrff10_15*xgap(-3)</python_equation>
      <coeff>
        <cf_name>y_zrff10(1)</cf_name>
        <cf_value>2.378638428839734e-13</cf_value>
        <t_stat>10.0046048739543</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zrff10(2)</cf_name>
        <cf_value>0.0001217535546263044</cf_value>
        <t_stat>45879833533.6565</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zrff10(3)</cf_name>
        <cf_value>-0.00917622608986857</cf_value>
        <t_stat>-3144469562487.966</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zrff10(4)</cf_name>
        <cf_value>-0.01586120496103595</cf_value>
        <t_stat>-5454805851857.53</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zrff10(5)</cf_name>
        <cf_value>-0.01154696442869298</cf_value>
        <t_stat>-4323872965813.665</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zrff10(6)</cf_name>
        <cf_value>0.2209177910482749</cf_value>
        <t_stat>48154903939923.56</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zrff10(7)</cf_name>
        <cf_value>-0.01580133905291904</cf_value>
        <t_stat>-2509029534494.984</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zrff10(8)</cf_name>
        <cf_value>0.1303085244646027</cf_value>
        <t_stat>20627074886671.23</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zrff10(9)</cf_name>
        <cf_value>-0.06613814788532775</cf_value>
        <t_stat>-14312786911213.06</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zrff10(10)</cf_name>
        <cf_value>0.7307131714250785</cf_value>
        <t_stat>74486915458169.02</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zrff10(11)</cf_name>
        <cf_value>0.0364626419250845</cf_value>
        <t_stat>4124786896497.413</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zrff10(12)</cf_name>
        <cf_value>0.3614091512807817</cf_value>
        <t_stat>65375901428112.96</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zrff10(13)</cf_name>
        <cf_value>-0.273261010083981</cf_value>
        <t_stat>-28244479360773.31</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zrff10(14)</cf_name>
        <cf_value>-0.03776285146860941</cf_value>
        <t_stat>-3933858692151.283</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zrff10(15)</cf_name>
        <cf_value>-0.007077405433229054</cf_value>
        <t_stat>-1212616148716.853</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <rhs_eq_var>picnia</rhs_eq_var>
      <rhs_eq_var>ptr</rhs_eq_var>
      <rhs_eq_var>rff</rhs_eq_var>
      <rhs_eq_var>rtr</rhs_eq_var>
      <rhs_eq_var>xgap</rhs_eq_var>
    </standard_equation>
    <mce_equation>
      <mce_group>mcap</mce_group>
      <mce_description> ZRFF10 is a weighted average of future federal funds rates.  The weights
sum to one and decline geometrically at a rate based on the average
duration of a ten-year bond.
</mce_description>
      <eviews_equation>zrff10 - zrff10_aerr =
              y_zrff10(1) * rff
            + y_zrff10(2) * zrff10(1)
</eviews_equation>
      <python_equation>zrff10 - zrff10_aerr =
              y_zrff10_1 * rff
            + y_zrff10_2 * zrff10(1)
</python_equation>
      <coeff>
        <cf_name>y_zrff10(1)</cf_name>
        <cf_value>0.03007455810944507</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zrff10(2)</cf_name>
        <cf_value>0.969925441890555</cf_value>
      </coeff>
      <rhs_eq_var>rff</rhs_eq_var>
      <rhs_eq_var>zrff10</rhs_eq_var>
    </mce_equation>
  </variable>
  <variable>
    <name>zrff30</name>
    <equation_type>Identity</equation_type>
    <sector>Expectations</sector>
    <definition>Expected federal funds rate, for RG30 eq. (30-yr mat.) (VAR exp.)</definition>
    <description>ZRFF30 is a weighted average of future federal funds rates.  The
weights sum to one and decline geometrically at a rate based on the
average duration of a thirty-year bond.  The equation shown below is the
reduced-form representation of this expectational computation based on
the core part of the expectations VAR.
</description>
    <standard_equation>
      <eviews_equation>zrff30  - zrff30_aerr =
           y_zrff30(1)
          + y_zrff30(2)*picnia
          + y_zrff30(3)*picnia(-1)
          + y_zrff30(4)*picnia(-2)
          + y_zrff30(5)*picnia(-3)
          + y_zrff30(6)*rff
          + y_zrff30(7)*rff(-1)
          + y_zrff30(8)*rff(-2)
          + y_zrff30(9)*rff(-3)
          + y_zrff30(10)*rtr
          + y_zrff30(11)*ptr
          + y_zrff30(12)*xgap
          + y_zrff30(13)*xgap(-1)
          + y_zrff30(14)*xgap(-2)
          + y_zrff30(15)*xgap(-3)</eviews_equation>
      <python_equation>zrff30  - zrff30_aerr =
           y_zrff30_1
          + y_zrff30_2*picnia
          + y_zrff30_3*picnia(-1)
          + y_zrff30_4*picnia(-2)
          + y_zrff30_5*picnia(-3)
          + y_zrff30_6*rff
          + y_zrff30_7*rff(-1)
          + y_zrff30_8*rff(-2)
          + y_zrff30_9*rff(-3)
          + y_zrff30_10*rtr
          + y_zrff30_11*ptr
          + y_zrff30_12*xgap
          + y_zrff30_13*xgap(-1)
          + y_zrff30_14*xgap(-2)
          + y_zrff30_15*xgap(-3)</python_equation>
      <coeff>
        <cf_name>y_zrff30(1)</cf_name>
        <cf_value>1.711459357335906e-13</cf_value>
        <t_stat>12.13061728310166</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zrff30(2)</cf_name>
        <cf_value>0.0001806188860987932</cf_value>
        <t_stat>114695966239.8541</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zrff30(3)</cf_name>
        <cf_value>-0.004921864186060088</cf_value>
        <t_stat>-2842220163545.645</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zrff30(4)</cf_name>
        <cf_value>-0.0085101379490877</cf_value>
        <t_stat>-4932016505433.256</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zrff30(5)</cf_name>
        <cf_value>-0.006220981183951381</cf_value>
        <t_stat>-3925624781624.022</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zrff30(6)</cf_name>
        <cf_value>0.11864291327276</cf_value>
        <t_stat>43580923786319.01</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zrff30(7)</cf_name>
        <cf_value>-0.008553403609128176</cf_value>
        <t_stat>-2288735721356.686</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zrff30(8)</cf_name>
        <cf_value>0.06994575055112089</cf_value>
        <t_stat>18658251966985.94</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zrff30(9)</cf_name>
        <cf_value>-0.03560722072285206</cf_value>
        <t_stat>-12985391687353.47</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zrff30(10)</cf_name>
        <cf_value>0.8555719605078006</cf_value>
        <t_stat>146971930365859.7</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zrff30(11)</cf_name>
        <cf_value>0.01947236443310801</cf_value>
        <t_stat>3712076118807.208</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zrff30(12)</cf_name>
        <cf_value>0.1938808633160732</cf_value>
        <t_stat>59101471032241.39</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zrff30(13)</cf_name>
        <cf_value>-0.146844106705379</cf_value>
        <t_stat>-25577448962069.83</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zrff30(14)</cf_name>
        <cf_value>-0.02021989944869175</cf_value>
        <t_stat>-3549586528896.472</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zrff30(15)</cf_name>
        <cf_value>-0.003727736282464759</cf_value>
        <t_stat>-1076314655672.266</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <rhs_eq_var>picnia</rhs_eq_var>
      <rhs_eq_var>ptr</rhs_eq_var>
      <rhs_eq_var>rff</rhs_eq_var>
      <rhs_eq_var>rtr</rhs_eq_var>
      <rhs_eq_var>xgap</rhs_eq_var>
    </standard_equation>
    <mce_equation>
      <mce_group>mcap</mce_group>
      <mce_description> ZRFF30 is a weighted average of future federal funds rates.  The weights
sum to one and decline geometrically at a rate based on the average
duration of a thirty-year bond.
</mce_description>
      <eviews_equation>zrff30 - zrff30_aerr =
              y_zrff30(1) * rff
            + y_zrff30(2) * zrff30(1)
</eviews_equation>
      <python_equation>zrff30 - zrff30_aerr =
              y_zrff30_1 * rff
            + y_zrff30_2 * zrff30(1)
</python_equation>
      <coeff>
        <cf_name>y_zrff30(1)</cf_name>
        <cf_value>0.01410658898201937</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zrff30(2)</cf_name>
        <cf_value>0.9858934110179807</cf_value>
      </coeff>
      <rhs_eq_var>rff</rhs_eq_var>
      <rhs_eq_var>zrff30</rhs_eq_var>
    </mce_equation>
  </variable>
  <variable>
    <name>zrff5</name>
    <equation_type>Identity</equation_type>
    <sector>Expectations</sector>
    <definition>Expected federal funds rate, for RG5 eq. (5-yr mat.) (VAR exp.)</definition>
    <description>ZRFF5 is a weighted average of future federal funds rates.  The
weights sum to one and decline geometrically at a rate based on the
average duration of a five-year bond.  The equation shown below is the
reduced-form representation of this expectational computation based on
the core part of the expectations VAR.
</description>
    <standard_equation>
      <eviews_equation>zrff5  - zrff5_aerr =
           y_zrff5(1)
          + y_zrff5(2)*picnia
          + y_zrff5(3)*picnia(-1)
          + y_zrff5(4)*picnia(-2)
          + y_zrff5(5)*picnia(-3)
          + y_zrff5(6)*rff
          + y_zrff5(7)*rff(-1)
          + y_zrff5(8)*rff(-2)
          + y_zrff5(9)*rff(-3)
          + y_zrff5(10)*rtr
          + y_zrff5(11)*ptr
          + y_zrff5(12)*xgap
          + y_zrff5(13)*xgap(-1)
          + y_zrff5(14)*xgap(-2)
          + y_zrff5(15)*xgap(-3)</eviews_equation>
      <python_equation>zrff5  - zrff5_aerr =
           y_zrff5_1
          + y_zrff5_2*picnia
          + y_zrff5_3*picnia(-1)
          + y_zrff5_4*picnia(-2)
          + y_zrff5_5*picnia(-3)
          + y_zrff5_6*rff
          + y_zrff5_7*rff(-1)
          + y_zrff5_8*rff(-2)
          + y_zrff5_9*rff(-3)
          + y_zrff5_10*rtr
          + y_zrff5_11*ptr
          + y_zrff5_12*xgap
          + y_zrff5_13*xgap(-1)
          + y_zrff5_14*xgap(-2)
          + y_zrff5_15*xgap(-3)</python_equation>
      <coeff>
        <cf_name>y_zrff5(1)</cf_name>
        <cf_value>2.601031452674343e-13</cf_value>
        <t_stat>12.01114484734328</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zrff5(2)</cf_name>
        <cf_value>0.006240324440737379</cf_value>
        <t_stat>2581752724956.416</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zrff5(3)</cf_name>
        <cf_value>-0.0131975418361076</cf_value>
        <t_stat>-4965278667311.086</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zrff5(4)</cf_name>
        <cf_value>-0.02478131515494538</cf_value>
        <t_stat>-9356959758970.872</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zrff5(5)</cf_name>
        <cf_value>-0.01906124455815977</cf_value>
        <t_stat>-7836527137227.13</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zrff5(6)</cf_name>
        <cf_value>0.356356038809717</cf_value>
        <t_stat>85282759002598.01</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zrff5(7)</cf_name>
        <cf_value>-0.02968927450559823</cf_value>
        <t_stat>-5175815146235.343</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zrff5(8)</cf_name>
        <cf_value>0.2137924427116254</cf_value>
        <t_stat>37155615321045.85</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zrff5(9)</cf_name>
        <cf_value>-0.1108065994879449</cf_value>
        <t_stat>-26327225550822.67</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zrff5(10)</cf_name>
        <cf_value>0.57034739247192</cf_value>
        <t_stat>63832198886307.72</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zrff5(11)</cf_name>
        <cf_value>0.05079977710860725</cf_value>
        <t_stat>6309318921722.545</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zrff5(12)</cf_name>
        <cf_value>0.6152802763768458</cf_value>
        <t_stat>122196517406655.4</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zrff5(13)</cf_name>
        <cf_value>-0.4530320275590888</cf_value>
        <t_stat>-51410532313874.57</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zrff5(14)</cf_name>
        <cf_value>-0.05887447593039786</cf_value>
        <t_stat>-6733615592667.352</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zrff5(15)</cf_name>
        <cf_value>-0.009118205533127579</cf_value>
        <t_stat>-1715244123732.347</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <rhs_eq_var>picnia</rhs_eq_var>
      <rhs_eq_var>ptr</rhs_eq_var>
      <rhs_eq_var>rff</rhs_eq_var>
      <rhs_eq_var>rtr</rhs_eq_var>
      <rhs_eq_var>xgap</rhs_eq_var>
    </standard_equation>
    <mce_equation>
      <mce_group>mcap</mce_group>
      <mce_description> ZRFF5 is a weighted average of future federal funds rates.  The weights
sum to one and decline geometrically at a rate based on the average
duration of a five-year bond.
</mce_description>
      <eviews_equation>zrff5 - zrff5_aerr =
             y_zrff5(1) * rff
           + y_zrff5(2) * zrff5(1)
</eviews_equation>
      <python_equation>zrff5 - zrff5_aerr =
             y_zrff5_1 * rff
           + y_zrff5_2 * zrff5(1)
</python_equation>
      <coeff>
        <cf_name>y_zrff5(1)</cf_name>
        <cf_value>0.05479365264340726</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zrff5(2)</cf_name>
        <cf_value>0.9452063473565927</cf_value>
      </coeff>
      <rhs_eq_var>rff</rhs_eq_var>
      <rhs_eq_var>zrff5</rhs_eq_var>
    </mce_equation>
  </variable>
  <variable>
    <name>zyh</name>
    <equation_type>Identity</equation_type>
    <sector>Expectations</sector>
    <definition>Expected level of real after-tax household income, for QEC eq. (VAR exp.)</definition>
    <description>Permanent household income (ZYH) is the scaled discounted stream of
future household income (YH).  The discount factor is 25 percent per
year.  The scaling factor is chosen so that ZYH and YH have the same
value when YH is expected to grow steadily at 3 percent per year.  The
equation shown below is the reduced-form representation of this
expectational computation based on a small-scale VAR used in the
estimation of the main consumption (ECO) equation.
</description>
    <standard_equation>
      <eviews_equation>log(zyh)  - zyh_aerr =
           y_zyh(1)*picnia
          + y_zyh(2)*picnia(-1)
          + y_zyh(3)*picnia(-2)
          + y_zyh(4)*picnia(-3)
          + y_zyh(5)*rff
          + y_zyh(6)*rff(-1)
          + y_zyh(7)*rff(-2)
          + y_zyh(8)*rff(-3)
          + y_zyh(9)*xgap2
          + y_zyh(10)*xgap2(-1)
          + y_zyh(11)*xgap2(-2)
          + y_zyh(12)*xgap2(-3)
          + y_zyh(13)*ptr
          + y_zyh(14)*rtr
          + y_zyh(15)*yhgap
          + y_zyh(16)*yhgap(-1)
          + y_zyh(17)*yhgap(-2)
          + y_zyh(18)*yhgap(-3)
          + y_zyh(19)*log(zyhst*xgdpt)</eviews_equation>
      <python_equation>log(zyh)  - zyh_aerr =
           y_zyh_1*picnia
          + y_zyh_2*picnia(-1)
          + y_zyh_3*picnia(-2)
          + y_zyh_4*picnia(-3)
          + y_zyh_5*rff
          + y_zyh_6*rff(-1)
          + y_zyh_7*rff(-2)
          + y_zyh_8*rff(-3)
          + y_zyh_9*xgap2
          + y_zyh_10*xgap2(-1)
          + y_zyh_11*xgap2(-2)
          + y_zyh_12*xgap2(-3)
          + y_zyh_13*ptr
          + y_zyh_14*rtr
          + y_zyh_15*yhgap
          + y_zyh_16*yhgap(-1)
          + y_zyh_17*yhgap(-2)
          + y_zyh_18*yhgap(-3)
          + y_zyh_19*log(zyhst*xgdpt)</python_equation>
      <coeff>
        <cf_name>y_zyh(1)</cf_name>
        <cf_value>8.403034216398836e-05</cf_value>
        <t_stat>22228592995.87179</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyh(2)</cf_name>
        <cf_value>0.0007023129900742578</cf_value>
        <t_stat>171749146427.1288</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyh(3)</cf_name>
        <cf_value>0.0005988312485600414</cf_value>
        <t_stat>147650023247.4493</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyh(4)</cf_name>
        <cf_value>0.00046906873529373</cf_value>
        <t_stat>128696297011.0143</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyh(5)</cf_name>
        <cf_value>-0.002112400975583133</cf_value>
        <t_stat>-338096800649.436</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyh(6)</cf_name>
        <cf_value>0.0001656602252725924</cf_value>
        <t_stat>19689351286.89098</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyh(7)</cf_name>
        <cf_value>-0.0007780393043584456</cf_value>
        <t_stat>-92192707618.087</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyh(8)</cf_name>
        <cf_value>0.0002906813774138189</cf_value>
        <t_stat>46524377073.11857</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyh(9)</cf_name>
        <cf_value>0.0009057626374626405</cf_value>
        <t_stat>87516652223.01416</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyh(10)</cf_name>
        <cf_value>0.002687425542518095</cf_value>
        <t_stat>145806158800.7431</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyh(11)</cf_name>
        <cf_value>0.0006823597205465298</cf_value>
        <t_stat>36890460397.93328</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyh(12)</cf_name>
        <cf_value>-0.001256388702977828</cf_value>
        <t_stat>-108457723401.9895</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyh(13)</cf_name>
        <cf_value>-0.001854243316194259</cf_value>
        <t_stat>-150057050145.0096</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zyh(14)</cf_name>
        <cf_value>0.002434098677388386</cf_value>
        <t_stat>176351782948.9832</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zyh(15)</cf_name>
        <cf_value>0.004161665385029935</cf_value>
        <t_stat>741576935763.8336</t_stat>
        <distributed_lag_group>4</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyh(16)</cf_name>
        <cf_value>0.0007501557850814375</cf_value>
        <t_stat>103332138761.8787</t_stat>
        <distributed_lag_group>4</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyh(17)</cf_name>
        <cf_value>-0.0001921235465779609</cf_value>
        <t_stat>-26129922025.6898</t_stat>
        <distributed_lag_group>4</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyh(18)</cf_name>
        <cf_value>-0.0003602829076187046</cf_value>
        <t_stat>-62678401277.76989</t_stat>
        <distributed_lag_group>4</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyh(19)</cf_name>
        <cf_value>0.9999999999999565</cf_value>
        <t_stat>280285385735409.3</t_stat>
      </coeff>
      <rhs_eq_var>picnia</rhs_eq_var>
      <rhs_eq_var>ptr</rhs_eq_var>
      <rhs_eq_var>rff</rhs_eq_var>
      <rhs_eq_var>rtr</rhs_eq_var>
      <rhs_eq_var>xgap2</rhs_eq_var>
      <rhs_eq_var>xgdpt</rhs_eq_var>
      <rhs_eq_var>yhgap</rhs_eq_var>
      <rhs_eq_var>zyhst</rhs_eq_var>
    </standard_equation>
    <mce_equation>
      <mce_group>mcother</mce_group>
      <mce_description>Permanent household income (ZYH) is the scaled discounted stream of
future household income (YH).  The discount factor is 25 percent per
year.  The scaling factor is chosen so that ZYH and YH have the same
value when YH is expected to grow steadily at 3 percent per year.
</mce_description>
      <eviews_equation>zyh - zyh_aerr = (1 - (y_zyh(1)^.25)*exp(y_zyh(2))) * yh
               + (y_zyh(1)^.25) * zyh(1)
</eviews_equation>
      <python_equation>zyh - zyh_aerr = (1 - (y_zyh_1**.25)*exp(y_zyh_2)) * yh
               + (y_zyh_1**.25) * zyh(1)
</python_equation>
      <coeff>
        <cf_name>y_zyh(1)</cf_name>
        <cf_value>0.750</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zyh(2)</cf_name>
        <cf_value>0.0075</cf_value>
      </coeff>
      <rhs_eq_var>yh</rhs_eq_var>
      <rhs_eq_var>zyh</rhs_eq_var>
    </mce_equation>
  </variable>
  <variable>
    <name>zyhp</name>
    <equation_type>Identity</equation_type>
    <sector>Expectations</sector>
    <definition>Expected level of real after-tax property income, for QEC eq. (VAR exp.)</definition>
    <description>Permanent household property income (ZYHP) is the scaled discounted
stream of future household property income (YHP).  The discount factor
is 25 percent per year.  The scaling factor is chosen so that ZYHP and
YHP have the same value when YHP is expected to grow steadily at 3
percent per year.  The equation shown below is the reduced-form
representation of this expectational computation based on a
small-scale VAR used in the estimation of the main consumption (ECO)
equation.
</description>
    <standard_equation>
      <eviews_equation>log(zyhp)  - zyhp_aerr =
           y_zyhp(1)*picnia
          + y_zyhp(2)*picnia(-1)
          + y_zyhp(3)*picnia(-2)
          + y_zyhp(4)*picnia(-3)
          + y_zyhp(5)*rff
          + y_zyhp(6)*rff(-1)
          + y_zyhp(7)*rff(-2)
          + y_zyhp(8)*rff(-3)
          + y_zyhp(9)*xgap2
          + y_zyhp(10)*xgap2(-1)
          + y_zyhp(11)*xgap2(-2)
          + y_zyhp(12)*xgap2(-3)
          + y_zyhp(13)*ptr
          + y_zyhp(14)*rtr
          + y_zyhp(15)*yhgap
          + y_zyhp(16)*yhgap(-1)
          + y_zyhp(17)*yhgap(-2)
          + y_zyhp(18)*yhgap(-3)
          + y_zyhp(19)*yhpgap
          + y_zyhp(20)*yhpgap(-1)
          + y_zyhp(21)*yhpgap(-2)
          + y_zyhp(22)*yhpgap(-3)
          + y_zyhp(23)*log(zyhpst*zyhst*xgdpt)</eviews_equation>
      <python_equation>log(zyhp)  - zyhp_aerr =
           y_zyhp_1*picnia
          + y_zyhp_2*picnia(-1)
          + y_zyhp_3*picnia(-2)
          + y_zyhp_4*picnia(-3)
          + y_zyhp_5*rff
          + y_zyhp_6*rff(-1)
          + y_zyhp_7*rff(-2)
          + y_zyhp_8*rff(-3)
          + y_zyhp_9*xgap2
          + y_zyhp_10*xgap2(-1)
          + y_zyhp_11*xgap2(-2)
          + y_zyhp_12*xgap2(-3)
          + y_zyhp_13*ptr
          + y_zyhp_14*rtr
          + y_zyhp_15*yhgap
          + y_zyhp_16*yhgap(-1)
          + y_zyhp_17*yhgap(-2)
          + y_zyhp_18*yhgap(-3)
          + y_zyhp_19*yhpgap
          + y_zyhp_20*yhpgap(-1)
          + y_zyhp_21*yhpgap(-2)
          + y_zyhp_22*yhpgap(-3)
          + y_zyhp_23*log(zyhpst*zyhst*xgdpt)</python_equation>
      <coeff>
        <cf_name>y_zyhp(1)</cf_name>
        <cf_value>0.0008637359958914742</cf_value>
        <t_stat>176759242667.1153</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyhp(2)</cf_name>
        <cf_value>0.001043993924986531</cf_value>
        <t_stat>194221002560.117</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyhp(3)</cf_name>
        <cf_value>0.0009412688975392932</cf_value>
        <t_stat>176315993412.9136</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyhp(4)</cf_name>
        <cf_value>0.000458916642717137</cf_value>
        <t_stat>98672686399.5925</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyhp(5)</cf_name>
        <cf_value>-0.001544432205587824</cf_value>
        <t_stat>-190609060543.2005</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyhp(6)</cf_name>
        <cf_value>-0.0006407725735247019</cf_value>
        <t_stat>-58198540998.1202</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyhp(7)</cf_name>
        <cf_value>-0.000877216982815245</cf_value>
        <t_stat>-79961151544.35294</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyhp(8)</cf_name>
        <cf_value>-4.075028532698682e-05</cf_value>
        <t_stat>-5092370987.662168</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyhp(9)</cf_name>
        <cf_value>-0.002036934910319444</cf_value>
        <t_stat>-146846274003.2379</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyhp(10)</cf_name>
        <cf_value>0.003079022876028106</cf_value>
        <t_stat>126243468762.4614</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyhp(11)</cf_name>
        <cf_value>0.001533670579319286</cf_value>
        <t_stat>61395970703.02214</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyhp(12)</cf_name>
        <cf_value>-0.0009794433698078088</cf_value>
        <t_stat>-60186410380.56396</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyhp(13)</cf_name>
        <cf_value>-0.003307915461364551</cf_value>
        <t_stat>-183774665668.8534</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zyhp(14)</cf_name>
        <cf_value>0.003103172047474443</cf_value>
        <t_stat>166602195390.427</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zyhp(15)</cf_name>
        <cf_value>0.004220697583687526</cf_value>
        <t_stat>512590658042.1738</t_stat>
        <distributed_lag_group>4</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyhp(16)</cf_name>
        <cf_value>0.0001307621492671122</cf_value>
        <t_stat>13488794342.88011</t_stat>
        <distributed_lag_group>4</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyhp(17)</cf_name>
        <cf_value>5.342070875074808e-05</cf_value>
        <t_stat>5347720784.801171</t_stat>
        <distributed_lag_group>4</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyhp(18)</cf_name>
        <cf_value>-0.0008349442433696925</cf_value>
        <t_stat>-96475698819.03139</t_stat>
        <distributed_lag_group>4</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyhp(19)</cf_name>
        <cf_value>0.002251478648554251</cf_value>
        <t_stat>418035984786.2835</t_stat>
        <distributed_lag_group>5</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyhp(20)</cf_name>
        <cf_value>0.0002014050026037725</cf_value>
        <t_stat>30752461214.03916</t_stat>
        <distributed_lag_group>5</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyhp(21)</cf_name>
        <cf_value>-0.0004274985452560566</cf_value>
        <t_stat>-64389054561.96906</t_stat>
        <distributed_lag_group>5</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyhp(22)</cf_name>
        <cf_value>-0.0002520786346265581</cf_value>
        <t_stat>-47895252852.33196</t_stat>
        <distributed_lag_group>5</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyhp(23)</cf_name>
        <cf_value>0.9999999999999468</cf_value>
        <t_stat>186145509558884.1</t_stat>
      </coeff>
      <rhs_eq_var>picnia</rhs_eq_var>
      <rhs_eq_var>ptr</rhs_eq_var>
      <rhs_eq_var>rff</rhs_eq_var>
      <rhs_eq_var>rtr</rhs_eq_var>
      <rhs_eq_var>xgap2</rhs_eq_var>
      <rhs_eq_var>xgdpt</rhs_eq_var>
      <rhs_eq_var>yhgap</rhs_eq_var>
      <rhs_eq_var>yhpgap</rhs_eq_var>
      <rhs_eq_var>zyhpst</rhs_eq_var>
      <rhs_eq_var>zyhst</rhs_eq_var>
    </standard_equation>
    <mce_equation>
      <mce_group>mcother</mce_group>
      <mce_description>Permanent household property income (ZYHP) is the scaled discounted
stream of future household property income (YHP).  The discount factor
is 25 percent per year.  The scaling factor is chosen so that ZYHP and
YHP have the same value when YHP is expected to grow steadily at 3
percent per year.

</mce_description>
      <eviews_equation>zyhp - zyhp_aerr = (1 - (y_zyhp(1)^.25)*exp(y_zyhp(2))) * yhp
                 + (y_zyhp(1)^.25) * zyhp(1)
</eviews_equation>
      <python_equation>zyhp - zyhp_aerr = (1 - (y_zyhp_1**.25)*exp(y_zyhp_2)) * yhp
                 + (y_zyhp_1**.25) * zyhp(1)
</python_equation>
      <coeff>
        <cf_name>y_zyhp(1)</cf_name>
        <cf_value>0.750</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zyhp(2)</cf_name>
        <cf_value>0.0075</cf_value>
      </coeff>
      <rhs_eq_var>yhp</rhs_eq_var>
      <rhs_eq_var>zyhp</rhs_eq_var>
    </mce_equation>
  </variable>
  <variable>
    <name>zyhpst</name>
    <equation_type>Behavioral</equation_type>
    <sector>Expectations</sector>
    <definition>Expected trend share of property income in household income</definition>
    <standard_equation>
      <eviews_equation>log(zyhpst)-zyhpst_aerr = log(zyhpst(-1)) + y_zyhpst(1)*yhpgap(-1)/100
	 </eviews_equation>
      <python_equation>log(zyhpst)-zyhpst_aerr = log(zyhpst(-1)) + y_zyhpst_1*yhpgap(-1)/100
	 </python_equation>
      <coeff>
        <cf_name>y_zyhpst(1)</cf_name>
        <cf_value>0.05</cf_value>
      </coeff>
      <rhs_eq_var>yhpgap</rhs_eq_var>
      <rhs_eq_var>zyhpst</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>zyhst</name>
    <equation_type>Behavioral</equation_type>
    <sector>Expectations</sector>
    <definition>Expected trend ratio of household income to GDP</definition>
    <standard_equation>
      <eviews_equation>log(zyhst) - zyhst_aerr = log(zyhst(-1)) + y_zyhst(1)*yhgap(-1)/100
	 </eviews_equation>
      <python_equation>log(zyhst) - zyhst_aerr = log(zyhst(-1)) + y_zyhst_1*yhgap(-1)/100
	 </python_equation>
      <coeff>
        <cf_name>y_zyhst(1)</cf_name>
        <cf_value>0.05</cf_value>
      </coeff>
      <rhs_eq_var>yhgap</rhs_eq_var>
      <rhs_eq_var>zyhst</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>zyht</name>
    <equation_type>Identity</equation_type>
    <sector>Expectations</sector>
    <definition>Expected level of real transfer income, for QEC eq. (VAR exp.)</definition>
    <description>Permanent household transfer income (ZYHT) is the scaled discounted
stream of future household transfer income (YHT).  The discount factor
is 25 percent per year.  The scaling factor is chosen so that ZYHT and
YHT have the same value when YHT is expected to grow steadily at 3
percent per year.  The equation shown below is the reduced-form
representation of this expectational computation based on a
small-scale VAR used in the estimation of the main consumption (ECO)
equation.
</description>
    <standard_equation>
      <eviews_equation>log(zyht)  - zyht_aerr =
           y_zyht(1)*picnia
          + y_zyht(2)*picnia(-1)
          + y_zyht(3)*picnia(-2)
          + y_zyht(4)*picnia(-3)
          + y_zyht(5)*rff
          + y_zyht(6)*rff(-1)
          + y_zyht(7)*rff(-2)
          + y_zyht(8)*rff(-3)
          + y_zyht(9)*xgap2
          + y_zyht(10)*xgap2(-1)
          + y_zyht(11)*xgap2(-2)
          + y_zyht(12)*xgap2(-3)
          + y_zyht(13)*ptr
          + y_zyht(14)*rtr
          + y_zyht(15)*yhgap
          + y_zyht(16)*yhgap(-1)
          + y_zyht(17)*yhgap(-2)
          + y_zyht(18)*yhgap(-3)
          + y_zyht(19)*yhtgap
          + y_zyht(20)*yhtgap(-1)
          + y_zyht(21)*yhtgap(-2)
          + y_zyht(22)*yhtgap(-3)
          + y_zyht(23)*log(zyhtst*zyhst*xgdpt)</eviews_equation>
      <python_equation>log(zyht)  - zyht_aerr =
           y_zyht_1*picnia
          + y_zyht_2*picnia(-1)
          + y_zyht_3*picnia(-2)
          + y_zyht_4*picnia(-3)
          + y_zyht_5*rff
          + y_zyht_6*rff(-1)
          + y_zyht_7*rff(-2)
          + y_zyht_8*rff(-3)
          + y_zyht_9*xgap2
          + y_zyht_10*xgap2(-1)
          + y_zyht_11*xgap2(-2)
          + y_zyht_12*xgap2(-3)
          + y_zyht_13*ptr
          + y_zyht_14*rtr
          + y_zyht_15*yhgap
          + y_zyht_16*yhgap(-1)
          + y_zyht_17*yhgap(-2)
          + y_zyht_18*yhgap(-3)
          + y_zyht_19*yhtgap
          + y_zyht_20*yhtgap(-1)
          + y_zyht_21*yhtgap(-2)
          + y_zyht_22*yhtgap(-3)
          + y_zyht_23*log(zyhtst*zyhst*xgdpt)</python_equation>
      <coeff>
        <cf_name>y_zyht(1)</cf_name>
        <cf_value>-0.000334830912493238</cf_value>
        <t_stat>-186889252825.3672</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyht(2)</cf_name>
        <cf_value>0.0004734682680155963</cf_value>
        <t_stat>244116308495.7178</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyht(3)</cf_name>
        <cf_value>0.0002798072585528634</cf_value>
        <t_stat>148379043550.5535</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyht(4)</cf_name>
        <cf_value>0.000327960879431146</cf_value>
        <t_stat>194885547468.8871</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyht(5)</cf_name>
        <cf_value>-0.002500279763979537</cf_value>
        <t_stat>-856253769611.016</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyht(6)</cf_name>
        <cf_value>0.0008855681526303969</cf_value>
        <t_stat>221499844558.7588</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyht(7)</cf_name>
        <cf_value>-0.001214881268111102</cf_value>
        <t_stat>-296649826744.1209</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyht(8)</cf_name>
        <cf_value>8.524329709881322e-05</cf_value>
        <t_stat>28265727840.07639</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyht(9)</cf_name>
        <cf_value>0.002172842548066125</cf_value>
        <t_stat>446547213365.2201</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyht(10)</cf_name>
        <cf_value>0.00313028920932204</cf_value>
        <t_stat>361768248130.0486</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyht(11)</cf_name>
        <cf_value>0.002114206871939033</cf_value>
        <t_stat>241275737287.2875</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyht(12)</cf_name>
        <cf_value>0.0002481445696860439</cf_value>
        <t_stat>43351019576.51565</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyht(13)</cf_name>
        <cf_value>-0.0007464054935481564</cf_value>
        <t_stat>-129368288338.9941</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zyht(14)</cf_name>
        <cf_value>0.002744349582394016</cf_value>
        <t_stat>437547186771.2955</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zyht(15)</cf_name>
        <cf_value>0.002708245687651875</cf_value>
        <t_stat>1021026403638.385</t_stat>
        <distributed_lag_group>4</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyht(16)</cf_name>
        <cf_value>0.0006793788749861876</cf_value>
        <t_stat>202144863095.1952</t_stat>
        <distributed_lag_group>4</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyht(17)</cf_name>
        <cf_value>0.0003089861693518611</cf_value>
        <t_stat>91243650679.5441</t_stat>
        <distributed_lag_group>4</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyht(18)</cf_name>
        <cf_value>-6.935116601571522e-05</cf_value>
        <t_stat>-25656516512.70337</t_stat>
        <distributed_lag_group>4</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyht(19)</cf_name>
        <cf_value>0.001837608113293888</cf_value>
        <t_stat>1510643781782.785</t_stat>
        <distributed_lag_group>5</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyht(20)</cf_name>
        <cf_value>0.0005096499176820247</cf_value>
        <t_stat>377431201220.8265</t_stat>
        <distributed_lag_group>5</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyht(21)</cf_name>
        <cf_value>9.470842999385746e-05</cf_value>
        <t_stat>68203675737.90664</t_stat>
        <distributed_lag_group>5</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyht(22)</cf_name>
        <cf_value>0.00024263888389989</cf_value>
        <t_stat>213954210320.8321</t_stat>
        <distributed_lag_group>5</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zyht(23)</cf_name>
        <cf_value>0.9999999999999932</cf_value>
        <t_stat>489814668175101.9</t_stat>
      </coeff>
      <rhs_eq_var>picnia</rhs_eq_var>
      <rhs_eq_var>ptr</rhs_eq_var>
      <rhs_eq_var>rff</rhs_eq_var>
      <rhs_eq_var>rtr</rhs_eq_var>
      <rhs_eq_var>xgap2</rhs_eq_var>
      <rhs_eq_var>xgdpt</rhs_eq_var>
      <rhs_eq_var>yhgap</rhs_eq_var>
      <rhs_eq_var>yhtgap</rhs_eq_var>
      <rhs_eq_var>zyhst</rhs_eq_var>
      <rhs_eq_var>zyhtst</rhs_eq_var>
    </standard_equation>
    <mce_equation>
      <mce_group>mcother</mce_group>
      <mce_description>Permanent household transfer income (ZYHT) is the scaled discounted
stream of future household transfer income (YHT).  The discount factor is 25
percent per year.  The scaling factor is chosen so that ZYHT and YHT
have the same value when YHT is expected to grow steadily at 3 percent
per year.
</mce_description>
      <eviews_equation>zyht - zyht_aerr = (1 - (y_zyht(1)^.25)*exp(y_zyht(2))) * yht
                 + (y_zyht(1)^.25) * zyht(1)
</eviews_equation>
      <python_equation>zyht - zyht_aerr = (1 - (y_zyht_1**.25)*exp(y_zyht_2)) * yht
                 + (y_zyht_1**.25) * zyht(1)
</python_equation>
      <coeff>
        <cf_name>y_zyht(1)</cf_name>
        <cf_value>0.750</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zyht(2)</cf_name>
        <cf_value>0.0075</cf_value>
      </coeff>
      <rhs_eq_var>yht</rhs_eq_var>
      <rhs_eq_var>zyht</rhs_eq_var>
    </mce_equation>
  </variable>
  <variable>
    <name>zyhtst</name>
    <equation_type>Behavioral</equation_type>
    <sector>Expectations</sector>
    <definition>Expected trend share of transfer income in household income</definition>
    <standard_equation>
      <eviews_equation>log(zyhtst) - zyhtst_aerr = log(zyhtst(-1)) + y_zyhtst(1)*yhtgap(-1)/100
	 </eviews_equation>
      <python_equation>log(zyhtst) - zyhtst_aerr = log(zyhtst(-1)) + y_zyhtst_1*yhtgap(-1)/100
	 </python_equation>
      <coeff>
        <cf_name>y_zyhtst(1)</cf_name>
        <cf_value>0.05</cf_value>
      </coeff>
      <rhs_eq_var>yhtgap</rhs_eq_var>
      <rhs_eq_var>zyhtst</rhs_eq_var>
    </standard_equation>
  </variable>
  <variable>
    <name>zynid</name>
    <equation_type>Identity</equation_type>
    <sector>Expectations</sector>
    <definition>Expected rate of growth of target real dividends, for YNIDN eq. (VAR exp.)</definition>
    <description> The weighted average growth rate of expected future target
dividends, ZYNID, is computed from forecasts of the small-scale VAR
model used in the estimation of the dividends (YNIDN) PAC equation.
The forward weights are those implied by the estimated PAC
coefficients. The equation shown below is the reduced-form
representation of this expectational computation.
</description>
    <standard_equation>
      <eviews_equation>zynid  - zynid_aerr =
           y_zynid(1)
          + y_zynid(2)*picnia(-1)
          + y_zynid(3)*picnia(-2)
          + y_zynid(4)*picnia(-3)
          + y_zynid(5)*picnia(-4)
          + y_zynid(6)*rff(-1)
          + y_zynid(7)*rff(-2)
          + y_zynid(8)*rff(-3)
          + y_zynid(9)*rff(-4)
          + y_zynid(10)*rtr(-1)
          + y_zynid(11)*ptr(-1)
          + y_zynid(12)*xgap(-1)
          + y_zynid(13)*xgap(-2)
          + y_zynid(14)*xgap(-3)
          + y_zynid(15)*xgap(-4)
          + y_zynid(16)*dlog(qynidn(-1)/pxb(-1))
          + y_zynid(17)*dlog(qynidn(-2)/pxb(-2))
          + y_zynid(18)*dlog(qynidn(-3)/pxb(-3))
          + y_zynid(19)*dlog(qynidn(-4)/pxb(-4))
          + y_zynid(20)*hggdpt(-1)/400</eviews_equation>
      <python_equation>zynid  - zynid_aerr =
           y_zynid_1
          + y_zynid_2*picnia(-1)
          + y_zynid_3*picnia(-2)
          + y_zynid_4*picnia(-3)
          + y_zynid_5*picnia(-4)
          + y_zynid_6*rff(-1)
          + y_zynid_7*rff(-2)
          + y_zynid_8*rff(-3)
          + y_zynid_9*rff(-4)
          + y_zynid_10*rtr(-1)
          + y_zynid_11*ptr(-1)
          + y_zynid_12*xgap(-1)
          + y_zynid_13*xgap(-2)
          + y_zynid_14*xgap(-3)
          + y_zynid_15*xgap(-4)
          + y_zynid_16*(log(qynidn(-1)/pxb(-1)) - log(qynidn(-2)/pxb(-2)))
          + y_zynid_17*(log(qynidn(-2)/pxb(-2)) - log(qynidn(-3)/pxb(-3)))
          + y_zynid_18*(log(qynidn(-3)/pxb(-3)) - log(qynidn(-4)/pxb(-4)))
          + y_zynid_19*(log(qynidn(-4)/pxb(-4)) - log(qynidn(-5)/pxb(-5)))
          + y_zynid_20*hggdpt(-1)/400</python_equation>
      <coeff>
        <cf_name>y_zynid(1)</cf_name>
        <cf_value>5.206855405139395e-16</cf_value>
        <t_stat>6.910409679400109</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zynid(2)</cf_name>
        <cf_value>-0.0001020778460719867</cf_value>
        <t_stat>-16324675405560.2</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zynid(3)</cf_name>
        <cf_value>0.0003486952052516843</cf_value>
        <t_stat>50597633415391.51</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zynid(4)</cf_name>
        <cf_value>0.0002522503063284875</cf_value>
        <t_stat>36602172286855.37</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zynid(5)</cf_name>
        <cf_value>0.0002059799369104374</cf_value>
        <t_stat>32390215654063.7</t_stat>
        <distributed_lag_group>1</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zynid(6)</cf_name>
        <cf_value>0.000352649102886596</cf_value>
        <t_stat>32289576061401.55</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zynid(7)</cf_name>
        <cf_value>-0.0009117152893301089</cf_value>
        <t_stat>-60894219193875.62</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zynid(8)</cf_name>
        <cf_value>-0.0008332522818027586</cf_value>
        <t_stat>-56221827467044.33</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zynid(9)</cf_name>
        <cf_value>0.0002220282051739009</cf_value>
        <t_stat>20053045663459.08</t_stat>
        <distributed_lag_group>2</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zynid(10)</cf_name>
        <cf_value>0.001170290263072301</cf_value>
        <t_stat>48662776893950.1</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zynid(11)</cf_name>
        <cf_value>-0.0007048476024184936</cf_value>
        <t_stat>-33097352629009.33</t_stat>
      </coeff>
      <coeff>
        <cf_name>y_zynid(12)</cf_name>
        <cf_value>-0.005098524468651768</cf_value>
        <t_stat>-357763676285484.2</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zynid(13)</cf_name>
        <cf_value>0.001661127416240023</cf_value>
        <t_stat>66521848340990.95</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zynid(14)</cf_name>
        <cf_value>0.0006345562668170024</cf_value>
        <t_stat>25467720383802.31</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zynid(15)</cf_name>
        <cf_value>0.001396819940195254</cf_value>
        <t_stat>91797417233513.74</t_stat>
        <distributed_lag_group>3</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zynid(16)</cf_name>
        <cf_value>0.002519112167658877</cf_value>
        <t_stat>15015917472916.73</t_stat>
        <distributed_lag_group>4</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zynid(17)</cf_name>
        <cf_value>0.01551673287897806</cf_value>
        <t_stat>91396756750307.82</t_stat>
        <distributed_lag_group>4</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zynid(18)</cf_name>
        <cf_value>0.01239948969603592</cf_value>
        <t_stat>74540679843370.55</t_stat>
        <distributed_lag_group>4</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zynid(19)</cf_name>
        <cf_value>-0.006974010098893951</cf_value>
        <t_stat>-44118991147928.6</t_stat>
        <distributed_lag_group>4</distributed_lag_group>
      </coeff>
      <coeff>
        <cf_name>y_zynid(20)</cf_name>
        <cf_value>1.186101463663362</cf_value>
        <t_stat>172844532426645.2</t_stat>
      </coeff>
      <rhs_eq_var>hggdpt</rhs_eq_var>
      <rhs_eq_var>picnia</rhs_eq_var>
      <rhs_eq_var>ptr</rhs_eq_var>
      <rhs_eq_var>pxb</rhs_eq_var>
      <rhs_eq_var>qynidn</rhs_eq_var>
      <rhs_eq_var>rff</rhs_eq_var>
      <rhs_eq_var>rtr</rhs_eq_var>
      <rhs_eq_var>xgap</rhs_eq_var>
    </standard_equation>
    <mce_equation>
      <mce_group>mcother</mce_group>
      <mce_description> ZYNID is a weighted average of future growth rates of the target
level of dividends.  The pattern of the weights is a function
of the PAC adjustment coefficients in the estimated dividend (YNIDN)
equation.  The sum of the weights equals one minus the sum of the
coefficients on lagged growth of actual dividends in the YNIDN
equation.
</mce_description>
      <eviews_equation>zynid - zynid_aerr =
             y_zynid(1) * d( log((qynidn / pxb)), 0, 1 )
           + y_zynid(2) * d( log(qynidn(1) / pxb(1)), 0, 1 )
           + y_zynid(3) * zynid(1)
           + y_zynid(4) * zynid(2)
</eviews_equation>
      <python_equation>zynid - zynid_aerr =
             y_zynid_1 * ( log((qynidn / pxb)) - ( log((qynidn(-1) / pxb(-1)))))
           + y_zynid_2 * ( log(qynidn(1) / pxb(1)) - ( log(qynidn / pxb)))
           + y_zynid_3 * zynid(1)
           + y_zynid_4 * zynid(2)
</python_equation>
      <coeff>
        <cf_name>y_zynid(1)</cf_name>
        <cf_value>0.1301243019611751</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zynid(2)</cf_name>
        <cf_value>0.02618935076830543</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zynid(3)</cf_name>
        <cf_value>0.6695043656581022</cf_value>
      </coeff>
      <coeff>
        <cf_name>y_zynid(4)</cf_name>
        <cf_value>0.2012641018902024</cf_value>
      </coeff>
      <rhs_eq_var>pxb</rhs_eq_var>
      <rhs_eq_var>qynidn</rhs_eq_var>
      <rhs_eq_var>zynid</rhs_eq_var>
    </mce_equation>
  </variable>
  <sector>
    <name>Labor Market</name>
    <description>
This sector contains equations for a variety of labor market
variables, including hours worked, private employment in the nonfarm
business sector, household employment, labor force participation, and
the unemployment rate.

A central equation in the sector is the one for total hours, which is
modeled using the polynomial adjustment cost (PAC) framework.  Over
time, hours error-corrects to an equilibrium level consistent
with aggregate output and trend labor productivity.  The latter is
defined in a manner consistent with the aggregate production function,
and thus depends on the optimal capital/output and energy/output
ratios (which in turn are functions of relative factor prices).

Another key equation is the one for the employment discrepancy
(LEO), whose variation around a trend is estimated to be procyclical.
An identity determines the unemployment rate.

The historical values of some of the variables in this sector are
estimated as latent variables in a reduced-form state-space model that
is documented here and whose code and
data are available in the FRB/US supply-side package.  Among these
latent variables are the natural rate of unemployment (LURNAT) and the
trend levels and drift terms for the labor-force participation rate
(QLFPR, HQLFPR) and the workweek (QLWW, HQLWW).
</description>
  </sector>
  <sector>
    <name>Household Expenditures</name>
    <description>
In FRB/US, optimizing households seek to maximize expected utility
subject to lifetime resources.  Because of risk aversion and
uninsurable income uncertainty, consumption depends on the present
value of expected future income discounted not at the real rate of
interest, but at a higher rate that is fixed at 25 percent per annum.
Heterogeneity across age groups in wealth holdings and the propensity
to consume makes aggregate desired spending a function of both the
level and composition of expected lifetime resources.  Adjustment
costs cause actual spending to deviate from desired spending.

The household optimization problem has two parts.  The first is the
calculation of desired spending in the absence of adjustment costs.
The second applies the polynomial adjustment cost (PAC) framework to
find the optimal path of actual spending given the desired path.
Expectations play a role in both optimization steps.

This general paradigm applies to consumer spending on nondurable
goods and non-housing services (actual = ECO, desired = QECO),
investment in durable goods (ECD, QECD), and investment in residential
structures (EH, QEH).  The equation for ECO also allows for the
presence of some rule-of-thumb or liquidity constrained households
whose consumption moves in proportion to their income.  The desired
level of spending on each of the two categories of investment depends
on a real rental rate in addition to lifetime resources.  A final and
relatively minor consumption category, consumption of housing services
(ECH), is modeled as a simple reduced form.

The modeling of desired consumption centers on variable QEC, which
is the desired level of spending associated with consumption of
nondurable goods and services plus the service flow from the stock of
durables (EC).  QEC is measured historically as the fitted values of a
regression of EC on constructed measures of discounted future income
and Flow of Funds estimates of the net stock of tangible assets held
by the household sector.  The FRB/US equation for QEC is this
regression equation with QEC substituted for EC as its dependent
variable.

</description>
  </sector>
  <sector>
    <name>Aggregate Output Identities</name>
    <description>
Some of the channels through which movements in real GDP are
transmitted elsewhere in the model go through XGDO and XBO,
which are estimates respectively of real GDP and real business output, each adjusted for
measurement error.

The key production sector in FRB/US is business output.  Potential output (XBT) of this sector is modeled with a
two-factor Cobb-Douglas production function, whose inputs are
potential quality-adjusted labor hours and capital services.  Trend multifactor productivity captures a standard Solow
residual.  XBT is linked to potential GDP (XGDPT) through a sequence
of identities that can be described most easily in terms of the
relationships between various measures of the percentage gap between
actual and potential output -- the output gap.

The lack of cyclical variation in non-business output also
underlies the relationship between the actual levels, adjusted for
measurement error, of real GDP (XGDO) and business output (XBO).  Specifically, the
elasticities of XBO and XGO with respect to XGDP are the inverse of
their average nominal historical ratios to GDP, when potential GDP is
held fixed, and 1.0 when actual and potential GDP move together.

Many of the variables that are used to calculate the two measures
of potential output (XGPOT and XBT) are modeled as stochastic
processes that permit both (log) level and growth rate shocks.  As a
result, the trend rate of growth of such a variable differs from and
is generally smoother than the growth rate of its trend level.
Because the same holds true by construction for the two measures of
aggregate potential output, FRB/US contains separate variables for
each trend level and each trend growth rate: XBT and
HXBT; and XGDPT and HGGDPT.

The historical values of some of the key variables that enter the
construction of potential output are estimated as latent variables in
a reduced-form state-space model that is
documented &lt;a href="latent_note.pdf"&gt;here&lt;/a&gt; and whose code and data
are available in the FRB/US supply-side package.  Among these latent
variables are the potential levels of GDP and business sector output, as well as
potential business sector employment (LEPPOT), the natural rate of unemployment
(LURNAT) and the trend components of the labor-force participation
rate (QLFPR) and the workweek (QLWW).  The historical values of the
measures of real GDP and real business output that are adjusted for measurement error (XGDO and XBO) also come from the state-space model.
</description>
  </sector>
  <sector>
    <name>Foreign Activity</name>
    <description>
Key measures of foreign activity are determined in a small-scale
reduced-form forecasting model.  The system contains four primary
equations: an estimated "IS" curve, in which the level of foreign
output gap is a function of the real short-term interest rate abroad;
an estimated foreign inflation equation in which inflation
expectations are expressed as a weighted average of past and
target inflation; an imposed monetary policy reaction function that
determines the foreign short-term rate of interest; and an estimated
yield curve equation in which the foreign bond rate depends on the
foriegn short-term rate and the foreign output gap.  Coefficient
restrictions are imposed to ensure long-run stability.

The real exchange rate is determined via an open interest parity
condition based on real bond rates, augmented with a term to capture
country risk.

Additional identities use exogenous conversion factors to
translate many of the foreign variables between different country
coverages (G10 vs G39) and different aggregation weights.
</description>
  </sector>
  <sector>
    <name>Foreign Trade</name>
    <description>
The core of the foreign trade sector is a pair of error-correction
equations for the volumes of exports and nonoil imports.  An
error-correction equation for domestic crude energy consumption, in
conjunction with the exogenous domestic supply of crude energy,
determines the volume of oil imports.  In addition, the sector
contains a variety of identities and quasi-identities for aggregate
real and nominal exports and imports, U.S. net foreign investment
income, the current account balance, and the net foreign asset
position of the United States.

</description>
  </sector>
  <sector>
    <name>Government</name>
    <description>
Identities.  Much of sector consists of identities that: (1)
relate nominal purchases (consumption and investment expenditures),
transfers, and grants to associated constant-dollar variables and
price indexes; (2) link tax receipts to tax rates and tax bases; and
(3) compute the budget surplus and stock of debt.

Estimated equations.  Error-correction equations link
spending on various types of purchases to trend spending in these
categories.  Other estimated equations account for cyclical
fluctuations in transfer payments and tax rates.

Personal income tax-rate reaction functions.  The sector
includes three options for setting the personal income tax rate of
the federal government.  The choice of an option is determined by
which switch variable -- DFPSRP, DFPDBT, DFPEX -- is set to one.
Activation of DFPSRP causes the tax rates to adjust so that the ratio
of the federal government's surplus to GDP gradually stabilizes at a specified
value.  Activitation of DFPDBT causes the adjustments to stabilize the
ratios of government debt to GDP at specified values.  No adjustments
take place when DFPEX is activated, making this a suitable choice only
in the short run.  The switches are exogenous variables whose values
can change over the course of a simulation.
</description>
  </sector>
  <sector>
    <name>Business Expenditures</name>
    <description>
The equation for investment is based partly on the
framework of optimization subject to adjustment costs and partly on an
ad hoc accelerator effect of output growth on investment growth.  The
latter may capture the effects of cash flow on the ability of
liquidity-constrained firms to finance investment projects.

In the optimization part of each equation, the level of investment
that would be desired in the absence of adjustment costs is defined in
two steps.  In the first, the target capital-output ratio is a
function of the user cost associated with that type of capital.  In
the second, the target investment-output ratio is formed as the
product of the target capital-output ratio and the sum of the
capital-specific rate of depreciation and the rate of growth of
potential output.  This is the rate of investment necessary to hold
the capital-output ratio at its optimal level.

The target for the individual capital-output ratio is derived
jointly from a nested aggregate production function. At the highest
level, the production function is Cobb-Douglas with two factors of
production -- quality-adjusted hours and an aggregate capital
services bundle. The capital services bundle is measured as the
chain-weighted aggregate of the flow of capital services from each
type of capital stock.  Within the capital-services bundle, the
targets for the individual categories are assumed to have a unit
elasticity with respect to the user cost of capital, as in a
Cobb-Douglas production function.  The framework deviates from the
standard Cobb-Douglas specification, however, in allowing the
long-run capital services shares to vary over time.

In the optimization framework, the polynomial adjustment cost (PAC)
approach determines the actual path of investment.  In this approach,
investment responds to the lagged gap between actual and target
investment, expected future growth in target investment, and lagged
growth in actual investment.

Inventories

The stock of inventories is modeled with a simple error-correction
equation in which the equilibrium ratio of inventories to final sales
is a random walk with negative drift.

</description>
  </sector>
  <sector>
    <name>Wages and Prices</name>
    <description>
Main Equations

 At the center of price-wage sector is a pair of equations for core
PCE price inflation (PICXFE) and the rate of change of the ECI measure
of hourly compensation (PIECI).  The equations are estimated
simultaneously.  The form of each equation is based on a variant of
the New Keynesian Phillips Curve (NKPC) derived by Cogley and
Sbordonne (2008) for the case in which the subset of prices or wages
that is not optimally reset each period is indexed to either past or
trend inflation.

(1) &amp;Pi;t = Et-1[&amp;Pi;t+1
       + &amp;kappa;&amp;mu;t] + &amp;epsilon;t

(2) &amp;Pi;t &amp;equiv; &amp;pi;t -
       &amp;gamma;&amp;pi;^t - (1-&amp;gamma;)&amp;pi;*t

(3) &amp;pi;^t  &amp;equiv; &amp;sum;(i=1,n)&amp;pi;t-i /n

 Equation 1 is the basic NKPC expressed in terms of the composite
variable &amp;Pi;, which is defined in equation 2 as the difference
between actual price or wage inflation (&amp;pi;) and a weighted average
of past (&amp;pi;^) and trend (&amp;pi;*) price or wage inflation.
Expectations are formed on the basis of "t-1" information,
&amp;beta;(=.98) is the discount factor, and &amp;mu; is the markup gap.

Past inflation (equation 3) is measured using a single lag (n=1)
in the price NKPC and a four-quarter average (n=4) in the wage NKPC.
For prices, trend inflation is measured using survey data on
expectations of ten-year consumer price inflation (PTR).  Trend wage
inflation equals the sum of trend price inflation and the trend rate
of increase of labor productivity, less an estimate of the trend rate
of change of the relative price of consumption.

 The detrended level of the log labor share in the nonfarm business
sector is a key part of both the price and wage markup gaps.  The
consumption price markup gap is approximately equal to a weighted
average of the detrended labor share, the relative price of nonoil
imports, and a few additional but minor terms, all measured in logs.
The wage markup gap -- in theory, the difference between the marginal
rate of substitution and the real wage -- is expressed as a function
of the detrended labor share and the unemployment gap (LUR-LURNAT).
This structural dependence of wage inflation on the unemployment gap
leads to a dependence of price inflation on the unemployment gap
through expected price inflation.

 The structure of the PICXFE and PIECI equations, along with
various related equations and identities, ensures that the sector has
a long-run equilibrium in which the labor share of income is constant
(given by the inverse of PWSTAR).  Historically, PWSTAR has a trend
that is estimated using a one-sided variant of the HP filter.  The
long-run equilibrium conditions associated with a given value of
PWSTAR are embedded in the definitions of a set of desired or target
price and wage levels: QPXG, QPL, QPXP, and QPCNIA.  UQPCT, which is
the trend in the ratio of the price of consumption (PCNIA) to the
price of final sales (PXP), also enters this structure.  In a long-run
equilibrium, actual inflation will equal trend inflation, where the
latter is usually specified to converge to the rate of inflation
desired by policymakers.

More information on the estimation of the price-wage NKPC
equations is available here.

Price Disaggregation

 The prices of most non-consumption components of GDP are
determined in two stages. The first stage consists of the equation for
PIPXNC, which is the rate of price inflation for an aggregate of
business fixed investment, residential investment, non-labor
government purchases, and exports.  The main determinant of PIPXNC is
the rate of growth of consumption prices including food and energy
(PICNIA), adjusted for an estimate of the trend in PIPXNC-PICNIA.  In
the second stage, PIPXNC is disaggregated into nine component prices
using a set of equations of the form,

(4) &amp;Delta;log(Pi/PXP) = Ci +
    &amp;Delta;log(PXNC/PXP) + DPADJ

 where Pi is a component price, PXNC is the price level
associated with PIPXNC, and DPADJ is a correction factor that accounts
for the fact that the set of equations given by (4) yields an inexact
decomposition of PNXC each quarter.  The equation also includes the
aggregate consumption and non-consumption price, PXP, as a scaling
variable and a constant.  The coded equation for each Pi
sets the constant to zero, but in most simulation applications the
equivalent of a non-zero intercept is included via an add factor whose
value is based on that equation's average historical error.  The prices
determined in this system are PHR, PBFIR, PEGFR, PEGSR and PXR.

Other Prices

 The fundamental energy price is the average per barrel price of
imported oil, POIL. The price index for nonoil imports, PMO, depends on a weighted average of the exchange-rate adjusted foreign CPI and the price index
for nonfarm business output. The rest of the sector consists of a large number of identities
for such variables as the GDP price index (PGDP).
</description>
  </sector>
  <sector>
    <name>Expectations</name>
    <description>
This sector contains the identities that are used for expectational
variables when the assumption of "VAR" expectations is employed.  The
form of each identity is determined by the structure and parameters of
the sub-model that is used to estimate the structural equation in
which the expectation appears.  In most cases, the expectation is for
a weighted sum of a variable over future quarters.  The exceptions are
in the wage-price block (ZPICXFE, ZPIECI), where expectations are for
one period ahead.  In all cases, the VAR expectation is expressed as a
linear function of an observable information set.  Two types of
parameters determine the coefficient values in the typical
expectations equation: discounting weights that specify the horizon of
each expectation and coefficients of the VAR system used to generate
forecasts that proxy for expectations in the estimation sub-model.

In the VAR-expectations formulas, the information set includes a
core set of macro variables: actual consumer price inflation (PICNIA)
and the value expected to prevail in the long run (PTR); the actual
federal funds rate (RFF) and the value expected to prevail in the
long run (RTR); and the output gap (XGAP).  (By definition, the latter
is assumed to be zero in the long run.)  The structure of the core VAR
model is such that interest rate and inflation expectations converge
to long-run expectations as the forecast horizon lengthens.  The
long-run expectations are modeled as random walks in the core VAR.
For many expectational variables, the information set also includes
one or more sector-specific variables.  Expectations in financial
equations assume that current-period data are in the information set,
while those in nonfinancial equations assume that only lagged data are
in the information set.

For expectations appearing in PAC equations, the discounting
weights depend on a general discount factor (.98 per quarter) and on
the estimated adjustment cost parameters as given by the PAC
equation's error-correction coefficient and coefficients on lags of
the dependent variable.  In most cases, the effective forward horizon
of these expectations is only a few years.  The sum of the discounting
weights in PAC expectations is not unity.  For the expectational
components of long-term interest rates and the required rate of return
on equity, the discounting weights sum to unity and depend on the
duration of the financial instrument.  For the expectations of
permanent income appearing in the target level of consumption, the
discouting weights sum to unity and are based on a general discount
factor of 25 percent per year.

For further information,
see Var Expectations Basics.
</description>
  </sector>
  <sector>
    <name>MC Expectations</name>
    <description>
This sector contains the identities that are used for expectational
variables when the assumption of model-consisten expectations is
employed.  The form of each identity is determined by the structure
and parameters of the sub-model that is used to estimate the
structural equation in which the expectation appears.  In most cases,
the expectation is defined as a weighted sum of a variable over future
quarters.  The exceptions are in the wage-price block (ZPICXFE,
ZPIECI), where expectations are for one period ahead.

Discounting weights determine the coefficient values in the typical
expectations equation.  For expectations appearing in PAC equations,
the discounting weights depend on a general discount factor (.98 per
quarter) and on the estimated adjustment cost parameters as given by
the PAC equation's error-correction coefficient and coefficients on
lags of the dependent variable.  In most cases, the effective forward
horizon of these expectations is only a few years.  The sum of the
discounting weights in PAC expectations is not unity.  For the
expectational components of long-term interest rates and the required
rate of return on equity, the discounting weights sum to unity and
depend on the duration of the financial instrument.  For the
expectations of permanent income appearing in the target level of
consumption, the discouting weights sum to unity and are based on a
general discount factor of 25 percent per year.
    </description>
  </sector>
  <sector>
    <name>Nominal Income</name>
    <description>
Many of the equations in this sector are accounting identities for
measures of nominal income, output, and product.  Some of the
identities make use of multiplicative conversion factors, so that the
full set of variables that appear in the NIPA identities do not have
to be included in FRB/US.

The sector also contains equations for the measures of after-tax
household income and its primary components -- labor, transfer, and
property -- that are are used in the consumption sector.  Property
income is defined more broadly than in the NIPA accounts. It includes
the following additional items: imputed income from the stock of
consumer durables, less consumer interest payments to business;
corporate retained earnings; and inflation losses on the stock of
government debt.  These modifications to the definition of household
income imply that households see through the corporate veil and adjust
interest income to exclude that portion which compensates for
inflation.  (An inflation adjustment to interest earned on corporate
debt is not necessary, since an offsetting adjustment would need to be
made to the definition of corporate profits.)

The sector contains estimated equations for dividends, consumer
interest payments to business, the net interest and rental income
component of national income, and the net financial debt of
nonfinancial corporations.

</description>
  </sector>
  <sector>
    <name>Financial Sector</name>
    <description>
The financial sector of FRB/US is divided into three blocks of
equations: equations determining the stance of monetary policy,
defined as the value of the federal funds rate; equations for other
interest rates based on arbitrage relationships; and equations for
household wealth, including one that relates the value of the stock
market to real bond yields and expected growth in dividends.

Monetary Policy

 In the monetary policy block, there are seven basic options for
setting the federal funds rate, including variants of the Taylor rule,
an estimated policy rule, a pre-determined path for the funds rate
that can be defined in either nominal or real terms, and a generalized
policy rule that can be used, for example, to target either inflation
or the price level.  These options are mutually exclusive, although it
is possible to switch from one option to another in multi-period
simulations by varying a group of exogenous "switches."

The chosen basic policy option can be modified so that the outcome
for the federal funds rate is subject to the zero lower bound (ZLB).
In addition, the timing of the liftoff of the funds rate from the ZLB
can be determined by a version of the threshold criteria that appeared
in FOMC statements from December 2012 to January 2014.  In this case,
liftoff is delayed until either the unemployment rate falls below a
threshold or the expected inflation rate rises above a threshold.

 The choice of a basic option is determined by which of seven
switch variables -- DMPEX, DMPRR, DMPTAY, DMPTLR, DMPINTAY, DMPALT,
and DMPGEN -- is set to one.  Activation of one of the first two
switches sets the funds rate to an pre-determined nominal (RFFIX) or
real path (RRFIX).  Activation of any of the remaining switches sets
the funds rate to the outcome of an equation whose structure
corresponds to a given policy rule (eg, RFFTAY, RFFTLR, etc).  The
RFFRULE equation combines the seven options in a form that yields the
outcome for the funds rate under the chosen option.

Setting the exogenous variable RFFMIN to zero (or a small positive
value) imposes the ZLB; setting RFFMIN to a large negative number
eliminates the constraint.

When the exogenous switch variable DMPTRSH = 1, liftoff from the
ZLB is delayed until either the unemployment rate falls below a
critical rate (LURTRSH) or expected inflation rises above a critical
rate (PITRSH).  Once either threshold is crossed, the policy rate is
determined, with a one-quarter delay and subject to the ZLB, by the
chosen basic policy option, and it continues to be set according to
that policy option irrespective of the subsequent outcomes for
unemployment and expected inflation.  The implementation of the
threshold-based policy relies on four endogenous trigger variables,
DMPTLUR, DMPTPI, DMPTMAX, and DMPTR.  When either of the thresholds
has been crossed, the value of DMPTR becomes 1.0 and remains at that
value in subsequent quarters.

The final equation in the monetary policy block determines the
value of the effective federal funds rate (RFF) by modifying the
value of RFFRULE for the effects of the thresholds, when they are
turned on and are binding.

Other Interest Rates

In the block of equations that determines other interest rates, the
most important are those for yields on BBB corporate bonds (RBBB) and
5-, 10-, and 30-year government bonds (RG5, RG10, RG30).  These
equations are based on the expectations theory of the term structure,
whereby the yield on a long-term bond equals a weighted average of
expected rates on short-term assets over the maturity of the long-term
bond plus a term/risk premium.  The equations employ an approximation
in which the weighted average is calculated over an infinite horizon
and the weights decline at a geometric rate that is based on the
bond's duration.  The latter is calculated as a function of the bond's
maturity and the average historical level of nominal interest rates.

 (1) Rt(m) =
(1-w(m))Et[&amp;sum;(i=0,&amp;infin;)w(m)i
rt+i] + &amp;phi;t(m)

 where R(m) is the rate of interest on a bond whose
maturity is m quarters, r is the federal funds rate, and
&amp;phi;(m) is the term/risk premium.  The following formulas
define the value of w(m).

 (2) w(m) = (D(m)-1)/D(m)
 (3) D(m) = (1-gm)/(1-g)
 (4) g = 1/(1+(R^).25)

 D(m) is the duration of a bond whose maturity is m
quarters.  R^ is the average nominal rate of interest.

 The term/risk premiums &amp;phi;(m) associated with the
four bond rates consist of a constant, a serially correlated residual,
and an element that varies with the output gap (x) expressed as a
present value with the same form as the funds rate present value.

 (5)
(1-w(m))Et[&amp;sum;(i=0,&amp;infin;)w(m)i
xt+i]

 The funds rate present value in equation (1) is assigned to a
variable whose name starts with the characters ZRFF (eg, ZRFF10) and
the output gap present value in equation (5) is assigned to a variable
whose name starts ZGAP (eg, ZGAP10).

In addition to the four main bond rates, the second block of
equations contains estimated equations for yields on Treasury bills
(RTB), home mortgages (RME), and new car loans (RCAR).

Wealth

The final block of the sector determines the value of household net
worth, as measured by the Federal Reserve's Flow-of-Funds accounts.
Household net worth is divided into two components, corporate equity
(WPSN) and other (WPON).  The former is determined using a
linearization of the standard Gordon formula, in which stock prices
depend on the level of dividends (proxied by one-half the level of
after-tax corporate profits), expected future growth in dividends, the
real interest rate (on 30-year government bonds), and an equity
premium.  The equity premium is a function of the BBB premium and a
serially correlated error.  The change from one quarter to the next in
household net worth excluding corporate equity equals the sum of
personal savings, net investment in consumer durables, and capital
gains on houses and other assets.
</description>
  </sector>
  <exogenous_projection>
    <name>1</name>
    <description>average growth over last 9 quarters applied to most recent value</description>
  </exogenous_projection>
  <exogenous_projection>
    <name>2</name>
    <description>most recent value</description>
  </exogenous_projection>
  <exogenous_projection>
    <name>3</name>
    <description>average of past 5 quarters</description>
  </exogenous_projection>
  <exogenous_projection>
    <name>4</name>
    <description>average growth of the past 16 quarters applied to the adjusted average level of the past 4 quarters (the average level is adjusted using the average growth rate so that the level corresponds to the most recent quarter)</description>
  </exogenous_projection>
  <exogenous_projection>
    <name>5</name>
    <description>most recent first difference</description>
  </exogenous_projection>
  <exogenous_projection>
    <name>6</name>
    <description>most recent growth rate</description>
  </exogenous_projection>
  <exogenous_projection>
    <name>7</name>
    <description>zero</description>
  </exogenous_projection>
  <exogenous_projection>
    <name>8</name>
    <description>Average 4-qtr growth rate multiplied by .8</description>
  </exogenous_projection>
  <exogenous_projection>
    <name>9</name>
    <description>Rho = .9</description>
  </exogenous_projection>
  <stochastic_type>
    <name>GV</name>
    <description>Government variables</description>
  </stochastic_type>
  <stochastic_type>
    <name>ST</name>
    <description>Stochastic trend variables</description>
  </stochastic_type>
  <stochastic_type>
    <name>IS</name>
    <description>IS curve variables</description>
  </stochastic_type>
  <stochastic_type>
    <name>RW</name>
    <description>Foreign variables (rest of the world)</description>
  </stochastic_type>
  <stochastic_type>
    <name>FN</name>
    <description>Financial variables</description>
  </stochastic_type>
  <stochastic_type>
    <name>IN</name>
    <description>Income variables</description>
  </stochastic_type>
  <stochastic_type>
    <name>LB</name>
    <description>Labor variables</description>
  </stochastic_type>
  <stochastic_type>
    <name>PR</name>
    <description>Price variables</description>
  </stochastic_type>
  <stochastic_type>
    <name>OT</name>
    <description>Other variables</description>
  </stochastic_type>
</model>
